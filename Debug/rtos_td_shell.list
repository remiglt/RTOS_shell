
rtos_td_shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c444  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800c618  0800c618  0001c618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd3c  0800cd3c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd44  0800cd44  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd44  0800cd44  0001cd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cd4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044c4  200001ec  0800cf38  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046b0  0800cf38  000246b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6a4  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c6f  00000000  00000000  0003a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002992f  00000000  00000000  00040e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e62  00000000  00000000  0006a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fab1f  00000000  00000000  00084609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ecc  00000000  00000000  0017f178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c5fc 	.word	0x0800c5fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800c5fc 	.word	0x0800c5fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <vApplicationStackOverflowHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4a07      	ldr	r2, [pc, #28]	; (800107c <vApplicationGetIdleTaskMemory+0x2c>)
 8001060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <vApplicationGetIdleTaskMemory+0x30>)
 8001066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000020c 	.word	0x2000020c
 8001080:	20000270 	.word	0x20000270

08001084 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_FREERTOS_Init+0x30>)
 800108c:	1d3c      	adds	r4, r7, #4
 800108e:	461d      	mov	r5, r3
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 ffd2 	bl	800504a <osThreadCreate>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <MX_FREERTOS_Init+0x34>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}
 80010b4:	0800c624 	.word	0x0800c624
 80010b8:	20000208 	.word	0x20000208

080010bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f004 f80c 	bl	80050e2 <osDelay>
 80010ca:	e7fb      	b.n	80010c4 <StartDefaultTask+0x8>

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_GPIO_Init+0xc0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <MX_GPIO_Init+0xc0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_GPIO_Init+0xc0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_GPIO_Init+0xc0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a23      	ldr	r2, [pc, #140]	; (800118c <MX_GPIO_Init+0xc0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_GPIO_Init+0xc0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_GPIO_Init+0xc0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a1d      	ldr	r2, [pc, #116]	; (800118c <MX_GPIO_Init+0xc0>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_GPIO_Init+0xc0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_GPIO_Init+0xc0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <MX_GPIO_Init+0xc0>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_GPIO_Init+0xc0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2102      	movs	r1, #2
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001148:	f001 f898 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001164:	f000 fec6 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001180:	f000 feb8 	bl	8001ef4 <HAL_GPIO_Init>

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40022000 	.word	0x40022000

08001194 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800119c:	1d39      	adds	r1, r7, #4
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	2201      	movs	r2, #1
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <__io_putchar+0x20>)
 80011a6:	f002 fca3 	bl	8003af0 <HAL_UART_Transmit>

	return ch;
 80011aa:	687b      	ldr	r3, [r7, #4]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000052c 	.word	0x2000052c

080011b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	BaseType_t hptw = pdFALSE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
	// Give la notification, pour réveiller la tâche du shell
	// Seulement si c'est une interruption de l'USART1
	if (USART1 == huart->Instance)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_UART_RxCpltCallback+0x44>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d107      	bne.n	80011de <HAL_UART_RxCpltCallback+0x26>
	{
		vTaskNotifyGiveFromISR(h_task_shell, &hptw);
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_UART_RxCpltCallback+0x48>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 fde5 	bl	8006da8 <vTaskNotifyGiveFromISR>
	}

	portYIELD_FROM_ISR(hptw)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <HAL_UART_RxCpltCallback+0x3c>
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_UART_RxCpltCallback+0x4c>)
 80011e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	f3bf 8f4f 	dsb	sy
 80011f0:	f3bf 8f6f 	isb	sy
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40011000 	.word	0x40011000
 8001200:	20000470 	.word	0x20000470
 8001204:	e000ed04 	.word	0xe000ed04

08001208 <fonction>:

int fonction(int argc, char ** argv)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	printf("argc =%d\r\n",argc);
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <fonction+0x44>)
 8001216:	f007 fb3f 	bl	8008898 <iprintf>

	for (int i=0;i<argc;i++)
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e00c      	b.n	800123a <fonction+0x32>
	{
		printf("L'argument numero %d = %s \r\n",i,argv[i]);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <fonction+0x48>)
 8001230:	f007 fb32 	bl	8008898 <iprintf>
	for (int i=0;i<argc;i++)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3301      	adds	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbee      	blt.n	8001220 <fonction+0x18>
	}


	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	0800c640 	.word	0x0800c640
 8001250:	0800c64c 	.word	0x0800c64c

08001254 <led>:

int led(int argc, char ** argv)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]

	if (argc !=2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d003      	beq.n	800126c <led+0x18>
	{
		printf("ERREUR : Pas le bon nombre d'arguments\r\n");
 8001264:	4824      	ldr	r0, [pc, #144]	; (80012f8 <led+0xa4>)
 8001266:	f007 fb9d 	bl	80089a4 <puts>
 800126a:	e03f      	b.n	80012ec <led+0x98>
	}
	else{
		argLED = atoi(argv[1]);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f006 fc52 	bl	8007b1c <atoi>
 8001278:	4603      	mov	r3, r0
 800127a:	4a20      	ldr	r2, [pc, #128]	; (80012fc <led+0xa8>)
 800127c:	6013      	str	r3, [r2, #0]
		if (argLED == 0)
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <led+0xa8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d114      	bne.n	80012b0 <led+0x5c>
		{
			//requestLED = 0;
			vTaskSuspend(xHandleToggleLED);
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <led+0xac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fdec 	bl	8005e68 <vTaskSuspend>
			if(HAL_GPIO_ReadPin(GPIO_LED_GPIO_Port, GPIO_LED_Pin)== SET)
 8001290:	2102      	movs	r1, #2
 8001292:	481c      	ldr	r0, [pc, #112]	; (8001304 <led+0xb0>)
 8001294:	f000 ffda 	bl	800224c <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b01      	cmp	r3, #1
 800129c:	d104      	bne.n	80012a8 <led+0x54>
			{
				HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2102      	movs	r1, #2
 80012a2:	4818      	ldr	r0, [pc, #96]	; (8001304 <led+0xb0>)
 80012a4:	f000 ffea 	bl	800227c <HAL_GPIO_WritePin>
			}
			printf("LED eteinte\r\n");
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <led+0xb4>)
 80012aa:	f007 fb7b 	bl	80089a4 <puts>
 80012ae:	e01d      	b.n	80012ec <led+0x98>

		}
		else
		{
			vTaskResume(xHandleToggleLED);
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <led+0xac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fe9f 	bl	8005ff8 <vTaskResume>
			freqLED = atoi(argv[1]);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3304      	adds	r3, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 fc2b 	bl	8007b1c <atoi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a10      	ldr	r2, [pc, #64]	; (800130c <led+0xb8>)
 80012ca:	6013      	str	r3, [r2, #0]
			requestLED = 1;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <led+0xbc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
			printf("LED allumee\r\n");
 80012d2:	4810      	ldr	r0, [pc, #64]	; (8001314 <led+0xc0>)
 80012d4:	f007 fb66 	bl	80089a4 <puts>
			printf("Frequence : %dHz\r\n", 1000/freqLED);
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <led+0xb8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <led+0xc4>)
 80012e8:	f007 fad6 	bl	8008898 <iprintf>

		}
	}

	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800c66c 	.word	0x0800c66c
 80012fc:	20000488 	.word	0x20000488
 8001300:	20000474 	.word	0x20000474
 8001304:	40022000 	.word	0x40022000
 8001308:	0800c694 	.word	0x0800c694
 800130c:	20000484 	.word	0x20000484
 8001310:	20000480 	.word	0x20000480
 8001314:	0800c6a4 	.word	0x0800c6a4
 8001318:	0800c6b4 	.word	0x0800c6b4

0800131c <task_shell>:

void task_shell(void * unused)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	shell_init();
 8001324:	f006 fac2 	bl	80078ac <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <task_shell+0x2c>)
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <task_shell+0x30>)
 800132c:	2066      	movs	r0, #102	; 0x66
 800132e:	f006 fadf 	bl	80078f0 <shell_add>
	shell_add('l', led, "J'adore clignoter");
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <task_shell+0x34>)
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <task_shell+0x38>)
 8001336:	206c      	movs	r0, #108	; 0x6c
 8001338:	f006 fada 	bl	80078f0 <shell_add>
	shell_run();
 800133c:	f006 fb84 	bl	8007a48 <shell_run>

	// Il ne faut jamais retourner d'une tâche
	// Mais on n'arrive jamais là parce que shell_run est une boucle infinie
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800c6c8 	.word	0x0800c6c8
 800134c:	08001209 	.word	0x08001209
 8001350:	0800c6e0 	.word	0x0800c6e0
 8001354:	08001255 	.word	0x08001255

08001358 <configureTimerForRunTimeStats>:


volatile unsigned count;

void configureTimerForRunTimeStats(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    count = 0;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <configureTimerForRunTimeStats+0x14>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim10);
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <configureTimerForRunTimeStats+0x18>)
 8001364:	f002 f8f8 	bl	8003558 <HAL_TIM_Base_Start_IT>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000048c 	.word	0x2000048c
 8001370:	200004e0 	.word	0x200004e0

08001374 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	return count;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <getRunTimeCounterValue+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	2000048c 	.word	0x2000048c

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001392:	f000 fc0e 	bl	8001bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001396:	f000 f87f 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139a:	f7ff fe97 	bl	80010cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800139e:	f000 fb25 	bl	80019ec <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80013a2:	f000 fad9 	bl	8001958 <MX_TIM10_Init>
	BaseType_t TaskTakeNotif;

	BaseType_t TaskGiveQueue;
	BaseType_t TaskTakeQueue;

	sem1 = xSemaphoreCreateBinary();
 80013a6:	2203      	movs	r2, #3
 80013a8:	2100      	movs	r1, #0
 80013aa:	2001      	movs	r0, #1
 80013ac:	f003 ffcc 	bl	8005348 <xQueueGenericCreate>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a2d      	ldr	r2, [pc, #180]	; (8001468 <main+0xdc>)
 80013b4:	6013      	str	r3, [r2, #0]
	configASSERT(sem1 != NULL);
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <main+0xdc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10c      	bne.n	80013d8 <main+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c2:	b672      	cpsid	i
 80013c4:	f383 8811 	msr	BASEPRI, r3
 80013c8:	f3bf 8f6f 	isb	sy
 80013cc:	f3bf 8f4f 	dsb	sy
 80013d0:	b662      	cpsie	i
 80013d2:	607b      	str	r3, [r7, #4]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80013d4:	bf00      	nop
 80013d6:	e7fe      	b.n	80013d6 <main+0x4a>

	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_LENGTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <main+0xe0>)
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	2302      	movs	r3, #2
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	4922      	ldr	r1, [pc, #136]	; (8001470 <main+0xe4>)
 80013e8:	4822      	ldr	r0, [pc, #136]	; (8001474 <main+0xe8>)
 80013ea:	f004 fbbc 	bl	8005b66 <xTaskCreate>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d004      	beq.n	80013fe <main+0x72>
	{
		printf("Error task shell\r\n");
 80013f4:	4820      	ldr	r0, [pc, #128]	; (8001478 <main+0xec>)
 80013f6:	f007 fad5 	bl	80089a4 <puts>
		Error_Handler();
 80013fa:	f000 f8f3 	bl	80015e4 <Error_Handler>
	{
		printf("Error task ledToggle\r\n");
		Error_Handler();
	}*/

	if (xTaskCreate(bidon1, "bidon1", STACK_SIZE, (void *) DELAY_1, TASK_BIDON1_PRIORITY, &xHandleBidon ) != pdPASS)
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <main+0xf0>)
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2302      	movs	r3, #2
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800140a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800140e:	491c      	ldr	r1, [pc, #112]	; (8001480 <main+0xf4>)
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <main+0xf8>)
 8001412:	f004 fba8 	bl	8005b66 <xTaskCreate>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d004      	beq.n	8001426 <main+0x9a>
	{
		printf("Error task bidon\r\n");
 800141c:	481a      	ldr	r0, [pc, #104]	; (8001488 <main+0xfc>)
 800141e:	f007 fac1 	bl	80089a4 <puts>
		Error_Handler();
 8001422:	f000 f8df 	bl	80015e4 <Error_Handler>
	}

	if (xTaskCreate(bidon2, "bidon2", STACK_SIZE, (void *) DELAY_1, TASK_BIDON2_PRIORITY, &xHandleBidon ) != pdPASS)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <main+0xf0>)
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	2301      	movs	r3, #1
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001436:	4915      	ldr	r1, [pc, #84]	; (800148c <main+0x100>)
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <main+0x104>)
 800143a:	f004 fb94 	bl	8005b66 <xTaskCreate>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d004      	beq.n	800144e <main+0xc2>
	{
		printf("Error task bidon\r\n");
 8001444:	4810      	ldr	r0, [pc, #64]	; (8001488 <main+0xfc>)
 8001446:	f007 faad 	bl	80089a4 <puts>
		Error_Handler();
 800144a:	f000 f8cb 	bl	80015e4 <Error_Handler>
	}

	vQueueAddToRegistry(sem1, "Semaphore");
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <main+0xdc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4910      	ldr	r1, [pc, #64]	; (8001494 <main+0x108>)
 8001454:	4618      	mov	r0, r3
 8001456:	f004 faf9 	bl	8005a4c <vQueueAddToRegistry>

	//TaskGiveQueue = xTaskCreate(codeTaskGiveQueue, "Task Give", STACK_SIZE, (void *) DELAY_1, tskIDLE_PRIORITY+2, &xHandleTaskGiveQueue );
	//TaskTakeQueue = xTaskCreate(codeTaskTakeQueue, "Task Take", STACK_SIZE, (void *) DELAY_2, tskIDLE_PRIORITY+1, &xHandleTaskTakeQueue);
	//configASSERT(TaskTakeQueue == pdPASS);

	vTaskStartScheduler();
 800145a:	f004 fe2d 	bl	80060b8 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800145e:	f7ff fe11 	bl	8001084 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001462:	f003 fdeb 	bl	800503c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001466:	e7fe      	b.n	8001466 <main+0xda>
 8001468:	2000047c 	.word	0x2000047c
 800146c:	20000470 	.word	0x20000470
 8001470:	0800c6f4 	.word	0x0800c6f4
 8001474:	0800131d 	.word	0x0800131d
 8001478:	0800c6fc 	.word	0x0800c6fc
 800147c:	20000478 	.word	0x20000478
 8001480:	0800c710 	.word	0x0800c710
 8001484:	08001575 	.word	0x08001575
 8001488:	0800c718 	.word	0x0800c718
 800148c:	0800c72c 	.word	0x0800c72c
 8001490:	080015a5 	.word	0x080015a5
 8001494:	0800c734 	.word	0x0800c734

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 fb74 	bl	8007b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <SystemClock_Config+0xd4>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a2a      	ldr	r2, [pc, #168]	; (800156c <SystemClock_Config+0xd4>)
 80014c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemClock_Config+0xd4>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <SystemClock_Config+0xd8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <SystemClock_Config+0xd8>)
 80014da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <SystemClock_Config+0xd8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001500:	2319      	movs	r3, #25
 8001502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001504:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800150a:	2302      	movs	r3, #2
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	4618      	mov	r0, r3
 8001518:	f000 ff1a 	bl	8002350 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001522:	f000 f85f 	bl	80015e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001526:	f000 fec3 	bl	80022b0 <HAL_PWREx_EnableOverDrive>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001530:	f000 f858 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2107      	movs	r1, #7
 8001552:	4618      	mov	r0, r3
 8001554:	f001 f9a0 	bl	8002898 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800155e:	f000 f841 	bl	80015e4 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <bidon1>:
	}

}

void bidon1(void* pvParameters)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreGive(sem1);
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <bidon1+0x28>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	f003 ff45 	bl	8005414 <xQueueGenericSend>
		vTaskDelay(1000);
 800158a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158e:	f004 fc35 	bl	8005dfc <vTaskDelay>
		printf("le sem ne fonctionne pas\r\n");
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <bidon1+0x2c>)
 8001594:	f007 fa06 	bl	80089a4 <puts>
		xSemaphoreGive(sem1);
 8001598:	e7f0      	b.n	800157c <bidon1+0x8>
 800159a:	bf00      	nop
 800159c:	2000047c 	.word	0x2000047c
 80015a0:	0800c740 	.word	0x0800c740

080015a4 <bidon2>:
	}
}

void bidon2(void* pvParameters)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(sem1, DELAY_1);
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <bidon2+0x18>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 f833 	bl	8005620 <xQueueSemaphoreTake>
 80015ba:	e7f7      	b.n	80015ac <bidon2+0x8>
 80015bc:	2000047c 	.word	0x2000047c

080015c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015d2:	f000 fafb 	bl	8001bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40001000 	.word	0x40001000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_MspInit+0x4c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_MspInit+0x4c>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	210f      	movs	r1, #15
 800162a:	f06f 0001 	mvn.w	r0, #1
 800162e:	f000 fba5 	bl	8001d7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_InitTick+0xe0>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a32      	ldr	r2, [pc, #200]	; (8001720 <HAL_InitTick+0xe0>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_InitTick+0xe0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001668:	f107 0210 	add.w	r2, r7, #16
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f001 faf6 	bl	8002c64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001682:	f001 fac7 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 8001686:	6378      	str	r0, [r7, #52]	; 0x34
 8001688:	e004      	b.n	8001694 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800168a:	f001 fac3 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 800168e:	4603      	mov	r3, r0
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_InitTick+0xe4>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3b01      	subs	r3, #1
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_InitTick+0xe8>)
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_InitTick+0xec>)
 80016a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_InitTick+0xe8>)
 80016aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_InitTick+0xe8>)
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_InitTick+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_InitTick+0xe8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_InitTick+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <HAL_InitTick+0xe8>)
 80016ca:	f001 feed 	bl	80034a8 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11b      	bne.n	8001714 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016dc:	4812      	ldr	r0, [pc, #72]	; (8001728 <HAL_InitTick+0xe8>)
 80016de:	f001 ff3b 	bl	8003558 <HAL_TIM_Base_Start_IT>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016f0:	2036      	movs	r0, #54	; 0x36
 80016f2:	f000 fb5f 	bl	8001db4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d808      	bhi.n	800170e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	2036      	movs	r0, #54	; 0x36
 8001702:	f000 fb3b 	bl	8001d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_InitTick+0xf0>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e002      	b.n	8001714 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001714:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001718:	4618      	mov	r0, r3
 800171a:	3738      	adds	r7, #56	; 0x38
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	431bde83 	.word	0x431bde83
 8001728:	20000490 	.word	0x20000490
 800172c:	40001000 	.word	0x40001000
 8001730:	20000004 	.word	0x20000004

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a03      	ldr	r2, [pc, #12]	; (8001778 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800176c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001770:	f001 ff6a 	bl	8003648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000048c 	.word	0x2000048c
 800177c:	200004e0 	.word	0x200004e0

08001780 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <USART1_IRQHandler+0x10>)
 8001786:	f002 fa7b 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000052c 	.word	0x2000052c

08001794 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM6_DAC_IRQHandler+0x10>)
 800179a:	f001 ff55 	bl	8003648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000490 	.word	0x20000490

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c2:	f006 f9af 	bl	8007b24 <__errno>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2216      	movs	r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
	return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_exit>:

void _exit (int status)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ea:	e7fe      	b.n	80017ea <_exit+0x12>

080017ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
	}

return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fca7 	bl	8001194 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
	}
	return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001886:	605a      	str	r2, [r3, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f006 f914 	bl	8007b24 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20050000 	.word	0x20050000
 8001928:	00000400 	.word	0x00000400
 800192c:	200004dc 	.word	0x200004dc
 8001930:	200046b0 	.word	0x200046b0

08001934 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_TIM10_Init+0x40>)
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <MX_TIM10_Init+0x44>)
 8001960:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <MX_TIM10_Init+0x40>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_TIM10_Init+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 400;
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_TIM10_Init+0x40>)
 8001970:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001974:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_TIM10_Init+0x40>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_TIM10_Init+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_TIM10_Init+0x40>)
 8001984:	f001 fd90 	bl	80034a8 <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800198e:	f7ff fe29 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200004e0 	.word	0x200004e0
 800199c:	40014400 	.word	0x40014400

080019a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_TIM_Base_MspInit+0x44>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d113      	bne.n	80019da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_TIM_Base_MspInit+0x48>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_TIM_Base_MspInit+0x48>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_TIM_Base_MspInit+0x48>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	2019      	movs	r0, #25
 80019d0:	f000 f9d4 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019d4:	2019      	movs	r0, #25
 80019d6:	f000 f9ed 	bl	8001db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40014400 	.word	0x40014400
 80019e8:	40023800 	.word	0x40023800

080019ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <MX_USART1_UART_Init+0x5c>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a30:	f002 f810 	bl	8003a54 <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a3a:	f7ff fdd3 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000052c 	.word	0x2000052c
 8001a48:	40011000 	.word	0x40011000

08001a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0ac      	sub	sp, #176	; 0xb0
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	2284      	movs	r2, #132	; 0x84
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f006 f891 	bl	8007b94 <memset>
  if(uartHandle->Instance==USART1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a36      	ldr	r2, [pc, #216]	; (8001b50 <HAL_UART_MspInit+0x104>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d164      	bne.n	8001b46 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a80:	2300      	movs	r3, #0
 8001a82:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 f91d 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a94:	f7ff fda6 	bl	80015e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_UART_MspInit+0x108>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af8:	2307      	movs	r3, #7
 8001afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4814      	ldr	r0, [pc, #80]	; (8001b58 <HAL_UART_MspInit+0x10c>)
 8001b06:	f000 f9f5 	bl	8001ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b24:	2307      	movs	r3, #7
 8001b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <HAL_UART_MspInit+0x110>)
 8001b32:	f000 f9df 	bl	8001ef4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	2025      	movs	r0, #37	; 0x25
 8001b3c:	f000 f91e 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b40:	2025      	movs	r0, #37	; 0x25
 8001b42:	f000 f937 	bl	8001db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	37b0      	adds	r7, #176	; 0xb0
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020000 	.word	0x40020000

08001b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b66:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b7c:	4c0b      	ldr	r4, [pc, #44]	; (8001bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b8a:	f7ff fed3 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f005 ffcf 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b92:	f7ff fbfb 	bl	800138c <main>
  bx  lr    
 8001b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ba4:	0800cd4c 	.word	0x0800cd4c
  ldr r2, =_sbss
 8001ba8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001bac:	200046b0 	.word	0x200046b0

08001bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC_IRQHandler>

08001bb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f000 f8d5 	bl	8001d66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbc:	200f      	movs	r0, #15
 8001bbe:	f7ff fd3f 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc2:	f7ff fd15 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	200005b4 	.word	0x200005b4

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	200005b4 	.word	0x200005b4

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <__NVIC_SetPriorityGrouping+0x40>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x40>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	05fa0000 	.word	0x05fa0000

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff4c 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8e:	f7ff ff61 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001d92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	6978      	ldr	r0, [r7, #20]
 8001d9a:	f7ff ffb1 	bl	8001d00 <NVIC_EncodePriority>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff80 	bl	8001cac <__NVIC_SetPriority>
}
 8001dac:	bf00      	nop
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff54 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dde:	f7ff ff09 	bl	8001bf4 <HAL_GetTick>
 8001de2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d008      	beq.n	8001e02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e052      	b.n	8001ea8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0216 	bic.w	r2, r2, #22
 8001e10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <HAL_DMA_Abort+0x62>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0208 	bic.w	r2, r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0201 	bic.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e52:	e013      	b.n	8001e7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e54:	f7ff fece 	bl	8001bf4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d90c      	bls.n	8001e7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e015      	b.n	8001ea8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1e4      	bne.n	8001e54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	223f      	movs	r2, #63	; 0x3f
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d004      	beq.n	8001ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00c      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e175      	b.n	8002200 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f040 8164 	bne.w	80021fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <HAL_GPIO_Init+0x56>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d130      	bne.n	8001fac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0201 	and.w	r2, r3, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d017      	beq.n	8001fe8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80be 	beq.w	80021fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	4b66      	ldr	r3, [pc, #408]	; (8002218 <HAL_GPIO_Init+0x324>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a65      	ldr	r2, [pc, #404]	; (8002218 <HAL_GPIO_Init+0x324>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_GPIO_Init+0x324>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002096:	4a61      	ldr	r2, [pc, #388]	; (800221c <HAL_GPIO_Init+0x328>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_GPIO_Init+0x32c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d037      	beq.n	8002132 <HAL_GPIO_Init+0x23e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a57      	ldr	r2, [pc, #348]	; (8002224 <HAL_GPIO_Init+0x330>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d031      	beq.n	800212e <HAL_GPIO_Init+0x23a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a56      	ldr	r2, [pc, #344]	; (8002228 <HAL_GPIO_Init+0x334>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <HAL_GPIO_Init+0x236>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a55      	ldr	r2, [pc, #340]	; (800222c <HAL_GPIO_Init+0x338>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d025      	beq.n	8002126 <HAL_GPIO_Init+0x232>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a54      	ldr	r2, [pc, #336]	; (8002230 <HAL_GPIO_Init+0x33c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01f      	beq.n	8002122 <HAL_GPIO_Init+0x22e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a53      	ldr	r2, [pc, #332]	; (8002234 <HAL_GPIO_Init+0x340>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d019      	beq.n	800211e <HAL_GPIO_Init+0x22a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_GPIO_Init+0x344>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x226>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a51      	ldr	r2, [pc, #324]	; (800223c <HAL_GPIO_Init+0x348>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x222>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a50      	ldr	r2, [pc, #320]	; (8002240 <HAL_GPIO_Init+0x34c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x21e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <HAL_GPIO_Init+0x350>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x21a>
 800210a:	2309      	movs	r3, #9
 800210c:	e012      	b.n	8002134 <HAL_GPIO_Init+0x240>
 800210e:	230a      	movs	r3, #10
 8002110:	e010      	b.n	8002134 <HAL_GPIO_Init+0x240>
 8002112:	2308      	movs	r3, #8
 8002114:	e00e      	b.n	8002134 <HAL_GPIO_Init+0x240>
 8002116:	2307      	movs	r3, #7
 8002118:	e00c      	b.n	8002134 <HAL_GPIO_Init+0x240>
 800211a:	2306      	movs	r3, #6
 800211c:	e00a      	b.n	8002134 <HAL_GPIO_Init+0x240>
 800211e:	2305      	movs	r3, #5
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x240>
 8002122:	2304      	movs	r3, #4
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x240>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x240>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x240>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x240>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <HAL_GPIO_Init+0x328>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_GPIO_Init+0x354>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a34      	ldr	r2, [pc, #208]	; (8002248 <HAL_GPIO_Init+0x354>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b32      	ldr	r3, [pc, #200]	; (8002248 <HAL_GPIO_Init+0x354>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a29      	ldr	r2, [pc, #164]	; (8002248 <HAL_GPIO_Init+0x354>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_GPIO_Init+0x354>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_GPIO_Init+0x354>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_GPIO_Init+0x354>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <HAL_GPIO_Init+0x354>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f ae86 	bls.w	8001f14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40021400 	.word	0x40021400
 8002238:	40021800 	.word	0x40021800
 800223c:	40021c00 	.word	0x40021c00
 8002240:	40022000 	.word	0x40022000
 8002244:	40022400 	.word	0x40022400
 8002248:	40013c00 	.word	0x40013c00

0800224c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e001      	b.n	800226e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
 8002288:	4613      	mov	r3, r2
 800228a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002298:	e003      	b.n	80022a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800229a:	887b      	ldrh	r3, [r7, #2]
 800229c:	041a      	lsls	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	619a      	str	r2, [r3, #24]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_PWREx_EnableOverDrive+0x98>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a22      	ldr	r2, [pc, #136]	; (8002348 <HAL_PWREx_EnableOverDrive+0x98>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_PWREx_EnableOverDrive+0x98>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022de:	f7ff fc89 	bl	8001bf4 <HAL_GetTick>
 80022e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022e4:	e009      	b.n	80022fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022e6:	f7ff fc85 	bl	8001bf4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f4:	d901      	bls.n	80022fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e022      	b.n	8002340 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_PWREx_EnableOverDrive+0x9c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002306:	d1ee      	bne.n	80022e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_PWREx_EnableOverDrive+0x9c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_PWREx_EnableOverDrive+0x9c>)
 800230e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002312:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff fc6e 	bl	8001bf4 <HAL_GetTick>
 8002318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800231a:	e009      	b.n	8002330 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800231c:	f7ff fc6a 	bl	8001bf4 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800232a:	d901      	bls.n	8002330 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e007      	b.n	8002340 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800233c:	d1ee      	bne.n	800231c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40007000 	.word	0x40007000

08002350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e291      	b.n	800288a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002374:	4b96      	ldr	r3, [pc, #600]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b04      	cmp	r3, #4
 800237e:	d00c      	beq.n	800239a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002380:	4b93      	ldr	r3, [pc, #588]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d112      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62>
 800238c:	4b90      	ldr	r3, [pc, #576]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06c      	beq.n	8002480 <HAL_RCC_OscConfig+0x130>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d168      	bne.n	8002480 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e26b      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x7a>
 80023bc:	4b84      	ldr	r3, [pc, #528]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a83      	ldr	r2, [pc, #524]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e02e      	b.n	8002428 <HAL_RCC_OscConfig+0xd8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x9c>
 80023d2:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7e      	ldr	r2, [pc, #504]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7b      	ldr	r2, [pc, #492]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xd8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0xc0>
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a75      	ldr	r2, [pc, #468]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a72      	ldr	r2, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xd8>
 8002410:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6b      	ldr	r2, [pc, #428]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff fbe0 	bl	8001bf4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fbdc 	bl	8001bf4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e21f      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xe8>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff fbcc 	bl	8001bf4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff fbc8 	bl	8001bf4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e20b      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x110>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d069      	beq.n	8002562 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248e:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b4d      	ldr	r3, [pc, #308]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x190>
 80024a6:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x17a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1df      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	493d      	ldr	r1, [pc, #244]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e040      	b.n	8002562 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a38      	ldr	r2, [pc, #224]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7ff fb7e 	bl	8001bf4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fc:	f7ff fb7a 	bl	8001bf4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1bd      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4929      	ldr	r1, [pc, #164]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
 800252e:	e018      	b.n	8002562 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff fb5a 	bl	8001bf4 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7ff fb56 	bl	8001bf4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e199      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d038      	beq.n	80025e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d019      	beq.n	80025aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7ff fb37 	bl	8001bf4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7ff fb33 	bl	8001bf4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e176      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 800259e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x23a>
 80025a8:	e01a      	b.n	80025e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80025ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_RCC_OscConfig+0x280>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7ff fb1d 	bl	8001bf4 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025be:	f7ff fb19 	bl	8001bf4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d903      	bls.n	80025d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e15c      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
 80025d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b91      	ldr	r3, [pc, #580]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a4 	beq.w	8002736 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b8b      	ldr	r3, [pc, #556]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a87      	ldr	r2, [pc, #540]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002616:	4b82      	ldr	r3, [pc, #520]	; (8002820 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002622:	4b7f      	ldr	r3, [pc, #508]	; (8002820 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x4d0>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7ff fae1 	bl	8001bf4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7ff fadd 	bl	8001bf4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	; 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e120      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002648:	4b75      	ldr	r3, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x4d0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x31a>
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a6e      	ldr	r2, [pc, #440]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	e02d      	b.n	80026c6 <HAL_RCC_OscConfig+0x376>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x33c>
 8002672:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a69      	ldr	r2, [pc, #420]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a66      	ldr	r2, [pc, #408]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	e01c      	b.n	80026c6 <HAL_RCC_OscConfig+0x376>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b05      	cmp	r3, #5
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_OscConfig+0x35e>
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a60      	ldr	r2, [pc, #384]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	4b5e      	ldr	r3, [pc, #376]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a5d      	ldr	r2, [pc, #372]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	e00b      	b.n	80026c6 <HAL_RCC_OscConfig+0x376>
 80026ae:	4b5b      	ldr	r3, [pc, #364]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a5a      	ldr	r2, [pc, #360]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	4b58      	ldr	r3, [pc, #352]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d015      	beq.n	80026fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ce:	f7ff fa91 	bl	8001bf4 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7ff fa8d 	bl	8001bf4 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0ce      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ee      	beq.n	80026d6 <HAL_RCC_OscConfig+0x386>
 80026f8:	e014      	b.n	8002724 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7ff fa7b 	bl	8001bf4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7ff fa77 	bl	8001bf4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0b8      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002718:	4b40      	ldr	r3, [pc, #256]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ee      	bne.n	8002702 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a4 	beq.w	8002888 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002740:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d06b      	beq.n	8002824 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d149      	bne.n	80027e8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a30      	ldr	r2, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800275a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff fa48 	bl	8001bf4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7ff fa44 	bl	8001bf4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e087      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	019b      	lsls	r3, r3, #6
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	3b01      	subs	r3, #1
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4313      	orrs	r3, r2
 80027ac:	4a1b      	ldr	r2, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027b2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff fa18 	bl	8001bf4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff fa14 	bl	8001bf4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e057      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x478>
 80027e6:	e04f      	b.n	8002888 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0b      	ldr	r2, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff f9fe 	bl	8001bf4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7ff f9fa 	bl	8001bf4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e03d      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x4ac>
 800281a:	e035      	b.n	8002888 <HAL_RCC_OscConfig+0x538>
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x544>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d028      	beq.n	8002884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d121      	bne.n	8002884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d11a      	bne.n	8002884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002854:	4013      	ands	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800285a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800285c:	4293      	cmp	r3, r2
 800285e:	d111      	bne.n	8002884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	3b01      	subs	r3, #1
 800286e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d107      	bne.n	8002884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800

08002898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0d0      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d910      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 020f 	bic.w	r2, r3, #15
 80028c6:	4965      	ldr	r1, [pc, #404]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b63      	ldr	r3, [pc, #396]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0b8      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800291a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	494d      	ldr	r1, [pc, #308]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d040      	beq.n	80029bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d115      	bne.n	800297a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e07f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e073      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06b      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4936      	ldr	r1, [pc, #216]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7ff f932 	bl	8001bf4 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff f92e 	bl	8001bf4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e053      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d210      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 020f 	bic.w	r2, r3, #15
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e032      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4916      	ldr	r1, [pc, #88]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2a:	f000 f821 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	490a      	ldr	r1, [pc, #40]	; (8002a64 <HAL_RCC_ClockConfig+0x1cc>)
 8002a3c:	5ccb      	ldrb	r3, [r1, r3]
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <HAL_RCC_ClockConfig+0x1d0>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_ClockConfig+0x1d4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fdf8 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023c00 	.word	0x40023c00
 8002a60:	40023800 	.word	0x40023800
 8002a64:	0800c874 	.word	0x0800c874
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a74:	b090      	sub	sp, #64	; 0x40
 8002a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a80:	2300      	movs	r3, #0
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d00d      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	f200 80a1 	bhi.w	8002bdc <HAL_RCC_GetSysClockFreq+0x16c>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002aa2:	e09b      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aa8:	e09b      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aaa:	4b53      	ldr	r3, [pc, #332]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aae:	e098      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002aba:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d028      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	099b      	lsrs	r3, r3, #6
 8002acc:	2200      	movs	r2, #0
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002adc:	fb03 f201 	mul.w	r2, r3, r1
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	fb00 f303 	mul.w	r3, r0, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a43      	ldr	r2, [pc, #268]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aea:	fba0 1202 	umull	r1, r2, r0, r2
 8002aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002af0:	460a      	mov	r2, r1
 8002af2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af6:	4413      	add	r3, r2
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	2200      	movs	r2, #0
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	61fa      	str	r2, [r7, #28]
 8002b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b0a:	f7fe f8dd 	bl	8000cc8 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4613      	mov	r3, r2
 8002b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b16:	e053      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	617a      	str	r2, [r7, #20]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b2a:	f04f 0b00 	mov.w	fp, #0
 8002b2e:	4652      	mov	r2, sl
 8002b30:	465b      	mov	r3, fp
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	0159      	lsls	r1, r3, #5
 8002b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b40:	0150      	lsls	r0, r2, #5
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	ebb2 080a 	subs.w	r8, r2, sl
 8002b4a:	eb63 090b 	sbc.w	r9, r3, fp
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b62:	ebb2 0408 	subs.w	r4, r2, r8
 8002b66:	eb63 0509 	sbc.w	r5, r3, r9
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	00eb      	lsls	r3, r5, #3
 8002b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b78:	00e2      	lsls	r2, r4, #3
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	461d      	mov	r5, r3
 8002b7e:	eb14 030a 	adds.w	r3, r4, sl
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	eb45 030b 	adc.w	r3, r5, fp
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b96:	4629      	mov	r1, r5
 8002b98:	028b      	lsls	r3, r1, #10
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	028a      	lsls	r2, r1, #10
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002baa:	2200      	movs	r2, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	60fa      	str	r2, [r7, #12]
 8002bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb4:	f7fe f888 	bl	8000cc8 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3740      	adds	r7, #64	; 0x40
 8002be8:	46bd      	mov	sp, r7
 8002bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	017d7840 	.word	0x017d7840

08002bfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000000 	.word	0x20000000

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff0 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0a9b      	lsrs	r3, r3, #10
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	0800c884 	.word	0x0800c884

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff ffdc 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0b5b      	lsrs	r3, r3, #13
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	0800c884 	.word	0x0800c884

08002c64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	220f      	movs	r2, #15
 8002c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_RCC_GetClockConfig+0x60>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	601a      	str	r2, [r3, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cf0:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a68      	ldr	r2, [pc, #416]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cfa:	6093      	str	r3, [r2, #8]
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	4964      	ldr	r1, [pc, #400]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d017      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d22:	4b5d      	ldr	r3, [pc, #372]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	4959      	ldr	r1, [pc, #356]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d017      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d5e:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	494a      	ldr	r1, [pc, #296]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 808b 	beq.w	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
 8002db8:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dc4:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe ff10 	bl	8001bf4 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd8:	f7fe ff0c 	bl	8001bf4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e357      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d035      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d02e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e14:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d114      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fed4 	bl	8001bf4 <HAL_GetTick>
 8002e4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe fed0 	bl	8001bf4 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e319      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0ee      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7e:	d111      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	4901      	ldr	r1, [pc, #4]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	0ffffcff 	.word	0x0ffffcff
 8002ea4:	4baa      	ldr	r3, [pc, #680]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4aa9      	ldr	r2, [pc, #676]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eae:	6093      	str	r3, [r2, #8]
 8002eb0:	4ba7      	ldr	r3, [pc, #668]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	49a4      	ldr	r1, [pc, #656]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ece:	4ba0      	ldr	r3, [pc, #640]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed4:	4a9e      	ldr	r2, [pc, #632]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ede:	4b9c      	ldr	r3, [pc, #624]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	4999      	ldr	r1, [pc, #612]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efc:	4b94      	ldr	r3, [pc, #592]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0a:	4991      	ldr	r1, [pc, #580]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1e:	4b8c      	ldr	r3, [pc, #560]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2c:	4988      	ldr	r1, [pc, #544]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f40:	4b83      	ldr	r3, [pc, #524]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4e:	4980      	ldr	r1, [pc, #512]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4977      	ldr	r1, [pc, #476]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f84:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	496f      	ldr	r1, [pc, #444]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f023 020c 	bic.w	r2, r3, #12
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	4966      	ldr	r1, [pc, #408]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	495e      	ldr	r1, [pc, #376]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fea:	4b59      	ldr	r3, [pc, #356]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	4955      	ldr	r1, [pc, #340]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800300c:	4b50      	ldr	r3, [pc, #320]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	494d      	ldr	r1, [pc, #308]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800302e:	4b48      	ldr	r3, [pc, #288]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	4944      	ldr	r1, [pc, #272]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	493c      	ldr	r1, [pc, #240]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003072:	4b37      	ldr	r3, [pc, #220]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	4933      	ldr	r1, [pc, #204]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a2:	492b      	ldr	r1, [pc, #172]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c4:	4922      	ldr	r1, [pc, #136]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d4:	d101      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	4912      	ldr	r1, [pc, #72]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003128:	4909      	ldr	r1, [pc, #36]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d006      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80d9 	beq.w	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a01      	ldr	r2, [pc, #4]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800314e:	e001      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003150:	40023800 	.word	0x40023800
 8003154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003156:	f7fe fd4d 	bl	8001bf4 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800315e:	f7fe fd49 	bl	8001bf4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b64      	cmp	r3, #100	; 0x64
 800316a:	d901      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e194      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003170:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d021      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11d      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	019a      	lsls	r2, r3, #6
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	061b      	lsls	r3, r3, #24
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	071b      	lsls	r3, r3, #28
 80031c4:	4957      	ldr	r1, [pc, #348]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02e      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d129      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320c:	0f1b      	lsrs	r3, r3, #28
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	019a      	lsls	r2, r3, #6
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	431a      	orrs	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	071b      	lsls	r3, r3, #28
 800322c:	493d      	ldr	r1, [pc, #244]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323a:	f023 021f 	bic.w	r2, r3, #31
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	3b01      	subs	r3, #1
 8003244:	4937      	ldr	r1, [pc, #220]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003258:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325e:	0e1b      	lsrs	r3, r3, #24
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	0f1b      	lsrs	r3, r3, #28
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	019a      	lsls	r2, r3, #6
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	431a      	orrs	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	071b      	lsls	r3, r3, #28
 800328c:	4925      	ldr	r1, [pc, #148]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d011      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	019a      	lsls	r2, r3, #6
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	071b      	lsls	r3, r3, #28
 80032bc:	4919      	ldr	r1, [pc, #100]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe fc90 	bl	8001bf4 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032d8:	f7fe fc8c 	bl	8001bf4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0d7      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 80cd 	bne.w	8003498 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330a:	f7fe fc73 	bl	8001bf4 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003312:	f7fe fc6f 	bl	8001bf4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d903      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0ba      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003324:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003328:	4b5e      	ldr	r3, [pc, #376]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d0ed      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02e      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d12a      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800335e:	4b51      	ldr	r3, [pc, #324]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800336c:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	0f1b      	lsrs	r3, r3, #28
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	019a      	lsls	r2, r3, #6
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	4944      	ldr	r1, [pc, #272]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800339a:	4b42      	ldr	r3, [pc, #264]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	493d      	ldr	r1, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d022      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c8:	d11d      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	0e1b      	lsrs	r3, r3, #24
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	0f1b      	lsrs	r3, r3, #28
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	019a      	lsls	r2, r3, #6
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	061b      	lsls	r3, r3, #24
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	4929      	ldr	r1, [pc, #164]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d028      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	0e1b      	lsrs	r3, r3, #24
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	019a      	lsls	r2, r3, #6
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	061b      	lsls	r3, r3, #24
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	071b      	lsls	r3, r3, #28
 8003446:	4917      	ldr	r1, [pc, #92]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4911      	ldr	r1, [pc, #68]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003470:	f7fe fbc0 	bl	8001bf4 <HAL_GetTick>
 8003474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003478:	f7fe fbbc 	bl	8001bf4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e007      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003496:	d1ef      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e049      	b.n	800354e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe fa66 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 f9f6 	bl	80038d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e054      	b.n	800361a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a26      	ldr	r2, [pc, #152]	; (8003628 <HAL_TIM_Base_Start_IT+0xd0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d01d      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <HAL_TIM_Base_Start_IT+0xd4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a21      	ldr	r2, [pc, #132]	; (8003630 <HAL_TIM_Base_Start_IT+0xd8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <HAL_TIM_Base_Start_IT+0xe0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_TIM_Base_Start_IT+0xe4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_TIM_Base_Start_IT+0xe8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d115      	bne.n	8003604 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_TIM_Base_Start_IT+0xec>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d015      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0xbe>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d011      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	e008      	b.n	8003616 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e000      	b.n	8003618 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40001800 	.word	0x40001800
 8003644:	00010007 	.word	0x00010007

08003648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d122      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b02      	cmp	r3, #2
 800366a:	d11b      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0202 	mvn.w	r2, #2
 8003674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f905 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8f7 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f908 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0204 	mvn.w	r2, #4
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8db 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8cd 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8de 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b08      	cmp	r3, #8
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0208 	mvn.w	r2, #8
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2204      	movs	r2, #4
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8b1 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8a3 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8b4 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b10      	cmp	r3, #16
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b10      	cmp	r3, #16
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0210 	mvn.w	r2, #16
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2208      	movs	r2, #8
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f887 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f879 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f88a 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0201 	mvn.w	r2, #1
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fefa 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e4:	2b80      	cmp	r3, #128	; 0x80
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f91a 	bl	8003a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d10e      	bne.n	8003826 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b80      	cmp	r3, #128	; 0x80
 8003814:	d107      	bne.n	8003826 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f90d 	bl	8003a40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d10e      	bne.n	8003852 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d107      	bne.n	8003852 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800384a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f838 	bl	80038c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b20      	cmp	r3, #32
 800385e:	d10e      	bne.n	800387e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b20      	cmp	r3, #32
 800386c:	d107      	bne.n	800387e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f06f 0220 	mvn.w	r2, #32
 8003876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f8cd 	bl	8003a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a40      	ldr	r2, [pc, #256]	; (80039ec <TIM_Base_SetConfig+0x114>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d00f      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a3d      	ldr	r2, [pc, #244]	; (80039f0 <TIM_Base_SetConfig+0x118>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3c      	ldr	r2, [pc, #240]	; (80039f4 <TIM_Base_SetConfig+0x11c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <TIM_Base_SetConfig+0x120>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3a      	ldr	r2, [pc, #232]	; (80039fc <TIM_Base_SetConfig+0x124>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d108      	bne.n	800392a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <TIM_Base_SetConfig+0x114>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02b      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d027      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2c      	ldr	r2, [pc, #176]	; (80039f0 <TIM_Base_SetConfig+0x118>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d023      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <TIM_Base_SetConfig+0x11c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01f      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <TIM_Base_SetConfig+0x120>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01b      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a29      	ldr	r2, [pc, #164]	; (80039fc <TIM_Base_SetConfig+0x124>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d017      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a28      	ldr	r2, [pc, #160]	; (8003a00 <TIM_Base_SetConfig+0x128>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <TIM_Base_SetConfig+0x12c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00f      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <TIM_Base_SetConfig+0x130>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00b      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <TIM_Base_SetConfig+0x134>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <TIM_Base_SetConfig+0x138>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <TIM_Base_SetConfig+0x13c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d108      	bne.n	800399c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <TIM_Base_SetConfig+0x114>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0xf8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <TIM_Base_SetConfig+0x124>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d103      	bne.n	80039d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	615a      	str	r2, [r3, #20]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40010400 	.word	0x40010400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800
 8003a0c:	40001800 	.word	0x40001800
 8003a10:	40001c00 	.word	0x40001c00
 8003a14:	40002000 	.word	0x40002000

08003a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e040      	b.n	8003ae8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd ffe8 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fbe6 	bl	8004264 <UART_SetConfig>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e022      	b.n	8003ae8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fe3e 	bl	800472c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fec5 	bl	8004870 <UART_CheckIdleState>
 8003ae6:	4603      	mov	r3, r0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d171      	bne.n	8003bec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_UART_Transmit+0x24>
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e06a      	b.n	8003bee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2221      	movs	r2, #33	; 0x21
 8003b24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b26:	f7fe f865 	bl	8001bf4 <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b44:	d108      	bne.n	8003b58 <HAL_UART_Transmit+0x68>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e003      	b.n	8003b60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b60:	e02c      	b.n	8003bbc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 feb6 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e038      	b.n	8003bee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	3302      	adds	r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	e007      	b.n	8003baa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1cc      	bne.n	8003b62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fe83 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e005      	b.n	8003bee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b08a      	sub	sp, #40	; 0x28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d132      	bne.n	8003c74 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_Receive_IT+0x24>
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e02b      	b.n	8003c76 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d018      	beq.n	8003c64 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	69f9      	ldr	r1, [r7, #28]
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fefe 	bl	8004a6c <UART_Start_Receive_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3728      	adds	r7, #40	; 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0ba      	sub	sp, #232	; 0xe8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003caa:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cae:	4013      	ands	r3, r2
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d115      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00f      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8297 	beq.w	800420c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
      }
      return;
 8003ce6:	e291      	b.n	800420c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8117 	beq.w	8003f20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_UART_IRQHandler+0x298>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 810a 	beq.w	8003f20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d011      	beq.n	8003d3c <HAL_UART_IRQHandler+0xbc>
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
 8003d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d011      	beq.n	8003d9c <HAL_UART_IRQHandler+0x11c>
 8003d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d017      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dce:	f043 0208 	orr.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d012      	beq.n	8003e0a <HAL_UART_IRQHandler+0x18a>
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 81fd 	beq.w	8004210 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d04f      	beq.n	8003f02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fec8 	bl	8004bf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d141      	bne.n	8003efa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1d9      	bne.n	8003e76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <HAL_UART_IRQHandler+0x29c>)
 8003ed0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd ffea 	bl	8001eb0 <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d017      	beq.n	8003f12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e00f      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9a0 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00b      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f99c 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e007      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f998 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f10:	e17e      	b.n	8004210 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f12:	bf00      	nop
    return;
 8003f14:	e17c      	b.n	8004210 <HAL_UART_IRQHandler+0x590>
 8003f16:	bf00      	nop
 8003f18:	04000120 	.word	0x04000120
 8003f1c:	08004cc1 	.word	0x08004cc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 814c 	bne.w	80041c2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8145 	beq.w	80041c2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 813e 	beq.w	80041c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	f040 80b6 	bne.w	80040ca <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8150 	beq.w	8004214 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	f080 8148 	bcs.w	8004214 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f98:	f000 8086 	beq.w	80040a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1da      	bne.n	8003f9c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800400a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800401c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e1      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800404c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e3      	bne.n	8004022 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800408a:	65bb      	str	r3, [r7, #88]	; 0x58
 800408c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e4      	bne.n	8004068 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fe94 	bl	8001dd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8c2 	bl	800424c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040c8:	e0a4      	b.n	8004214 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8096 	beq.w	8004218 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80040ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8091 	beq.w	8004218 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800410a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
 800411a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800411e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e4      	bne.n	80040f6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	623b      	str	r3, [r7, #32]
   return(result);
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004150:	633a      	str	r2, [r7, #48]	; 0x30
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e3      	bne.n	800412c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	60fb      	str	r3, [r7, #12]
   return(result);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 0310 	bic.w	r3, r3, #16
 800418c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	617b      	str	r3, [r7, #20]
   return(result);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e4      	bne.n	8004178 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f846 	bl	800424c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041c0:	e02a      	b.n	8004218 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01c      	beq.n	800421c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
    }
    return;
 80041ea:	e017      	b.n	800421c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <HAL_UART_IRQHandler+0x59e>
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00c      	beq.n	800421e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fd71 	bl	8004cec <UART_EndTransmit_IT>
    return;
 800420a:	e008      	b.n	800421e <HAL_UART_IRQHandler+0x59e>
      return;
 800420c:	bf00      	nop
 800420e:	e006      	b.n	800421e <HAL_UART_IRQHandler+0x59e>
    return;
 8004210:	bf00      	nop
 8004212:	e004      	b.n	800421e <HAL_UART_IRQHandler+0x59e>
      return;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <HAL_UART_IRQHandler+0x59e>
      return;
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <HAL_UART_IRQHandler+0x59e>
    return;
 800421c:	bf00      	nop
  }

}
 800421e:	37e8      	adds	r7, #232	; 0xe8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4ba6      	ldr	r3, [pc, #664]	; (8004528 <UART_SetConfig+0x2c4>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	430b      	orrs	r3, r1
 800429a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a94      	ldr	r2, [pc, #592]	; (800452c <UART_SetConfig+0x2c8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d120      	bne.n	8004322 <UART_SetConfig+0xbe>
 80042e0:	4b93      	ldr	r3, [pc, #588]	; (8004530 <UART_SetConfig+0x2cc>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d816      	bhi.n	800431c <UART_SetConfig+0xb8>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <UART_SetConfig+0x90>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004305 	.word	0x08004305
 80042f8:	08004311 	.word	0x08004311
 80042fc:	0800430b 	.word	0x0800430b
 8004300:	08004317 	.word	0x08004317
 8004304:	2301      	movs	r3, #1
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e150      	b.n	80045ac <UART_SetConfig+0x348>
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e14d      	b.n	80045ac <UART_SetConfig+0x348>
 8004310:	2304      	movs	r3, #4
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e14a      	b.n	80045ac <UART_SetConfig+0x348>
 8004316:	2308      	movs	r3, #8
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e147      	b.n	80045ac <UART_SetConfig+0x348>
 800431c:	2310      	movs	r3, #16
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e144      	b.n	80045ac <UART_SetConfig+0x348>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a83      	ldr	r2, [pc, #524]	; (8004534 <UART_SetConfig+0x2d0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d132      	bne.n	8004392 <UART_SetConfig+0x12e>
 800432c:	4b80      	ldr	r3, [pc, #512]	; (8004530 <UART_SetConfig+0x2cc>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d828      	bhi.n	800438c <UART_SetConfig+0x128>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0xdc>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004375 	.word	0x08004375
 8004344:	0800438d 	.word	0x0800438d
 8004348:	0800438d 	.word	0x0800438d
 800434c:	0800438d 	.word	0x0800438d
 8004350:	08004381 	.word	0x08004381
 8004354:	0800438d 	.word	0x0800438d
 8004358:	0800438d 	.word	0x0800438d
 800435c:	0800438d 	.word	0x0800438d
 8004360:	0800437b 	.word	0x0800437b
 8004364:	0800438d 	.word	0x0800438d
 8004368:	0800438d 	.word	0x0800438d
 800436c:	0800438d 	.word	0x0800438d
 8004370:	08004387 	.word	0x08004387
 8004374:	2300      	movs	r3, #0
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e118      	b.n	80045ac <UART_SetConfig+0x348>
 800437a:	2302      	movs	r3, #2
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e115      	b.n	80045ac <UART_SetConfig+0x348>
 8004380:	2304      	movs	r3, #4
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e112      	b.n	80045ac <UART_SetConfig+0x348>
 8004386:	2308      	movs	r3, #8
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e10f      	b.n	80045ac <UART_SetConfig+0x348>
 800438c:	2310      	movs	r3, #16
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e10c      	b.n	80045ac <UART_SetConfig+0x348>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a68      	ldr	r2, [pc, #416]	; (8004538 <UART_SetConfig+0x2d4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d120      	bne.n	80043de <UART_SetConfig+0x17a>
 800439c:	4b64      	ldr	r3, [pc, #400]	; (8004530 <UART_SetConfig+0x2cc>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043a6:	2b30      	cmp	r3, #48	; 0x30
 80043a8:	d013      	beq.n	80043d2 <UART_SetConfig+0x16e>
 80043aa:	2b30      	cmp	r3, #48	; 0x30
 80043ac:	d814      	bhi.n	80043d8 <UART_SetConfig+0x174>
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d009      	beq.n	80043c6 <UART_SetConfig+0x162>
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d810      	bhi.n	80043d8 <UART_SetConfig+0x174>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <UART_SetConfig+0x15c>
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d006      	beq.n	80043cc <UART_SetConfig+0x168>
 80043be:	e00b      	b.n	80043d8 <UART_SetConfig+0x174>
 80043c0:	2300      	movs	r3, #0
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e0f2      	b.n	80045ac <UART_SetConfig+0x348>
 80043c6:	2302      	movs	r3, #2
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e0ef      	b.n	80045ac <UART_SetConfig+0x348>
 80043cc:	2304      	movs	r3, #4
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e0ec      	b.n	80045ac <UART_SetConfig+0x348>
 80043d2:	2308      	movs	r3, #8
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e0e9      	b.n	80045ac <UART_SetConfig+0x348>
 80043d8:	2310      	movs	r3, #16
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e0e6      	b.n	80045ac <UART_SetConfig+0x348>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a56      	ldr	r2, [pc, #344]	; (800453c <UART_SetConfig+0x2d8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d120      	bne.n	800442a <UART_SetConfig+0x1c6>
 80043e8:	4b51      	ldr	r3, [pc, #324]	; (8004530 <UART_SetConfig+0x2cc>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043f2:	2bc0      	cmp	r3, #192	; 0xc0
 80043f4:	d013      	beq.n	800441e <UART_SetConfig+0x1ba>
 80043f6:	2bc0      	cmp	r3, #192	; 0xc0
 80043f8:	d814      	bhi.n	8004424 <UART_SetConfig+0x1c0>
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d009      	beq.n	8004412 <UART_SetConfig+0x1ae>
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d810      	bhi.n	8004424 <UART_SetConfig+0x1c0>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <UART_SetConfig+0x1a8>
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d006      	beq.n	8004418 <UART_SetConfig+0x1b4>
 800440a:	e00b      	b.n	8004424 <UART_SetConfig+0x1c0>
 800440c:	2300      	movs	r3, #0
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e0cc      	b.n	80045ac <UART_SetConfig+0x348>
 8004412:	2302      	movs	r3, #2
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e0c9      	b.n	80045ac <UART_SetConfig+0x348>
 8004418:	2304      	movs	r3, #4
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e0c6      	b.n	80045ac <UART_SetConfig+0x348>
 800441e:	2308      	movs	r3, #8
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e0c3      	b.n	80045ac <UART_SetConfig+0x348>
 8004424:	2310      	movs	r3, #16
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e0c0      	b.n	80045ac <UART_SetConfig+0x348>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a44      	ldr	r2, [pc, #272]	; (8004540 <UART_SetConfig+0x2dc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d125      	bne.n	8004480 <UART_SetConfig+0x21c>
 8004434:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <UART_SetConfig+0x2cc>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004442:	d017      	beq.n	8004474 <UART_SetConfig+0x210>
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d817      	bhi.n	800447a <UART_SetConfig+0x216>
 800444a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444e:	d00b      	beq.n	8004468 <UART_SetConfig+0x204>
 8004450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004454:	d811      	bhi.n	800447a <UART_SetConfig+0x216>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <UART_SetConfig+0x1fe>
 800445a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445e:	d006      	beq.n	800446e <UART_SetConfig+0x20a>
 8004460:	e00b      	b.n	800447a <UART_SetConfig+0x216>
 8004462:	2300      	movs	r3, #0
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e0a1      	b.n	80045ac <UART_SetConfig+0x348>
 8004468:	2302      	movs	r3, #2
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e09e      	b.n	80045ac <UART_SetConfig+0x348>
 800446e:	2304      	movs	r3, #4
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e09b      	b.n	80045ac <UART_SetConfig+0x348>
 8004474:	2308      	movs	r3, #8
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e098      	b.n	80045ac <UART_SetConfig+0x348>
 800447a:	2310      	movs	r3, #16
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e095      	b.n	80045ac <UART_SetConfig+0x348>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2f      	ldr	r2, [pc, #188]	; (8004544 <UART_SetConfig+0x2e0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d125      	bne.n	80044d6 <UART_SetConfig+0x272>
 800448a:	4b29      	ldr	r3, [pc, #164]	; (8004530 <UART_SetConfig+0x2cc>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004498:	d017      	beq.n	80044ca <UART_SetConfig+0x266>
 800449a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800449e:	d817      	bhi.n	80044d0 <UART_SetConfig+0x26c>
 80044a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a4:	d00b      	beq.n	80044be <UART_SetConfig+0x25a>
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d811      	bhi.n	80044d0 <UART_SetConfig+0x26c>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <UART_SetConfig+0x254>
 80044b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b4:	d006      	beq.n	80044c4 <UART_SetConfig+0x260>
 80044b6:	e00b      	b.n	80044d0 <UART_SetConfig+0x26c>
 80044b8:	2301      	movs	r3, #1
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e076      	b.n	80045ac <UART_SetConfig+0x348>
 80044be:	2302      	movs	r3, #2
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e073      	b.n	80045ac <UART_SetConfig+0x348>
 80044c4:	2304      	movs	r3, #4
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e070      	b.n	80045ac <UART_SetConfig+0x348>
 80044ca:	2308      	movs	r3, #8
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e06d      	b.n	80045ac <UART_SetConfig+0x348>
 80044d0:	2310      	movs	r3, #16
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e06a      	b.n	80045ac <UART_SetConfig+0x348>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <UART_SetConfig+0x2e4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d138      	bne.n	8004552 <UART_SetConfig+0x2ee>
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <UART_SetConfig+0x2cc>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ee:	d017      	beq.n	8004520 <UART_SetConfig+0x2bc>
 80044f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044f4:	d82a      	bhi.n	800454c <UART_SetConfig+0x2e8>
 80044f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fa:	d00b      	beq.n	8004514 <UART_SetConfig+0x2b0>
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004500:	d824      	bhi.n	800454c <UART_SetConfig+0x2e8>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <UART_SetConfig+0x2aa>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d006      	beq.n	800451a <UART_SetConfig+0x2b6>
 800450c:	e01e      	b.n	800454c <UART_SetConfig+0x2e8>
 800450e:	2300      	movs	r3, #0
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e04b      	b.n	80045ac <UART_SetConfig+0x348>
 8004514:	2302      	movs	r3, #2
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e048      	b.n	80045ac <UART_SetConfig+0x348>
 800451a:	2304      	movs	r3, #4
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e045      	b.n	80045ac <UART_SetConfig+0x348>
 8004520:	2308      	movs	r3, #8
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e042      	b.n	80045ac <UART_SetConfig+0x348>
 8004526:	bf00      	nop
 8004528:	efff69f3 	.word	0xefff69f3
 800452c:	40011000 	.word	0x40011000
 8004530:	40023800 	.word	0x40023800
 8004534:	40004400 	.word	0x40004400
 8004538:	40004800 	.word	0x40004800
 800453c:	40004c00 	.word	0x40004c00
 8004540:	40005000 	.word	0x40005000
 8004544:	40011400 	.word	0x40011400
 8004548:	40007800 	.word	0x40007800
 800454c:	2310      	movs	r3, #16
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e02c      	b.n	80045ac <UART_SetConfig+0x348>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a72      	ldr	r2, [pc, #456]	; (8004720 <UART_SetConfig+0x4bc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d125      	bne.n	80045a8 <UART_SetConfig+0x344>
 800455c:	4b71      	ldr	r3, [pc, #452]	; (8004724 <UART_SetConfig+0x4c0>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004566:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800456a:	d017      	beq.n	800459c <UART_SetConfig+0x338>
 800456c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004570:	d817      	bhi.n	80045a2 <UART_SetConfig+0x33e>
 8004572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004576:	d00b      	beq.n	8004590 <UART_SetConfig+0x32c>
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	d811      	bhi.n	80045a2 <UART_SetConfig+0x33e>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <UART_SetConfig+0x326>
 8004582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004586:	d006      	beq.n	8004596 <UART_SetConfig+0x332>
 8004588:	e00b      	b.n	80045a2 <UART_SetConfig+0x33e>
 800458a:	2300      	movs	r3, #0
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e00d      	b.n	80045ac <UART_SetConfig+0x348>
 8004590:	2302      	movs	r3, #2
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e00a      	b.n	80045ac <UART_SetConfig+0x348>
 8004596:	2304      	movs	r3, #4
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e007      	b.n	80045ac <UART_SetConfig+0x348>
 800459c:	2308      	movs	r3, #8
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e004      	b.n	80045ac <UART_SetConfig+0x348>
 80045a2:	2310      	movs	r3, #16
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e001      	b.n	80045ac <UART_SetConfig+0x348>
 80045a8:	2310      	movs	r3, #16
 80045aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b4:	d15b      	bne.n	800466e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80045b6:	7ffb      	ldrb	r3, [r7, #31]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d828      	bhi.n	800460e <UART_SetConfig+0x3aa>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x360>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
 80045e4:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fe fb14 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80045ec:	61b8      	str	r0, [r7, #24]
        break;
 80045ee:	e013      	b.n	8004618 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe fb24 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 80045f4:	61b8      	str	r0, [r7, #24]
        break;
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <UART_SetConfig+0x4c4>)
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e00c      	b.n	8004618 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7fe fa37 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8004602:	61b8      	str	r0, [r7, #24]
        break;
 8004604:	e008      	b.n	8004618 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460a:	61bb      	str	r3, [r7, #24]
        break;
 800460c:	e004      	b.n	8004618 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	77bb      	strb	r3, [r7, #30]
        break;
 8004616:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d074      	beq.n	8004708 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	005a      	lsls	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d916      	bls.n	8004668 <UART_SetConfig+0x404>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d212      	bcs.n	8004668 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f023 030f 	bic.w	r3, r3, #15
 800464a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	b29b      	uxth	r3, r3
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	b29a      	uxth	r2, r3
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	4313      	orrs	r3, r2
 800465c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	89fa      	ldrh	r2, [r7, #14]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e04f      	b.n	8004708 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77bb      	strb	r3, [r7, #30]
 800466c:	e04c      	b.n	8004708 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d828      	bhi.n	80046c6 <UART_SetConfig+0x462>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0x418>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	080046c7 	.word	0x080046c7
 800468c:	080046b7 	.word	0x080046b7
 8004690:	080046c7 	.word	0x080046c7
 8004694:	080046c7 	.word	0x080046c7
 8004698:	080046c7 	.word	0x080046c7
 800469c:	080046bf 	.word	0x080046bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a0:	f7fe fab8 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80046a4:	61b8      	str	r0, [r7, #24]
        break;
 80046a6:	e013      	b.n	80046d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a8:	f7fe fac8 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 80046ac:	61b8      	str	r0, [r7, #24]
        break;
 80046ae:	e00f      	b.n	80046d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <UART_SetConfig+0x4c4>)
 80046b2:	61bb      	str	r3, [r7, #24]
        break;
 80046b4:	e00c      	b.n	80046d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b6:	f7fe f9db 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80046ba:	61b8      	str	r0, [r7, #24]
        break;
 80046bc:	e008      	b.n	80046d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c2:	61bb      	str	r3, [r7, #24]
        break;
 80046c4:	e004      	b.n	80046d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	77bb      	strb	r3, [r7, #30]
        break;
 80046ce:	bf00      	nop
    }

    if (pclk != 0U)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	085a      	lsrs	r2, r3, #1
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	441a      	add	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b0f      	cmp	r3, #15
 80046ee:	d909      	bls.n	8004704 <UART_SetConfig+0x4a0>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d205      	bcs.n	8004704 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	e001      	b.n	8004708 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004714:	7fbb      	ldrb	r3, [r7, #30]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40007c00 	.word	0x40007c00
 8004724:	40023800 	.word	0x40023800
 8004728:	00f42400 	.word	0x00f42400

0800472c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01a      	beq.n	8004842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482a:	d10a      	bne.n	8004842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
  }
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af02      	add	r7, sp, #8
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004880:	f7fd f9b8 	bl	8001bf4 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b08      	cmp	r3, #8
 8004892:	d10e      	bne.n	80048b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f81b 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e011      	b.n	80048d6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b09c      	sub	sp, #112	; 0x70
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ee:	e0a7      	b.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	f000 80a3 	beq.w	8004a40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fd f97b 	bl	8001bf4 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <UART_WaitOnFlagUntilTimeout+0x32>
 800490a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800490c:	2b00      	cmp	r3, #0
 800490e:	d13f      	bne.n	8004990 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800491e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004920:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004924:	667b      	str	r3, [r7, #100]	; 0x64
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004930:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004934:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800493c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e6      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	663b      	str	r3, [r7, #96]	; 0x60
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3308      	adds	r3, #8
 8004960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004962:	64ba      	str	r2, [r7, #72]	; 0x48
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e068      	b.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d050      	beq.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ac:	d148      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e6      	bne.n	80049b8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	613b      	str	r3, [r7, #16]
   return(result);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a0a:	623a      	str	r2, [r7, #32]
 8004a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	69f9      	ldr	r1, [r7, #28]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e5      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e010      	b.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69da      	ldr	r2, [r3, #28]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	f43f af48 	beq.w	80048f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3770      	adds	r7, #112	; 0x70
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b097      	sub	sp, #92	; 0x5c
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9e:	d10e      	bne.n	8004abe <UART_Start_Receive_IT+0x52>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <UART_Start_Receive_IT+0x48>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ab2:	e02d      	b.n	8004b10 <UART_Start_Receive_IT+0xa4>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004abc:	e028      	b.n	8004b10 <UART_Start_Receive_IT+0xa4>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10d      	bne.n	8004ae2 <UART_Start_Receive_IT+0x76>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d104      	bne.n	8004ad8 <UART_Start_Receive_IT+0x6c>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	22ff      	movs	r2, #255	; 0xff
 8004ad2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ad6:	e01b      	b.n	8004b10 <UART_Start_Receive_IT+0xa4>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	227f      	movs	r2, #127	; 0x7f
 8004adc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ae0:	e016      	b.n	8004b10 <UART_Start_Receive_IT+0xa4>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aea:	d10d      	bne.n	8004b08 <UART_Start_Receive_IT+0x9c>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <UART_Start_Receive_IT+0x92>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	227f      	movs	r2, #127	; 0x7f
 8004af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004afc:	e008      	b.n	8004b10 <UART_Start_Receive_IT+0xa4>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	223f      	movs	r2, #63	; 0x3f
 8004b02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b06:	e003      	b.n	8004b10 <UART_Start_Receive_IT+0xa4>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2222      	movs	r2, #34	; 0x22
 8004b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	657b      	str	r3, [r7, #84]	; 0x54
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b40:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d107      	bne.n	8004b6e <UART_Start_Receive_IT+0x102>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <UART_Start_Receive_IT+0x184>)
 8004b6a:	669a      	str	r2, [r3, #104]	; 0x68
 8004b6c:	e002      	b.n	8004b74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <UART_Start_Receive_IT+0x188>)
 8004b72:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d019      	beq.n	8004bb0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e6      	bne.n	8004b7c <UART_Start_Receive_IT+0x110>
 8004bae:	e018      	b.n	8004be2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f043 0320 	orr.w	r3, r3, #32
 8004bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bce:	623b      	str	r3, [r7, #32]
 8004bd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	69f9      	ldr	r1, [r7, #28]
 8004bd4:	6a3a      	ldr	r2, [r7, #32]
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e6      	bne.n	8004bb0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	375c      	adds	r7, #92	; 0x5c
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	08004ea7 	.word	0x08004ea7
 8004bf4:	08004d41 	.word	0x08004d41

08004bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b095      	sub	sp, #84	; 0x54
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e6      	bne.n	8004c00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d118      	bne.n	8004ca0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
 8004c82:	647b      	str	r3, [r7, #68]	; 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6979      	ldr	r1, [r7, #20]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cb4:	bf00      	nop
 8004cb6:	3754      	adds	r7, #84	; 0x54
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff faaa 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6979      	ldr	r1, [r7, #20]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e6      	bne.n	8004cf4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fa76 	bl	8004224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d38:	bf00      	nop
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b096      	sub	sp, #88	; 0x58
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d4e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d58:	2b22      	cmp	r3, #34	; 0x22
 8004d5a:	f040 8098 	bne.w	8004e8e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d6c:	b2d9      	uxtb	r1, r3
 8004d6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	400a      	ands	r2, r1
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d17b      	bne.n	8004e9e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dba:	653b      	str	r3, [r7, #80]	; 0x50
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e6      	bne.n	8004da6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	623b      	str	r3, [r7, #32]
   return(result);
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004df8:	633a      	str	r2, [r7, #48]	; 0x30
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d12e      	bne.n	8004e86 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e6      	bne.n	8004e2e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d103      	bne.n	8004e76 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2210      	movs	r2, #16
 8004e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff f9e4 	bl	800424c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e84:	e00b      	b.n	8004e9e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc f996 	bl	80011b8 <HAL_UART_RxCpltCallback>
}
 8004e8c:	e007      	b.n	8004e9e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0208 	orr.w	r2, r2, #8
 8004e9c:	619a      	str	r2, [r3, #24]
}
 8004e9e:	bf00      	nop
 8004ea0:	3758      	adds	r7, #88	; 0x58
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b096      	sub	sp, #88	; 0x58
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004eb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ebe:	2b22      	cmp	r3, #34	; 0x22
 8004ec0:	f040 8098 	bne.w	8004ff4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ed4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ed8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004edc:	4013      	ands	r3, r2
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	1c9a      	adds	r2, r3, #2
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d17b      	bne.n	8005004 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3308      	adds	r3, #8
 8004f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d12e      	bne.n	8004fec <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f023 0310 	bic.w	r3, r3, #16
 8004fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d103      	bne.n	8004fdc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff f931 	bl	800424c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fea:	e00b      	b.n	8005004 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fc f8e3 	bl	80011b8 <HAL_UART_RxCpltCallback>
}
 8004ff2:	e007      	b.n	8005004 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	619a      	str	r2, [r3, #24]
}
 8005004:	bf00      	nop
 8005006:	3758      	adds	r7, #88	; 0x58
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800501a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800501e:	2b84      	cmp	r3, #132	; 0x84
 8005020:	d005      	beq.n	800502e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005022:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	3303      	adds	r3, #3
 800502c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800502e:	68fb      	ldr	r3, [r7, #12]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005040:	f001 f83a 	bl	80060b8 <vTaskStartScheduler>
  
  return osOK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	bd80      	pop	{r7, pc}

0800504a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800504a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504c:	b089      	sub	sp, #36	; 0x24
 800504e:	af04      	add	r7, sp, #16
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <osThreadCreate+0x54>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01c      	beq.n	800509e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685c      	ldr	r4, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681d      	ldr	r5, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691e      	ldr	r6, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff ffc8 	bl	800500c <makeFreeRtosPriority>
 800507c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005086:	9202      	str	r2, [sp, #8]
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	9100      	str	r1, [sp, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4632      	mov	r2, r6
 8005090:	4629      	mov	r1, r5
 8005092:	4620      	mov	r0, r4
 8005094:	f000 fd04 	bl	8005aa0 <xTaskCreateStatic>
 8005098:	4603      	mov	r3, r0
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e01c      	b.n	80050d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685c      	ldr	r4, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050aa:	b29e      	uxth	r6, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff ffaa 	bl	800500c <makeFreeRtosPriority>
 80050b8:	4602      	mov	r2, r0
 80050ba:	f107 030c 	add.w	r3, r7, #12
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	9200      	str	r2, [sp, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	4632      	mov	r2, r6
 80050c6:	4629      	mov	r1, r5
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 fd4c 	bl	8005b66 <xTaskCreate>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d001      	beq.n	80050d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050d8:	68fb      	ldr	r3, [r7, #12]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <osDelay+0x16>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	e000      	b.n	80050fa <osDelay+0x18>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fe7e 	bl	8005dfc <vTaskDelay>
  
  return osOK;
 8005100:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f103 0208 	add.w	r2, r3, #8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f04f 32ff 	mov.w	r2, #4294967295
 8005122:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f103 0208 	add.w	r2, r3, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f103 0208 	add.w	r2, r3, #8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	601a      	str	r2, [r3, #0]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d103      	bne.n	80051cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e00c      	b.n	80051e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3308      	adds	r3, #8
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e002      	b.n	80051da <vListInsert+0x2e>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d2f6      	bcs.n	80051d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6892      	ldr	r2, [r2, #8]
 8005234:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6852      	ldr	r2, [r2, #4]
 800523e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d103      	bne.n	8005252 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	1e5a      	subs	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <xQueueGenericReset+0x2e>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	b672      	cpsid	i
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	b662      	cpsie	i
 800529c:	60bb      	str	r3, [r7, #8]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80052a2:	f001 ff8b 	bl	80071bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	441a      	add	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	3b01      	subs	r3, #1
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	441a      	add	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	22ff      	movs	r2, #255	; 0xff
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d114      	bne.n	8005322 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01a      	beq.n	8005336 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3310      	adds	r3, #16
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f969 	bl	80065dc <xTaskRemoveFromEventList>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d012      	beq.n	8005336 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <xQueueGenericReset+0xd0>)
 8005312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	e009      	b.n	8005336 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3310      	adds	r3, #16
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff feef 	bl	800510a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3324      	adds	r3, #36	; 0x24
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff feea 	bl	800510a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005336:	f001 ff75 	bl	8007224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800533a:	2301      	movs	r3, #1
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10c      	bne.n	8005376 <xQueueGenericCreate+0x2e>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	b672      	cpsid	i
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	b662      	cpsie	i
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	e004      	b.n	800538c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	3350      	adds	r3, #80	; 0x50
 8005390:	4618      	mov	r0, r3
 8005392:	f002 f83f 	bl	8007414 <pvPortMalloc>
 8005396:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d011      	beq.n	80053c2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3350      	adds	r3, #80	; 0x50
 80053a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053b0:	79fa      	ldrb	r2, [r7, #7]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	4613      	mov	r3, r2
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f805 	bl	80053cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053c2:	69bb      	ldr	r3, [r7, #24]
	}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e002      	b.n	80053ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053fa:	2101      	movs	r1, #1
 80053fc:	69b8      	ldr	r0, [r7, #24]
 80053fe:	f7ff ff39 	bl	8005274 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08e      	sub	sp, #56	; 0x38
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005422:	2300      	movs	r3, #0
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10c      	bne.n	800544a <xQueueGenericSend+0x36>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	b672      	cpsid	i
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	b662      	cpsie	i
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <xQueueGenericSend+0x44>
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <xQueueGenericSend+0x48>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <xQueueGenericSend+0x4a>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10c      	bne.n	800547c <xQueueGenericSend+0x68>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	b672      	cpsid	i
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	b662      	cpsie	i
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d103      	bne.n	800548a <xQueueGenericSend+0x76>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <xQueueGenericSend+0x7a>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <xQueueGenericSend+0x7c>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10c      	bne.n	80054ae <xQueueGenericSend+0x9a>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	b672      	cpsid	i
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	b662      	cpsie	i
 80054a8:	623b      	str	r3, [r7, #32]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ae:	f001 fa59 	bl	8006964 <xTaskGetSchedulerState>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <xQueueGenericSend+0xaa>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <xQueueGenericSend+0xae>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <xQueueGenericSend+0xb0>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10c      	bne.n	80054e2 <xQueueGenericSend+0xce>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	b672      	cpsid	i
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	b662      	cpsie	i
 80054dc:	61fb      	str	r3, [r7, #28]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054e2:	f001 fe6b 	bl	80071bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d302      	bcc.n	80054f8 <xQueueGenericSend+0xe4>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d129      	bne.n	800554c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054fe:	f000 f9bb 	bl	8005878 <prvCopyDataToQueue>
 8005502:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d010      	beq.n	800552e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	3324      	adds	r3, #36	; 0x24
 8005510:	4618      	mov	r0, r3
 8005512:	f001 f863 	bl	80065dc <xTaskRemoveFromEventList>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d013      	beq.n	8005544 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800551c:	4b3f      	ldr	r3, [pc, #252]	; (800561c <xQueueGenericSend+0x208>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	e00a      	b.n	8005544 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005534:	4b39      	ldr	r3, [pc, #228]	; (800561c <xQueueGenericSend+0x208>)
 8005536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005544:	f001 fe6e 	bl	8007224 <vPortExitCritical>
				return pdPASS;
 8005548:	2301      	movs	r3, #1
 800554a:	e063      	b.n	8005614 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005552:	f001 fe67 	bl	8007224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005556:	2300      	movs	r3, #0
 8005558:	e05c      	b.n	8005614 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	4618      	mov	r0, r3
 8005566:	f001 f89d 	bl	80066a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800556a:	2301      	movs	r3, #1
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800556e:	f001 fe59 	bl	8007224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005572:	f000 fe07 	bl	8006184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005576:	f001 fe21 	bl	80071bc <vPortEnterCritical>
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005580:	b25b      	sxtb	r3, r3
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d103      	bne.n	8005590 <xQueueGenericSend+0x17c>
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005596:	b25b      	sxtb	r3, r3
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d103      	bne.n	80055a6 <xQueueGenericSend+0x192>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a6:	f001 fe3d 	bl	8007224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055aa:	1d3a      	adds	r2, r7, #4
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f88c 	bl	80066d0 <xTaskCheckForTimeOut>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d124      	bne.n	8005608 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c0:	f000 fa2c 	bl	8005a1c <prvIsQueueFull>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	3310      	adds	r3, #16
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 ffdc 	bl	8006590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055da:	f000 f9b7 	bl	800594c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055de:	f000 fddf 	bl	80061a0 <xTaskResumeAll>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f47f af7c 	bne.w	80054e2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <xQueueGenericSend+0x208>)
 80055ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	e772      	b.n	80054e2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f000 f9a5 	bl	800594c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005602:	f000 fdcd 	bl	80061a0 <xTaskResumeAll>
 8005606:	e76c      	b.n	80054e2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800560a:	f000 f99f 	bl	800594c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800560e:	f000 fdc7 	bl	80061a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005612:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005614:	4618      	mov	r0, r3
 8005616:	3738      	adds	r7, #56	; 0x38
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08e      	sub	sp, #56	; 0x38
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005632:	2300      	movs	r3, #0
 8005634:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	623b      	str	r3, [r7, #32]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	b672      	cpsid	i
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	b662      	cpsie	i
 8005672:	61fb      	str	r3, [r7, #28]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005678:	f001 f974 	bl	8006964 <xTaskGetSchedulerState>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <xQueueSemaphoreTake+0x68>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <xQueueSemaphoreTake+0x6c>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <xQueueSemaphoreTake+0x6e>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10c      	bne.n	80056ac <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	b672      	cpsid	i
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	b662      	cpsie	i
 80056a6:	61bb      	str	r3, [r7, #24]
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ac:	f001 fd86 	bl	80071bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d024      	beq.n	8005706 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	1e5a      	subs	r2, r3, #1
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80056cc:	f001 fb10 	bl	8006cf0 <pvTaskIncrementMutexHeldCount>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00f      	beq.n	80056fe <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	3310      	adds	r3, #16
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 ff7a 	bl	80065dc <xTaskRemoveFromEventList>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056ee:	4b55      	ldr	r3, [pc, #340]	; (8005844 <xQueueSemaphoreTake+0x224>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056fe:	f001 fd91 	bl	8007224 <vPortExitCritical>
				return pdPASS;
 8005702:	2301      	movs	r3, #1
 8005704:	e099      	b.n	800583a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d113      	bne.n	8005734 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	b672      	cpsid	i
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	b662      	cpsie	i
 8005726:	617b      	str	r3, [r7, #20]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800572c:	f001 fd7a 	bl	8007224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005730:	2300      	movs	r3, #0
 8005732:	e082      	b.n	800583a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800573a:	f107 030c 	add.w	r3, r7, #12
 800573e:	4618      	mov	r0, r3
 8005740:	f000 ffb0 	bl	80066a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005748:	f001 fd6c 	bl	8007224 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800574c:	f000 fd1a 	bl	8006184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005750:	f001 fd34 	bl	80071bc <vPortEnterCritical>
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800575a:	b25b      	sxtb	r3, r3
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d103      	bne.n	800576a <xQueueSemaphoreTake+0x14a>
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005770:	b25b      	sxtb	r3, r3
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d103      	bne.n	8005780 <xQueueSemaphoreTake+0x160>
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005780:	f001 fd50 	bl	8007224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005784:	463a      	mov	r2, r7
 8005786:	f107 030c 	add.w	r3, r7, #12
 800578a:	4611      	mov	r1, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f000 ff9f 	bl	80066d0 <xTaskCheckForTimeOut>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d132      	bne.n	80057fe <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800579a:	f000 f929 	bl	80059f0 <prvIsQueueEmpty>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d026      	beq.n	80057f2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80057ac:	f001 fd06 	bl	80071bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 f8f3 	bl	80069a0 <xTaskPriorityInherit>
 80057ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057bc:	f001 fd32 	bl	8007224 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	3324      	adds	r3, #36	; 0x24
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fee1 	bl	8006590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057d0:	f000 f8bc 	bl	800594c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057d4:	f000 fce4 	bl	80061a0 <xTaskResumeAll>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f47f af66 	bne.w	80056ac <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80057e0:	4b18      	ldr	r3, [pc, #96]	; (8005844 <xQueueSemaphoreTake+0x224>)
 80057e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	e75c      	b.n	80056ac <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80057f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f4:	f000 f8aa 	bl	800594c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f8:	f000 fcd2 	bl	80061a0 <xTaskResumeAll>
 80057fc:	e756      	b.n	80056ac <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80057fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005800:	f000 f8a4 	bl	800594c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005804:	f000 fccc 	bl	80061a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800580a:	f000 f8f1 	bl	80059f0 <prvIsQueueEmpty>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	f43f af4b 	beq.w	80056ac <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800581c:	f001 fcce 	bl	80071bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005822:	f000 f811 	bl	8005848 <prvGetDisinheritPriorityAfterTimeout>
 8005826:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800582e:	4618      	mov	r0, r3
 8005830:	f001 f9c0 	bl	8006bb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005834:	f001 fcf6 	bl	8007224 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800583a:	4618      	mov	r0, r3
 800583c:	3738      	adds	r7, #56	; 0x38
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d006      	beq.n	8005866 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1c3 0307 	rsb	r3, r3, #7
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e001      	b.n	800586a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800586a:	68fb      	ldr	r3, [r7, #12]
	}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10d      	bne.n	80058b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d14d      	bne.n	800593a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f8fc 	bl	8006aa0 <xTaskPriorityDisinherit>
 80058a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	609a      	str	r2, [r3, #8]
 80058b0:	e043      	b.n	800593a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d119      	bne.n	80058ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6858      	ldr	r0, [r3, #4]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	461a      	mov	r2, r3
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	f002 f958 	bl	8007b78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	441a      	add	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d32b      	bcc.n	800593a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	e026      	b.n	800593a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68d8      	ldr	r0, [r3, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	461a      	mov	r2, r3
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	f002 f93e 	bl	8007b78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	425b      	negs	r3, r3
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d207      	bcs.n	8005928 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	425b      	negs	r3, r3
 8005922:	441a      	add	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d105      	bne.n	800593a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	3b01      	subs	r3, #1
 8005938:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005942:	697b      	ldr	r3, [r7, #20]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005954:	f001 fc32 	bl	80071bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005960:	e011      	b.n	8005986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3324      	adds	r3, #36	; 0x24
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fe34 	bl	80065dc <xTaskRemoveFromEventList>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800597a:	f000 ff0f 	bl	800679c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	3b01      	subs	r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dce9      	bgt.n	8005962 <prvUnlockQueue+0x16>
 800598e:	e000      	b.n	8005992 <prvUnlockQueue+0x46>
					break;
 8005990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800599a:	f001 fc43 	bl	8007224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800599e:	f001 fc0d 	bl	80071bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059aa:	e011      	b.n	80059d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d012      	beq.n	80059da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3310      	adds	r3, #16
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fe0f 	bl	80065dc <xTaskRemoveFromEventList>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059c4:	f000 feea 	bl	800679c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dce9      	bgt.n	80059ac <prvUnlockQueue+0x60>
 80059d8:	e000      	b.n	80059dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	22ff      	movs	r2, #255	; 0xff
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059e4:	f001 fc1e 	bl	8007224 <vPortExitCritical>
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059f8:	f001 fbe0 	bl	80071bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e001      	b.n	8005a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a0e:	f001 fc09 	bl	8007224 <vPortExitCritical>

	return xReturn;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a24:	f001 fbca 	bl	80071bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d102      	bne.n	8005a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e001      	b.n	8005a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a3e:	f001 fbf1 	bl	8007224 <vPortExitCritical>

	return xReturn;
 8005a42:	68fb      	ldr	r3, [r7, #12]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e014      	b.n	8005a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a5c:	4a0f      	ldr	r2, [pc, #60]	; (8005a9c <vQueueAddToRegistry+0x50>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a68:	490c      	ldr	r1, [pc, #48]	; (8005a9c <vQueueAddToRegistry+0x50>)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <vQueueAddToRegistry+0x50>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a7e:	e006      	b.n	8005a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b07      	cmp	r3, #7
 8005a8a:	d9e7      	bls.n	8005a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	200005b8 	.word	0x200005b8

08005aa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	; 0x38
 8005aa4:	af04      	add	r7, sp, #16
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <xTaskCreateStatic+0x2e>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	b672      	cpsid	i
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	b662      	cpsie	i
 8005ac8:	623b      	str	r3, [r7, #32]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10c      	bne.n	8005aee <xTaskCreateStatic+0x4e>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	b672      	cpsid	i
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	b662      	cpsie	i
 8005ae8:	61fb      	str	r3, [r7, #28]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aee:	2364      	movs	r3, #100	; 0x64
 8005af0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b64      	cmp	r3, #100	; 0x64
 8005af6:	d00c      	beq.n	8005b12 <xTaskCreateStatic+0x72>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	b672      	cpsid	i
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	b662      	cpsie	i
 8005b0c:	61bb      	str	r3, [r7, #24]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01e      	beq.n	8005b58 <xTaskCreateStatic+0xb8>
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01b      	beq.n	8005b58 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b32:	2300      	movs	r3, #0
 8005b34:	9303      	str	r3, [sp, #12]
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	9302      	str	r3, [sp, #8]
 8005b3a:	f107 0314 	add.w	r3, r7, #20
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f850 	bl	8005bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b52:	f000 f8e5 	bl	8005d20 <prvAddNewTaskToReadyList>
 8005b56:	e001      	b.n	8005b5c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b5c:	697b      	ldr	r3, [r7, #20]
	}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b08c      	sub	sp, #48	; 0x30
 8005b6a:	af04      	add	r7, sp, #16
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fc4a 	bl	8007414 <pvPortMalloc>
 8005b80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b88:	2064      	movs	r0, #100	; 0x64
 8005b8a:	f001 fc43 	bl	8007414 <pvPortMalloc>
 8005b8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b9c:	e005      	b.n	8005baa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b9e:	6978      	ldr	r0, [r7, #20]
 8005ba0:	f001 fd02 	bl	80075a8 <vPortFree>
 8005ba4:	e001      	b.n	8005baa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d017      	beq.n	8005be0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bb8:	88fa      	ldrh	r2, [r7, #6]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9303      	str	r3, [sp, #12]
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	9302      	str	r3, [sp, #8]
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f80e 	bl	8005bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd4:	69f8      	ldr	r0, [r7, #28]
 8005bd6:	f000 f8a3 	bl	8005d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e002      	b.n	8005be6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295
 8005be4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005be6:	69bb      	ldr	r3, [r7, #24]
	}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	461a      	mov	r2, r3
 8005c08:	21a5      	movs	r1, #165	; 0xa5
 8005c0a:	f001 ffc3 	bl	8007b94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005c18:	440b      	add	r3, r1
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f023 0307 	bic.w	r3, r3, #7
 8005c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	b672      	cpsid	i
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	b662      	cpsie	i
 8005c46:	617b      	str	r3, [r7, #20]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01f      	beq.n	8005c98 <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	e012      	b.n	8005c84 <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	7819      	ldrb	r1, [r3, #0]
 8005c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3334      	adds	r3, #52	; 0x34
 8005c6e:	460a      	mov	r2, r1
 8005c70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d006      	beq.n	8005c8c <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	d9e9      	bls.n	8005c5e <prvInitialiseNewTask+0x6e>
 8005c8a:	e000      	b.n	8005c8e <prvInitialiseNewTask+0x9e>
			{
				break;
 8005c8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c96:	e003      	b.n	8005ca0 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d901      	bls.n	8005caa <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ca6:	2306      	movs	r3, #6
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2200      	movs	r2, #0
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fa42 	bl	800514a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	3318      	adds	r3, #24
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fa3d 	bl	800514a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	f1c3 0207 	rsb	r2, r3, #7
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	2200      	movs	r2, #0
 8005cea:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	2200      	movs	r2, #0
 8005cf0:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	69b8      	ldr	r0, [r7, #24]
 8005d00:	f001 f950 	bl	8006fa4 <pxPortInitialiseStack>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d16:	bf00      	nop
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d28:	f001 fa48 	bl	80071bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d2c:	4b2c      	ldr	r3, [pc, #176]	; (8005de0 <prvAddNewTaskToReadyList+0xc0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a2b      	ldr	r2, [pc, #172]	; (8005de0 <prvAddNewTaskToReadyList+0xc0>)
 8005d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <prvAddNewTaskToReadyList+0xc4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d3e:	4a29      	ldr	r2, [pc, #164]	; (8005de4 <prvAddNewTaskToReadyList+0xc4>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d44:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <prvAddNewTaskToReadyList+0xc0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d110      	bne.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d4c:	f000 fd4a 	bl	80067e4 <prvInitialiseTaskLists>
 8005d50:	e00d      	b.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d52:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <prvAddNewTaskToReadyList+0xc8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d5a:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <prvAddNewTaskToReadyList+0xc4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d802      	bhi.n	8005d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d68:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <prvAddNewTaskToReadyList+0xc4>)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d6e:	4b1f      	ldr	r3, [pc, #124]	; (8005dec <prvAddNewTaskToReadyList+0xcc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <prvAddNewTaskToReadyList+0xcc>)
 8005d76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <prvAddNewTaskToReadyList+0xcc>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	2201      	movs	r2, #1
 8005d86:	409a      	lsls	r2, r3
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <prvAddNewTaskToReadyList+0xd0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <prvAddNewTaskToReadyList+0xd0>)
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <prvAddNewTaskToReadyList+0xd4>)
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f7ff f9db 	bl	8005164 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dae:	f001 fa39 	bl	8007224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005db2:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <prvAddNewTaskToReadyList+0xc8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00e      	beq.n	8005dd8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <prvAddNewTaskToReadyList+0xc4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d207      	bcs.n	8005dd8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <prvAddNewTaskToReadyList+0xd8>)
 8005dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	200006f8 	.word	0x200006f8
 8005de4:	200005f8 	.word	0x200005f8
 8005de8:	20000704 	.word	0x20000704
 8005dec:	20000714 	.word	0x20000714
 8005df0:	20000700 	.word	0x20000700
 8005df4:	200005fc 	.word	0x200005fc
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d019      	beq.n	8005e42 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <vTaskDelay+0x64>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <vTaskDelay+0x34>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	b672      	cpsid	i
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	b662      	cpsie	i
 8005e2a:	60bb      	str	r3, [r7, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005e30:	f000 f9a8 	bl	8006184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e34:	2100      	movs	r1, #0
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 f84e 	bl	8006ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e3c:	f000 f9b0 	bl	80061a0 <xTaskResumeAll>
 8005e40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <vTaskDelay+0x68>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000720 	.word	0x20000720
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005e70:	f001 f9a4 	bl	80071bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <vTaskSuspend+0x18>
 8005e7a:	4b3d      	ldr	r3, [pc, #244]	; (8005f70 <vTaskSuspend+0x108>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	e000      	b.n	8005e82 <vTaskSuspend+0x1a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff f9c8 	bl	800521e <uxListRemove>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d115      	bne.n	8005ec0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4936      	ldr	r1, [pc, #216]	; (8005f74 <vTaskSuspend+0x10c>)
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <vTaskSuspend+0x58>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	2201      	movs	r2, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	43da      	mvns	r2, r3
 8005eb6:	4b30      	ldr	r3, [pc, #192]	; (8005f78 <vTaskSuspend+0x110>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	4a2e      	ldr	r2, [pc, #184]	; (8005f78 <vTaskSuspend+0x110>)
 8005ebe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3318      	adds	r3, #24
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff f9a6 	bl	800521e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4828      	ldr	r0, [pc, #160]	; (8005f7c <vTaskSuspend+0x114>)
 8005eda:	f7ff f943 	bl	8005164 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d103      	bne.n	8005ef2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005ef2:	f001 f997 	bl	8007224 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005ef6:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <vTaskSuspend+0x118>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005efe:	f001 f95d 	bl	80071bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005f02:	f000 fd0f 	bl	8006924 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005f06:	f001 f98d 	bl	8007224 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005f0a:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <vTaskSuspend+0x108>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d129      	bne.n	8005f68 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8005f14:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <vTaskSuspend+0x118>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d019      	beq.n	8005f50 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <vTaskSuspend+0x11c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00c      	beq.n	8005f3e <vTaskSuspend+0xd6>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	b672      	cpsid	i
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	b662      	cpsie	i
 8005f38:	60bb      	str	r3, [r7, #8]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <vTaskSuspend+0x120>)
 8005f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f4e:	e00b      	b.n	8005f68 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <vTaskSuspend+0x114>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <vTaskSuspend+0x124>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d103      	bne.n	8005f64 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <vTaskSuspend+0x108>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
	}
 8005f62:	e001      	b.n	8005f68 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8005f64:	f000 fa74 	bl	8006450 <vTaskSwitchContext>
	}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	200005f8 	.word	0x200005f8
 8005f74:	200005fc 	.word	0x200005fc
 8005f78:	20000700 	.word	0x20000700
 8005f7c:	200006e4 	.word	0x200006e4
 8005f80:	20000704 	.word	0x20000704
 8005f84:	20000720 	.word	0x20000720
 8005f88:	e000ed04 	.word	0xe000ed04
 8005f8c:	200006f8 	.word	0x200006f8

08005f90 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10c      	bne.n	8005fc0 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	b672      	cpsid	i
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	b662      	cpsie	i
 8005fba:	60fb      	str	r3, [r7, #12]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <prvTaskIsTaskSuspended+0x60>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d10a      	bne.n	8005fe0 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <prvTaskIsTaskSuspended+0x64>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d005      	beq.n	8005fe0 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fe0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	200006e4 	.word	0x200006e4
 8005ff4:	200006b8 	.word	0x200006b8

08005ff8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10c      	bne.n	8006024 <vTaskResume+0x2c>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	b672      	cpsid	i
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	b662      	cpsie	i
 800601e:	60bb      	str	r3, [r7, #8]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006024:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <vTaskResume+0xb0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	429a      	cmp	r2, r3
 800602c:	d037      	beq.n	800609e <vTaskResume+0xa6>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d034      	beq.n	800609e <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8006034:	f001 f8c2 	bl	80071bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff ffa9 	bl	8005f90 <prvTaskIsTaskSuspended>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d02a      	beq.n	800609a <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3304      	adds	r3, #4
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff f8e8 	bl	800521e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	2201      	movs	r2, #1
 8006054:	409a      	lsls	r2, r3
 8006056:	4b15      	ldr	r3, [pc, #84]	; (80060ac <vTaskResume+0xb4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <vTaskResume+0xb4>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <vTaskResume+0xb8>)
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7ff f874 	bl	8005164 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <vTaskResume+0xb0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	429a      	cmp	r2, r3
 8006088:	d307      	bcc.n	800609a <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800608a:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <vTaskResume+0xbc>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800609a:	f001 f8c3 	bl	8007224 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	200005f8 	.word	0x200005f8
 80060ac:	20000700 	.word	0x20000700
 80060b0:	200005fc 	.word	0x200005fc
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060c6:	463a      	mov	r2, r7
 80060c8:	1d39      	adds	r1, r7, #4
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fa ffbe 	bl	8001050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	9202      	str	r2, [sp, #8]
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	2300      	movs	r3, #0
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	2300      	movs	r3, #0
 80060e4:	460a      	mov	r2, r1
 80060e6:	4921      	ldr	r1, [pc, #132]	; (800616c <vTaskStartScheduler+0xb4>)
 80060e8:	4821      	ldr	r0, [pc, #132]	; (8006170 <vTaskStartScheduler+0xb8>)
 80060ea:	f7ff fcd9 	bl	8005aa0 <xTaskCreateStatic>
 80060ee:	4603      	mov	r3, r0
 80060f0:	4a20      	ldr	r2, [pc, #128]	; (8006174 <vTaskStartScheduler+0xbc>)
 80060f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060f4:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <vTaskStartScheduler+0xbc>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060fc:	2301      	movs	r3, #1
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e001      	b.n	8006106 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d11a      	bne.n	8006142 <vTaskStartScheduler+0x8a>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	b672      	cpsid	i
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	b662      	cpsie	i
 8006120:	613b      	str	r3, [r7, #16]
}
 8006122:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <vTaskStartScheduler+0xc0>)
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800612c:	4b13      	ldr	r3, [pc, #76]	; (800617c <vTaskStartScheduler+0xc4>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <vTaskStartScheduler+0xc8>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006138:	f7fb f90e 	bl	8001358 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800613c:	f000 ffc0 	bl	80070c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006140:	e010      	b.n	8006164 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d10c      	bne.n	8006164 <vTaskStartScheduler+0xac>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	b672      	cpsid	i
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	b662      	cpsie	i
 800615e:	60fb      	str	r3, [r7, #12]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <vTaskStartScheduler+0xaa>
}
 8006164:	bf00      	nop
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	0800c7e4 	.word	0x0800c7e4
 8006170:	080067b5 	.word	0x080067b5
 8006174:	2000071c 	.word	0x2000071c
 8006178:	20000718 	.word	0x20000718
 800617c:	20000704 	.word	0x20000704
 8006180:	200006fc 	.word	0x200006fc

08006184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <vTaskSuspendAll+0x18>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	4a03      	ldr	r2, [pc, #12]	; (800619c <vTaskSuspendAll+0x18>)
 8006190:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000720 	.word	0x20000720

080061a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061ae:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <xTaskResumeAll+0x118>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10c      	bne.n	80061d0 <xTaskResumeAll+0x30>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	b672      	cpsid	i
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	b662      	cpsie	i
 80061ca:	603b      	str	r3, [r7, #0]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061d0:	f000 fff4 	bl	80071bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061d4:	4b38      	ldr	r3, [pc, #224]	; (80062b8 <xTaskResumeAll+0x118>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3b01      	subs	r3, #1
 80061da:	4a37      	ldr	r2, [pc, #220]	; (80062b8 <xTaskResumeAll+0x118>)
 80061dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061de:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <xTaskResumeAll+0x118>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d161      	bne.n	80062aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061e6:	4b35      	ldr	r3, [pc, #212]	; (80062bc <xTaskResumeAll+0x11c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d05d      	beq.n	80062aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ee:	e02e      	b.n	800624e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f0:	4b33      	ldr	r3, [pc, #204]	; (80062c0 <xTaskResumeAll+0x120>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3318      	adds	r3, #24
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff f80e 	bl	800521e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff f809 	bl	800521e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	2201      	movs	r2, #1
 8006212:	409a      	lsls	r2, r3
 8006214:	4b2b      	ldr	r3, [pc, #172]	; (80062c4 <xTaskResumeAll+0x124>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4313      	orrs	r3, r2
 800621a:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <xTaskResumeAll+0x124>)
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <xTaskResumeAll+0x128>)
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fe ff95 	bl	8005164 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	4b23      	ldr	r3, [pc, #140]	; (80062cc <xTaskResumeAll+0x12c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	429a      	cmp	r2, r3
 8006246:	d302      	bcc.n	800624e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006248:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <xTaskResumeAll+0x130>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800624e:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <xTaskResumeAll+0x120>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1cc      	bne.n	80061f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800625c:	f000 fb62 	bl	8006924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006260:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <xTaskResumeAll+0x134>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800626c:	f000 f836 	bl	80062dc <xTaskIncrementTick>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006276:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <xTaskResumeAll+0x130>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3b01      	subs	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f1      	bne.n	800626c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006288:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <xTaskResumeAll+0x134>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800628e:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <xTaskResumeAll+0x130>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800629a:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <xTaskResumeAll+0x138>)
 800629c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062aa:	f000 ffbb 	bl	8007224 <vPortExitCritical>

	return xAlreadyYielded;
 80062ae:	68bb      	ldr	r3, [r7, #8]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20000720 	.word	0x20000720
 80062bc:	200006f8 	.word	0x200006f8
 80062c0:	200006b8 	.word	0x200006b8
 80062c4:	20000700 	.word	0x20000700
 80062c8:	200005fc 	.word	0x200005fc
 80062cc:	200005f8 	.word	0x200005f8
 80062d0:	2000070c 	.word	0x2000070c
 80062d4:	20000708 	.word	0x20000708
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e6:	4b4f      	ldr	r3, [pc, #316]	; (8006424 <xTaskIncrementTick+0x148>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 808a 	bne.w	8006404 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062f0:	4b4d      	ldr	r3, [pc, #308]	; (8006428 <xTaskIncrementTick+0x14c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062f8:	4a4b      	ldr	r2, [pc, #300]	; (8006428 <xTaskIncrementTick+0x14c>)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d122      	bne.n	800634a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006304:	4b49      	ldr	r3, [pc, #292]	; (800642c <xTaskIncrementTick+0x150>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <xTaskIncrementTick+0x4c>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	b672      	cpsid	i
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	b662      	cpsie	i
 8006322:	603b      	str	r3, [r7, #0]
}
 8006324:	bf00      	nop
 8006326:	e7fe      	b.n	8006326 <xTaskIncrementTick+0x4a>
 8006328:	4b40      	ldr	r3, [pc, #256]	; (800642c <xTaskIncrementTick+0x150>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	4b40      	ldr	r3, [pc, #256]	; (8006430 <xTaskIncrementTick+0x154>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3e      	ldr	r2, [pc, #248]	; (800642c <xTaskIncrementTick+0x150>)
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4a3e      	ldr	r2, [pc, #248]	; (8006430 <xTaskIncrementTick+0x154>)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b3d      	ldr	r3, [pc, #244]	; (8006434 <xTaskIncrementTick+0x158>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <xTaskIncrementTick+0x158>)
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	f000 faed 	bl	8006924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800634a:	4b3b      	ldr	r3, [pc, #236]	; (8006438 <xTaskIncrementTick+0x15c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	429a      	cmp	r2, r3
 8006352:	d348      	bcc.n	80063e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006354:	4b35      	ldr	r3, [pc, #212]	; (800642c <xTaskIncrementTick+0x150>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635e:	4b36      	ldr	r3, [pc, #216]	; (8006438 <xTaskIncrementTick+0x15c>)
 8006360:	f04f 32ff 	mov.w	r2, #4294967295
 8006364:	601a      	str	r2, [r3, #0]
					break;
 8006366:	e03e      	b.n	80063e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006368:	4b30      	ldr	r3, [pc, #192]	; (800642c <xTaskIncrementTick+0x150>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d203      	bcs.n	8006388 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006380:	4a2d      	ldr	r2, [pc, #180]	; (8006438 <xTaskIncrementTick+0x15c>)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006386:	e02e      	b.n	80063e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	3304      	adds	r3, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe ff46 	bl	800521e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3318      	adds	r3, #24
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe ff3d 	bl	800521e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	2201      	movs	r2, #1
 80063aa:	409a      	lsls	r2, r3
 80063ac:	4b23      	ldr	r3, [pc, #140]	; (800643c <xTaskIncrementTick+0x160>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	4a22      	ldr	r2, [pc, #136]	; (800643c <xTaskIncrementTick+0x160>)
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <xTaskIncrementTick+0x164>)
 80063c4:	441a      	add	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f7fe fec9 	bl	8005164 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d6:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <xTaskIncrementTick+0x168>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	429a      	cmp	r2, r3
 80063de:	d3b9      	bcc.n	8006354 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e4:	e7b6      	b.n	8006354 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063e6:	4b17      	ldr	r3, [pc, #92]	; (8006444 <xTaskIncrementTick+0x168>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	4914      	ldr	r1, [pc, #80]	; (8006440 <xTaskIncrementTick+0x164>)
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d907      	bls.n	800640e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80063fe:	2301      	movs	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e004      	b.n	800640e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006404:	4b10      	ldr	r3, [pc, #64]	; (8006448 <xTaskIncrementTick+0x16c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a0f      	ldr	r2, [pc, #60]	; (8006448 <xTaskIncrementTick+0x16c>)
 800640c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <xTaskIncrementTick+0x170>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006416:	2301      	movs	r3, #1
 8006418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800641a:	697b      	ldr	r3, [r7, #20]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000720 	.word	0x20000720
 8006428:	200006fc 	.word	0x200006fc
 800642c:	200006b0 	.word	0x200006b0
 8006430:	200006b4 	.word	0x200006b4
 8006434:	20000710 	.word	0x20000710
 8006438:	20000718 	.word	0x20000718
 800643c:	20000700 	.word	0x20000700
 8006440:	200005fc 	.word	0x200005fc
 8006444:	200005f8 	.word	0x200005f8
 8006448:	20000708 	.word	0x20000708
 800644c:	2000070c 	.word	0x2000070c

08006450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006456:	4b47      	ldr	r3, [pc, #284]	; (8006574 <vTaskSwitchContext+0x124>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800645e:	4b46      	ldr	r3, [pc, #280]	; (8006578 <vTaskSwitchContext+0x128>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006464:	e081      	b.n	800656a <vTaskSwitchContext+0x11a>
		xYieldPending = pdFALSE;
 8006466:	4b44      	ldr	r3, [pc, #272]	; (8006578 <vTaskSwitchContext+0x128>)
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800646c:	f7fa ff82 	bl	8001374 <getRunTimeCounterValue>
 8006470:	4603      	mov	r3, r0
 8006472:	4a42      	ldr	r2, [pc, #264]	; (800657c <vTaskSwitchContext+0x12c>)
 8006474:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006476:	4b41      	ldr	r3, [pc, #260]	; (800657c <vTaskSwitchContext+0x12c>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b41      	ldr	r3, [pc, #260]	; (8006580 <vTaskSwitchContext+0x130>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d909      	bls.n	8006496 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006482:	4b40      	ldr	r3, [pc, #256]	; (8006584 <vTaskSwitchContext+0x134>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006488:	4a3c      	ldr	r2, [pc, #240]	; (800657c <vTaskSwitchContext+0x12c>)
 800648a:	6810      	ldr	r0, [r2, #0]
 800648c:	4a3c      	ldr	r2, [pc, #240]	; (8006580 <vTaskSwitchContext+0x130>)
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	1a82      	subs	r2, r0, r2
 8006492:	440a      	add	r2, r1
 8006494:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006496:	4b39      	ldr	r3, [pc, #228]	; (800657c <vTaskSwitchContext+0x12c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a39      	ldr	r2, [pc, #228]	; (8006580 <vTaskSwitchContext+0x130>)
 800649c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800649e:	4b39      	ldr	r3, [pc, #228]	; (8006584 <vTaskSwitchContext+0x134>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d111      	bne.n	80064da <vTaskSwitchContext+0x8a>
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3304      	adds	r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d10b      	bne.n	80064da <vTaskSwitchContext+0x8a>
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3308      	adds	r3, #8
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d105      	bne.n	80064da <vTaskSwitchContext+0x8a>
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	330c      	adds	r3, #12
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d008      	beq.n	80064ec <vTaskSwitchContext+0x9c>
 80064da:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <vTaskSwitchContext+0x134>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b29      	ldr	r3, [pc, #164]	; (8006584 <vTaskSwitchContext+0x134>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3334      	adds	r3, #52	; 0x34
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7fa fda6 	bl	8001038 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ec:	4b26      	ldr	r3, [pc, #152]	; (8006588 <vTaskSwitchContext+0x138>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	fab3 f383 	clz	r3, r3
 80064f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	f1c3 031f 	rsb	r3, r3, #31
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	4922      	ldr	r1, [pc, #136]	; (800658c <vTaskSwitchContext+0x13c>)
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10c      	bne.n	8006530 <vTaskSwitchContext+0xe0>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	b672      	cpsid	i
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	b662      	cpsie	i
 800652a:	607b      	str	r3, [r7, #4]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <vTaskSwitchContext+0xde>
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4a14      	ldr	r2, [pc, #80]	; (800658c <vTaskSwitchContext+0x13c>)
 800653c:	4413      	add	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3308      	adds	r3, #8
 8006552:	429a      	cmp	r2, r3
 8006554:	d104      	bne.n	8006560 <vTaskSwitchContext+0x110>
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	605a      	str	r2, [r3, #4]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4a07      	ldr	r2, [pc, #28]	; (8006584 <vTaskSwitchContext+0x134>)
 8006568:	6013      	str	r3, [r2, #0]
}
 800656a:	bf00      	nop
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000720 	.word	0x20000720
 8006578:	2000070c 	.word	0x2000070c
 800657c:	20000728 	.word	0x20000728
 8006580:	20000724 	.word	0x20000724
 8006584:	200005f8 	.word	0x200005f8
 8006588:	20000700 	.word	0x20000700
 800658c:	200005fc 	.word	0x200005fc

08006590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10c      	bne.n	80065ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	b672      	cpsid	i
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	b662      	cpsie	i
 80065b4:	60fb      	str	r3, [r7, #12]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <vTaskPlaceOnEventList+0x48>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3318      	adds	r3, #24
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe fdf2 	bl	80051ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065c8:	2101      	movs	r1, #1
 80065ca:	6838      	ldr	r0, [r7, #0]
 80065cc:	f000 fc84 	bl	8006ed8 <prvAddCurrentTaskToDelayedList>
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	200005f8 	.word	0x200005f8

080065dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10c      	bne.n	800660c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	b672      	cpsid	i
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	b662      	cpsie	i
 8006606:	60fb      	str	r3, [r7, #12]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	3318      	adds	r3, #24
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fe04 	bl	800521e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006616:	4b1d      	ldr	r3, [pc, #116]	; (800668c <xTaskRemoveFromEventList+0xb0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d11c      	bne.n	8006658 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3304      	adds	r3, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fdfb 	bl	800521e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	2201      	movs	r2, #1
 800662e:	409a      	lsls	r2, r3
 8006630:	4b17      	ldr	r3, [pc, #92]	; (8006690 <xTaskRemoveFromEventList+0xb4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4313      	orrs	r3, r2
 8006636:	4a16      	ldr	r2, [pc, #88]	; (8006690 <xTaskRemoveFromEventList+0xb4>)
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4a13      	ldr	r2, [pc, #76]	; (8006694 <xTaskRemoveFromEventList+0xb8>)
 8006648:	441a      	add	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3304      	adds	r3, #4
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7fe fd87 	bl	8005164 <vListInsertEnd>
 8006656:	e005      	b.n	8006664 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	3318      	adds	r3, #24
 800665c:	4619      	mov	r1, r3
 800665e:	480e      	ldr	r0, [pc, #56]	; (8006698 <xTaskRemoveFromEventList+0xbc>)
 8006660:	f7fe fd80 	bl	8005164 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <xTaskRemoveFromEventList+0xc0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	429a      	cmp	r2, r3
 8006670:	d905      	bls.n	800667e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006672:	2301      	movs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <xTaskRemoveFromEventList+0xc4>)
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	e001      	b.n	8006682 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006682:	697b      	ldr	r3, [r7, #20]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000720 	.word	0x20000720
 8006690:	20000700 	.word	0x20000700
 8006694:	200005fc 	.word	0x200005fc
 8006698:	200006b8 	.word	0x200006b8
 800669c:	200005f8 	.word	0x200005f8
 80066a0:	2000070c 	.word	0x2000070c

080066a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <vTaskInternalSetTimeOutState+0x24>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <vTaskInternalSetTimeOutState+0x28>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	605a      	str	r2, [r3, #4]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000710 	.word	0x20000710
 80066cc:	200006fc 	.word	0x200006fc

080066d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10c      	bne.n	80066fa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	b672      	cpsid	i
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	b662      	cpsie	i
 80066f4:	613b      	str	r3, [r7, #16]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	b672      	cpsid	i
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	b662      	cpsie	i
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800671a:	f000 fd4f 	bl	80071bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <xTaskCheckForTimeOut+0xc4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d102      	bne.n	800673e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006738:	2300      	movs	r3, #0
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	e023      	b.n	8006786 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b15      	ldr	r3, [pc, #84]	; (8006798 <xTaskCheckForTimeOut+0xc8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d007      	beq.n	800675a <xTaskCheckForTimeOut+0x8a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	429a      	cmp	r2, r3
 8006752:	d302      	bcc.n	800675a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	e015      	b.n	8006786 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	429a      	cmp	r2, r3
 8006762:	d20b      	bcs.n	800677c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff ff97 	bl	80066a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	e004      	b.n	8006786 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006782:	2301      	movs	r3, #1
 8006784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006786:	f000 fd4d 	bl	8007224 <vPortExitCritical>

	return xReturn;
 800678a:	69fb      	ldr	r3, [r7, #28]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200006fc 	.word	0x200006fc
 8006798:	20000710 	.word	0x20000710

0800679c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067a0:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <vTaskMissedYield+0x14>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
}
 80067a6:	bf00      	nop
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	2000070c 	.word	0x2000070c

080067b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067bc:	f000 f852 	bl	8006864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <prvIdleTask+0x28>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d9f9      	bls.n	80067bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <prvIdleTask+0x2c>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067d8:	e7f0      	b.n	80067bc <prvIdleTask+0x8>
 80067da:	bf00      	nop
 80067dc:	200005fc 	.word	0x200005fc
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067ea:	2300      	movs	r3, #0
 80067ec:	607b      	str	r3, [r7, #4]
 80067ee:	e00c      	b.n	800680a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4a12      	ldr	r2, [pc, #72]	; (8006844 <prvInitialiseTaskLists+0x60>)
 80067fc:	4413      	add	r3, r2
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fc83 	bl	800510a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3301      	adds	r3, #1
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b06      	cmp	r3, #6
 800680e:	d9ef      	bls.n	80067f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006810:	480d      	ldr	r0, [pc, #52]	; (8006848 <prvInitialiseTaskLists+0x64>)
 8006812:	f7fe fc7a 	bl	800510a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006816:	480d      	ldr	r0, [pc, #52]	; (800684c <prvInitialiseTaskLists+0x68>)
 8006818:	f7fe fc77 	bl	800510a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800681c:	480c      	ldr	r0, [pc, #48]	; (8006850 <prvInitialiseTaskLists+0x6c>)
 800681e:	f7fe fc74 	bl	800510a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006822:	480c      	ldr	r0, [pc, #48]	; (8006854 <prvInitialiseTaskLists+0x70>)
 8006824:	f7fe fc71 	bl	800510a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006828:	480b      	ldr	r0, [pc, #44]	; (8006858 <prvInitialiseTaskLists+0x74>)
 800682a:	f7fe fc6e 	bl	800510a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <prvInitialiseTaskLists+0x78>)
 8006830:	4a05      	ldr	r2, [pc, #20]	; (8006848 <prvInitialiseTaskLists+0x64>)
 8006832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <prvInitialiseTaskLists+0x7c>)
 8006836:	4a05      	ldr	r2, [pc, #20]	; (800684c <prvInitialiseTaskLists+0x68>)
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200005fc 	.word	0x200005fc
 8006848:	20000688 	.word	0x20000688
 800684c:	2000069c 	.word	0x2000069c
 8006850:	200006b8 	.word	0x200006b8
 8006854:	200006cc 	.word	0x200006cc
 8006858:	200006e4 	.word	0x200006e4
 800685c:	200006b0 	.word	0x200006b0
 8006860:	200006b4 	.word	0x200006b4

08006864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800686a:	e019      	b.n	80068a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800686c:	f000 fca6 	bl	80071bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006870:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <prvCheckTasksWaitingTermination+0x50>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fcce 	bl	800521e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <prvCheckTasksWaitingTermination+0x54>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3b01      	subs	r3, #1
 8006888:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <prvCheckTasksWaitingTermination+0x54>)
 800688a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <prvCheckTasksWaitingTermination+0x58>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3b01      	subs	r3, #1
 8006892:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <prvCheckTasksWaitingTermination+0x58>)
 8006894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006896:	f000 fcc5 	bl	8007224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f810 	bl	80068c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <prvCheckTasksWaitingTermination+0x58>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e1      	bne.n	800686c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200006cc 	.word	0x200006cc
 80068b8:	200006f8 	.word	0x200006f8
 80068bc:	200006e0 	.word	0x200006e0

080068c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d108      	bne.n	80068e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fe66 	bl	80075a8 <vPortFree>
				vPortFree( pxTCB );
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fe63 	bl	80075a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068e2:	e01a      	b.n	800691a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d103      	bne.n	80068f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fe5a 	bl	80075a8 <vPortFree>
	}
 80068f4:	e011      	b.n	800691a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d00c      	beq.n	800691a <prvDeleteTCB+0x5a>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	b672      	cpsid	i
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	b662      	cpsie	i
 8006914:	60fb      	str	r3, [r7, #12]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <prvDeleteTCB+0x58>
	}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <prvResetNextTaskUnblockTime+0x38>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <prvResetNextTaskUnblockTime+0x3c>)
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800693c:	e008      	b.n	8006950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <prvResetNextTaskUnblockTime+0x38>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a04      	ldr	r2, [pc, #16]	; (8006960 <prvResetNextTaskUnblockTime+0x3c>)
 800694e:	6013      	str	r3, [r2, #0]
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	200006b0 	.word	0x200006b0
 8006960:	20000718 	.word	0x20000718

08006964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <xTaskGetSchedulerState+0x34>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006972:	2301      	movs	r3, #1
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	e008      	b.n	800698a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006978:	4b08      	ldr	r3, [pc, #32]	; (800699c <xTaskGetSchedulerState+0x38>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006980:	2302      	movs	r3, #2
 8006982:	607b      	str	r3, [r7, #4]
 8006984:	e001      	b.n	800698a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800698a:	687b      	ldr	r3, [r7, #4]
	}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	20000704 	.word	0x20000704
 800699c:	20000720 	.word	0x20000720

080069a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d069      	beq.n	8006a8a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ba:	4b36      	ldr	r3, [pc, #216]	; (8006a94 <xTaskPriorityInherit+0xf4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d259      	bcs.n	8006a78 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	db06      	blt.n	80069da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069cc:	4b31      	ldr	r3, [pc, #196]	; (8006a94 <xTaskPriorityInherit+0xf4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	f1c3 0207 	rsb	r2, r3, #7
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6959      	ldr	r1, [r3, #20]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4a2b      	ldr	r2, [pc, #172]	; (8006a98 <xTaskPriorityInherit+0xf8>)
 80069ec:	4413      	add	r3, r2
 80069ee:	4299      	cmp	r1, r3
 80069f0:	d13a      	bne.n	8006a68 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe fc11 	bl	800521e <uxListRemove>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d115      	bne.n	8006a2e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4924      	ldr	r1, [pc, #144]	; (8006a98 <xTaskPriorityInherit+0xf8>)
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xTaskPriorityInherit+0x8e>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	43da      	mvns	r2, r3
 8006a24:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <xTaskPriorityInherit+0xfc>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <xTaskPriorityInherit+0xfc>)
 8006a2c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a2e:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <xTaskPriorityInherit+0xf4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	409a      	lsls	r2, r3
 8006a40:	4b16      	ldr	r3, [pc, #88]	; (8006a9c <xTaskPriorityInherit+0xfc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	4a15      	ldr	r2, [pc, #84]	; (8006a9c <xTaskPriorityInherit+0xfc>)
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4a10      	ldr	r2, [pc, #64]	; (8006a98 <xTaskPriorityInherit+0xf8>)
 8006a58:	441a      	add	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4610      	mov	r0, r2
 8006a62:	f7fe fb7f 	bl	8005164 <vListInsertEnd>
 8006a66:	e004      	b.n	8006a72 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <xTaskPriorityInherit+0xf4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e008      	b.n	8006a8a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <xTaskPriorityInherit+0xf4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d201      	bcs.n	8006a8a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a86:	2301      	movs	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
	}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	200005f8 	.word	0x200005f8
 8006a98:	200005fc 	.word	0x200005fc
 8006a9c:	20000700 	.word	0x20000700

08006aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d072      	beq.n	8006b9c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ab6:	4b3c      	ldr	r3, [pc, #240]	; (8006ba8 <xTaskPriorityDisinherit+0x108>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d00c      	beq.n	8006ada <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	b672      	cpsid	i
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	b662      	cpsie	i
 8006ad4:	60fb      	str	r3, [r7, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10c      	bne.n	8006afc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	b672      	cpsid	i
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	b662      	cpsie	i
 8006af6:	60bb      	str	r3, [r7, #8]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b00:	1e5a      	subs	r2, r3, #1
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d044      	beq.n	8006b9c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d140      	bne.n	8006b9c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fb7d 	bl	800521e <uxListRemove>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d115      	bne.n	8006b56 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2e:	491f      	ldr	r1, [pc, #124]	; (8006bac <xTaskPriorityDisinherit+0x10c>)
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xTaskPriorityDisinherit+0xb6>
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	2201      	movs	r2, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <xTaskPriorityDisinherit+0x110>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4013      	ands	r3, r2
 8006b52:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <xTaskPriorityDisinherit+0x110>)
 8006b54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	f1c3 0207 	rsb	r2, r3, #7
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	2201      	movs	r2, #1
 8006b70:	409a      	lsls	r2, r3
 8006b72:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <xTaskPriorityDisinherit+0x110>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	4a0d      	ldr	r2, [pc, #52]	; (8006bb0 <xTaskPriorityDisinherit+0x110>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4a08      	ldr	r2, [pc, #32]	; (8006bac <xTaskPriorityDisinherit+0x10c>)
 8006b8a:	441a      	add	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7fe fae6 	bl	8005164 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b9c:	697b      	ldr	r3, [r7, #20]
	}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200005f8 	.word	0x200005f8
 8006bac:	200005fc 	.word	0x200005fc
 8006bb0:	20000700 	.word	0x20000700

08006bb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8087 	beq.w	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10c      	bne.n	8006bf0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	b672      	cpsid	i
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	b662      	cpsie	i
 8006bea:	60fb      	str	r3, [r7, #12]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d902      	bls.n	8006c00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	e002      	b.n	8006c06 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d065      	beq.n	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d160      	bne.n	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c1a:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d10c      	bne.n	8006c3e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	b672      	cpsid	i
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	b662      	cpsie	i
 8006c38:	60bb      	str	r3, [r7, #8]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	db04      	blt.n	8006c5c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f1c3 0207 	rsb	r2, r3, #7
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	6959      	ldr	r1, [r3, #20]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ce8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006c6c:	4413      	add	r3, r2
 8006c6e:	4299      	cmp	r1, r3
 8006c70:	d134      	bne.n	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fad1 	bl	800521e <uxListRemove>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d115      	bne.n	8006cae <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c86:	4918      	ldr	r1, [pc, #96]	; (8006ce8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca2:	43da      	mvns	r2, r3
 8006ca4:	4b11      	ldr	r3, [pc, #68]	; (8006cec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	4a10      	ldr	r2, [pc, #64]	; (8006cec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006cac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	4a0b      	ldr	r2, [pc, #44]	; (8006cec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4a06      	ldr	r2, [pc, #24]	; (8006ce8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006cce:	441a      	add	r2, r3
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f7fe fa44 	bl	8005164 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cdc:	bf00      	nop
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	200005f8 	.word	0x200005f8
 8006ce8:	200005fc 	.word	0x200005fc
 8006cec:	20000700 	.word	0x20000700

08006cf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d02:	3201      	adds	r2, #1
 8006d04:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8006d06:	4b03      	ldr	r3, [pc, #12]	; (8006d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d08:	681b      	ldr	r3, [r3, #0]
	}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	200005f8 	.word	0x200005f8

08006d18 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006d22:	f000 fa4b 	bl	80071bc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006d26:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <ulTaskNotifyTake+0x88>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006d30:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <ulTaskNotifyTake+0x88>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d40:	2101      	movs	r1, #1
 8006d42:	6838      	ldr	r0, [r7, #0]
 8006d44:	f000 f8c8 	bl	8006ed8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006d48:	4b16      	ldr	r3, [pc, #88]	; (8006da4 <ulTaskNotifyTake+0x8c>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006d58:	f000 fa64 	bl	8007224 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006d5c:	f000 fa2e 	bl	80071bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006d60:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <ulTaskNotifyTake+0x88>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <ulTaskNotifyTake+0x88>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d7c:	e004      	b.n	8006d88 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006d7e:	4b08      	ldr	r3, [pc, #32]	; (8006da0 <ulTaskNotifyTake+0x88>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	3a01      	subs	r2, #1
 8006d86:	65da      	str	r2, [r3, #92]	; 0x5c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d88:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <ulTaskNotifyTake+0x88>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8006d92:	f000 fa47 	bl	8007224 <vPortExitCritical>

		return ulReturn;
 8006d96:	68fb      	ldr	r3, [r7, #12]
	}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	200005f8 	.word	0x200005f8
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10c      	bne.n	8006dd2 <vTaskNotifyGiveFromISR+0x2a>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	b672      	cpsid	i
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	b662      	cpsie	i
 8006dcc:	61bb      	str	r3, [r7, #24]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dd2:	f000 fadb 	bl	800738c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dda:	f3ef 8211 	mrs	r2, BASEPRI
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	b672      	cpsid	i
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	b662      	cpsie	i
 8006df2:	617a      	str	r2, [r7, #20]
 8006df4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006df6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006df8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006e00:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	65da      	str	r2, [r3, #92]	; 0x5c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d147      	bne.n	8006eaa <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <vTaskNotifyGiveFromISR+0x94>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	b672      	cpsid	i
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	b662      	cpsie	i
 8006e36:	60fb      	str	r3, [r7, #12]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <vTaskNotifyGiveFromISR+0x92>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3c:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <vTaskNotifyGiveFromISR+0x118>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d11c      	bne.n	8006e7e <vTaskNotifyGiveFromISR+0xd6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	3304      	adds	r3, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe f9e8 	bl	800521e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	2201      	movs	r2, #1
 8006e54:	409a      	lsls	r2, r3
 8006e56:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <vTaskNotifyGiveFromISR+0x11c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <vTaskNotifyGiveFromISR+0x11c>)
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <vTaskNotifyGiveFromISR+0x120>)
 8006e6e:	441a      	add	r2, r3
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f7fe f974 	bl	8005164 <vListInsertEnd>
 8006e7c:	e005      	b.n	8006e8a <vTaskNotifyGiveFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	3318      	adds	r3, #24
 8006e82:	4619      	mov	r1, r3
 8006e84:	4811      	ldr	r0, [pc, #68]	; (8006ecc <vTaskNotifyGiveFromISR+0x124>)
 8006e86:	f7fe f96d 	bl	8005164 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8e:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <vTaskNotifyGiveFromISR+0x128>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d908      	bls.n	8006eaa <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <vTaskNotifyGiveFromISR+0x12c>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006eb4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006eb6:	bf00      	nop
 8006eb8:	3728      	adds	r7, #40	; 0x28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000720 	.word	0x20000720
 8006ec4:	20000700 	.word	0x20000700
 8006ec8:	200005fc 	.word	0x200005fc
 8006ecc:	200006b8 	.word	0x200006b8
 8006ed0:	200005f8 	.word	0x200005f8
 8006ed4:	2000070c 	.word	0x2000070c

08006ed8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ee2:	4b29      	ldr	r3, [pc, #164]	; (8006f88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee8:	4b28      	ldr	r3, [pc, #160]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe f995 	bl	800521e <uxListRemove>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	2201      	movs	r2, #1
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	43da      	mvns	r2, r3
 8006f08:	4b21      	ldr	r3, [pc, #132]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	4a20      	ldr	r2, [pc, #128]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d10a      	bne.n	8006f30 <prvAddCurrentTaskToDelayedList+0x58>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d007      	beq.n	8006f30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4619      	mov	r1, r3
 8006f28:	481a      	ldr	r0, [pc, #104]	; (8006f94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f2a:	f7fe f91b 	bl	8005164 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f2e:	e026      	b.n	8006f7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4413      	add	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f38:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d209      	bcs.n	8006f5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f48:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f7fe f929 	bl	80051ac <vListInsert>
}
 8006f5a:	e010      	b.n	8006f7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f7fe f91f 	bl	80051ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d202      	bcs.n	8006f7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6013      	str	r3, [r2, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200006fc 	.word	0x200006fc
 8006f8c:	200005f8 	.word	0x200005f8
 8006f90:	20000700 	.word	0x20000700
 8006f94:	200006e4 	.word	0x200006e4
 8006f98:	200006b4 	.word	0x200006b4
 8006f9c:	200006b0 	.word	0x200006b0
 8006fa0:	20000718 	.word	0x20000718

08006fa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3b04      	subs	r3, #4
 8006fb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3b04      	subs	r3, #4
 8006fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f023 0201 	bic.w	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3b04      	subs	r3, #4
 8006fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fd4:	4a0c      	ldr	r2, [pc, #48]	; (8007008 <pxPortInitialiseStack+0x64>)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3b14      	subs	r3, #20
 8006fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3b04      	subs	r3, #4
 8006fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f06f 0202 	mvn.w	r2, #2
 8006ff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3b20      	subs	r3, #32
 8006ff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	0800700d 	.word	0x0800700d

0800700c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <prvTaskExitError+0x5c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701e:	d00c      	beq.n	800703a <prvTaskExitError+0x2e>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	b672      	cpsid	i
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	b662      	cpsie	i
 8007034:	60fb      	str	r3, [r7, #12]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <prvTaskExitError+0x2c>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	b672      	cpsid	i
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	b662      	cpsie	i
 800704e:	60bb      	str	r3, [r7, #8]
}
 8007050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007052:	bf00      	nop
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0fc      	beq.n	8007054 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	2000000c 	.word	0x2000000c
 800706c:	00000000 	.word	0x00000000

08007070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <pxCurrentTCBConst2>)
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	6808      	ldr	r0, [r1, #0]
 8007076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	f380 8809 	msr	PSP, r0
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8811 	msr	BASEPRI, r0
 800708a:	4770      	bx	lr
 800708c:	f3af 8000 	nop.w

08007090 <pxCurrentTCBConst2>:
 8007090:	200005f8 	.word	0x200005f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop

08007098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007098:	4808      	ldr	r0, [pc, #32]	; (80070bc <prvPortStartFirstTask+0x24>)
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f380 8808 	msr	MSP, r0
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8814 	msr	CONTROL, r0
 80070aa:	b662      	cpsie	i
 80070ac:	b661      	cpsie	f
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	df00      	svc	0
 80070b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ba:	bf00      	nop
 80070bc:	e000ed08 	.word	0xe000ed08

080070c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070c6:	4b37      	ldr	r3, [pc, #220]	; (80071a4 <xPortStartScheduler+0xe4>)
 80070c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	22ff      	movs	r2, #255	; 0xff
 80070d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	4b2f      	ldr	r3, [pc, #188]	; (80071a8 <xPortStartScheduler+0xe8>)
 80070ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070ee:	4b2f      	ldr	r3, [pc, #188]	; (80071ac <xPortStartScheduler+0xec>)
 80070f0:	2207      	movs	r2, #7
 80070f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070f4:	e009      	b.n	800710a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80070f6:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <xPortStartScheduler+0xec>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	4a2b      	ldr	r2, [pc, #172]	; (80071ac <xPortStartScheduler+0xec>)
 80070fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	b2db      	uxtb	r3, r3
 8007108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b80      	cmp	r3, #128	; 0x80
 8007114:	d0ef      	beq.n	80070f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007116:	4b25      	ldr	r3, [pc, #148]	; (80071ac <xPortStartScheduler+0xec>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1c3 0307 	rsb	r3, r3, #7
 800711e:	2b04      	cmp	r3, #4
 8007120:	d00c      	beq.n	800713c <xPortStartScheduler+0x7c>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	b672      	cpsid	i
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	b662      	cpsie	i
 8007136:	60bb      	str	r3, [r7, #8]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800713c:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <xPortStartScheduler+0xec>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <xPortStartScheduler+0xec>)
 8007144:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007146:	4b19      	ldr	r3, [pc, #100]	; (80071ac <xPortStartScheduler+0xec>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <xPortStartScheduler+0xec>)
 8007150:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800715a:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <xPortStartScheduler+0xf0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a14      	ldr	r2, [pc, #80]	; (80071b0 <xPortStartScheduler+0xf0>)
 8007160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007164:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007166:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <xPortStartScheduler+0xf0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <xPortStartScheduler+0xf0>)
 800716c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007170:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007172:	f000 f8dd 	bl	8007330 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007176:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <xPortStartScheduler+0xf4>)
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800717c:	f000 f8fc 	bl	8007378 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007180:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <xPortStartScheduler+0xf8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a0c      	ldr	r2, [pc, #48]	; (80071b8 <xPortStartScheduler+0xf8>)
 8007186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800718a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800718c:	f7ff ff84 	bl	8007098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007190:	f7ff f95e 	bl	8006450 <vTaskSwitchContext>
	prvTaskExitError();
 8007194:	f7ff ff3a 	bl	800700c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	e000e400 	.word	0xe000e400
 80071a8:	2000072c 	.word	0x2000072c
 80071ac:	20000730 	.word	0x20000730
 80071b0:	e000ed20 	.word	0xe000ed20
 80071b4:	2000000c 	.word	0x2000000c
 80071b8:	e000ef34 	.word	0xe000ef34

080071bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	b672      	cpsid	i
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	b662      	cpsie	i
 80071d6:	607b      	str	r3, [r7, #4]
}
 80071d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <vPortEnterCritical+0x60>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3301      	adds	r3, #1
 80071e0:	4a0e      	ldr	r2, [pc, #56]	; (800721c <vPortEnterCritical+0x60>)
 80071e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <vPortEnterCritical+0x60>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d111      	bne.n	8007210 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <vPortEnterCritical+0x64>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00c      	beq.n	8007210 <vPortEnterCritical+0x54>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	b672      	cpsid	i
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	b662      	cpsie	i
 800720a:	603b      	str	r3, [r7, #0]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <vPortEnterCritical+0x52>
	}
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	2000000c 	.word	0x2000000c
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <vPortExitCritical+0x54>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10c      	bne.n	800724c <vPortExitCritical+0x28>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	b672      	cpsid	i
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	b662      	cpsie	i
 8007246:	607b      	str	r3, [r7, #4]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <vPortExitCritical+0x54>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3b01      	subs	r3, #1
 8007252:	4a09      	ldr	r2, [pc, #36]	; (8007278 <vPortExitCritical+0x54>)
 8007254:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007256:	4b08      	ldr	r3, [pc, #32]	; (8007278 <vPortExitCritical+0x54>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <vPortExitCritical+0x46>
 800725e:	2300      	movs	r3, #0
 8007260:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f383 8811 	msr	BASEPRI, r3
}
 8007268:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	2000000c 	.word	0x2000000c
 800727c:	00000000 	.word	0x00000000

08007280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007280:	f3ef 8009 	mrs	r0, PSP
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <pxCurrentTCBConst>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	f01e 0f10 	tst.w	lr, #16
 8007290:	bf08      	it	eq
 8007292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729a:	6010      	str	r0, [r2, #0]
 800729c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072a4:	b672      	cpsid	i
 80072a6:	f380 8811 	msr	BASEPRI, r0
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	b662      	cpsie	i
 80072b4:	f7ff f8cc 	bl	8006450 <vTaskSwitchContext>
 80072b8:	f04f 0000 	mov.w	r0, #0
 80072bc:	f380 8811 	msr	BASEPRI, r0
 80072c0:	bc09      	pop	{r0, r3}
 80072c2:	6819      	ldr	r1, [r3, #0]
 80072c4:	6808      	ldr	r0, [r1, #0]
 80072c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	f01e 0f10 	tst.w	lr, #16
 80072ce:	bf08      	it	eq
 80072d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072d4:	f380 8809 	msr	PSP, r0
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop

080072e0 <pxCurrentTCBConst>:
 80072e0:	200005f8 	.word	0x200005f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop

080072e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	b672      	cpsid	i
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	b662      	cpsie	i
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007306:	f7fe ffe9 	bl	80062dc <xTaskIncrementTick>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <SysTick_Handler+0x44>)
 8007312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	f383 8811 	msr	BASEPRI, r3
}
 8007322:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <vPortSetupTimerInterrupt+0x34>)
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <vPortSetupTimerInterrupt+0x38>)
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <vPortSetupTimerInterrupt+0x3c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <vPortSetupTimerInterrupt+0x40>)
 8007346:	fba2 2303 	umull	r2, r3, r2, r3
 800734a:	099b      	lsrs	r3, r3, #6
 800734c:	4a09      	ldr	r2, [pc, #36]	; (8007374 <vPortSetupTimerInterrupt+0x44>)
 800734e:	3b01      	subs	r3, #1
 8007350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007352:	4b04      	ldr	r3, [pc, #16]	; (8007364 <vPortSetupTimerInterrupt+0x34>)
 8007354:	2207      	movs	r2, #7
 8007356:	601a      	str	r2, [r3, #0]
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	e000e010 	.word	0xe000e010
 8007368:	e000e018 	.word	0xe000e018
 800736c:	20000000 	.word	0x20000000
 8007370:	10624dd3 	.word	0x10624dd3
 8007374:	e000e014 	.word	0xe000e014

08007378 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007378:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007388 <vPortEnableVFP+0x10>
 800737c:	6801      	ldr	r1, [r0, #0]
 800737e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007382:	6001      	str	r1, [r0, #0]
 8007384:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007386:	bf00      	nop
 8007388:	e000ed88 	.word	0xe000ed88

0800738c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007392:	f3ef 8305 	mrs	r3, IPSR
 8007396:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b0f      	cmp	r3, #15
 800739c:	d916      	bls.n	80073cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800739e:	4a19      	ldr	r2, [pc, #100]	; (8007404 <vPortValidateInterruptPriority+0x78>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073a8:	4b17      	ldr	r3, [pc, #92]	; (8007408 <vPortValidateInterruptPriority+0x7c>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	7afa      	ldrb	r2, [r7, #11]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d20c      	bcs.n	80073cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	b672      	cpsid	i
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	b662      	cpsie	i
 80073c6:	607b      	str	r3, [r7, #4]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <vPortValidateInterruptPriority+0x80>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073d4:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <vPortValidateInterruptPriority+0x84>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d90c      	bls.n	80073f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	b672      	cpsid	i
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	b662      	cpsie	i
 80073f0:	603b      	str	r3, [r7, #0]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <vPortValidateInterruptPriority+0x68>
	}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	e000e3f0 	.word	0xe000e3f0
 8007408:	2000072c 	.word	0x2000072c
 800740c:	e000ed0c 	.word	0xe000ed0c
 8007410:	20000730 	.word	0x20000730

08007414 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007420:	f7fe feb0 	bl	8006184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007424:	4b5b      	ldr	r3, [pc, #364]	; (8007594 <pvPortMalloc+0x180>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800742c:	f000 f91a 	bl	8007664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007430:	4b59      	ldr	r3, [pc, #356]	; (8007598 <pvPortMalloc+0x184>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	f040 8092 	bne.w	8007562 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01f      	beq.n	8007484 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007444:	2208      	movs	r2, #8
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	2b00      	cmp	r3, #0
 8007454:	d016      	beq.n	8007484 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f023 0307 	bic.w	r3, r3, #7
 800745c:	3308      	adds	r3, #8
 800745e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00c      	beq.n	8007484 <pvPortMalloc+0x70>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	b672      	cpsid	i
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	b662      	cpsie	i
 800747e:	617b      	str	r3, [r7, #20]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d06b      	beq.n	8007562 <pvPortMalloc+0x14e>
 800748a:	4b44      	ldr	r3, [pc, #272]	; (800759c <pvPortMalloc+0x188>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	d866      	bhi.n	8007562 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007494:	4b42      	ldr	r3, [pc, #264]	; (80075a0 <pvPortMalloc+0x18c>)
 8007496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007498:	4b41      	ldr	r3, [pc, #260]	; (80075a0 <pvPortMalloc+0x18c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800749e:	e004      	b.n	80074aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d903      	bls.n	80074bc <pvPortMalloc+0xa8>
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1f1      	bne.n	80074a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074bc:	4b35      	ldr	r3, [pc, #212]	; (8007594 <pvPortMalloc+0x180>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d04d      	beq.n	8007562 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2208      	movs	r2, #8
 80074cc:	4413      	add	r3, r2
 80074ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	2308      	movs	r3, #8
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d921      	bls.n	800752c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <pvPortMalloc+0x100>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	b672      	cpsid	i
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	b662      	cpsie	i
 800750e:	613b      	str	r3, [r7, #16]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007526:	69b8      	ldr	r0, [r7, #24]
 8007528:	f000 f8fe 	bl	8007728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800752c:	4b1b      	ldr	r3, [pc, #108]	; (800759c <pvPortMalloc+0x188>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	4a19      	ldr	r2, [pc, #100]	; (800759c <pvPortMalloc+0x188>)
 8007538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800753a:	4b18      	ldr	r3, [pc, #96]	; (800759c <pvPortMalloc+0x188>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <pvPortMalloc+0x190>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d203      	bcs.n	800754e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007546:	4b15      	ldr	r3, [pc, #84]	; (800759c <pvPortMalloc+0x188>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <pvPortMalloc+0x190>)
 800754c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	4b11      	ldr	r3, [pc, #68]	; (8007598 <pvPortMalloc+0x184>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	431a      	orrs	r2, r3
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007562:	f7fe fe1d 	bl	80061a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <pvPortMalloc+0x176>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	b672      	cpsid	i
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	b662      	cpsie	i
 8007584:	60fb      	str	r3, [r7, #12]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <pvPortMalloc+0x174>
	return pvReturn;
 800758a:	69fb      	ldr	r3, [r7, #28]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3728      	adds	r7, #40	; 0x28
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	2000433c 	.word	0x2000433c
 8007598:	20004348 	.word	0x20004348
 800759c:	20004340 	.word	0x20004340
 80075a0:	20004334 	.word	0x20004334
 80075a4:	20004344 	.word	0x20004344

080075a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04c      	beq.n	8007654 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075ba:	2308      	movs	r3, #8
 80075bc:	425b      	negs	r3, r3
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4b23      	ldr	r3, [pc, #140]	; (800765c <vPortFree+0xb4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10c      	bne.n	80075f0 <vPortFree+0x48>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	b672      	cpsid	i
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	b662      	cpsie	i
 80075ea:	60fb      	str	r3, [r7, #12]
}
 80075ec:	bf00      	nop
 80075ee:	e7fe      	b.n	80075ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <vPortFree+0x6a>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	b672      	cpsid	i
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	b662      	cpsie	i
 800760c:	60bb      	str	r3, [r7, #8]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	4b11      	ldr	r3, [pc, #68]	; (800765c <vPortFree+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d019      	beq.n	8007654 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d115      	bne.n	8007654 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <vPortFree+0xb4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	43db      	mvns	r3, r3
 8007632:	401a      	ands	r2, r3
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007638:	f7fe fda4 	bl	8006184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	4b07      	ldr	r3, [pc, #28]	; (8007660 <vPortFree+0xb8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4413      	add	r3, r2
 8007646:	4a06      	ldr	r2, [pc, #24]	; (8007660 <vPortFree+0xb8>)
 8007648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800764a:	6938      	ldr	r0, [r7, #16]
 800764c:	f000 f86c 	bl	8007728 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007650:	f7fe fda6 	bl	80061a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007654:	bf00      	nop
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20004348 	.word	0x20004348
 8007660:	20004340 	.word	0x20004340

08007664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800766a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800766e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007670:	4b27      	ldr	r3, [pc, #156]	; (8007710 <prvHeapInit+0xac>)
 8007672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00c      	beq.n	8007698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3307      	adds	r3, #7
 8007682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	4a1f      	ldr	r2, [pc, #124]	; (8007710 <prvHeapInit+0xac>)
 8007694:	4413      	add	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800769c:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <prvHeapInit+0xb0>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076a2:	4b1c      	ldr	r3, [pc, #112]	; (8007714 <prvHeapInit+0xb0>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076b0:	2208      	movs	r2, #8
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4a15      	ldr	r2, [pc, #84]	; (8007718 <prvHeapInit+0xb4>)
 80076c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <prvHeapInit+0xb4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ce:	4b12      	ldr	r3, [pc, #72]	; (8007718 <prvHeapInit+0xb4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076e4:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <prvHeapInit+0xb4>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	4a0a      	ldr	r2, [pc, #40]	; (800771c <prvHeapInit+0xb8>)
 80076f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4a09      	ldr	r2, [pc, #36]	; (8007720 <prvHeapInit+0xbc>)
 80076fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076fc:	4b09      	ldr	r3, [pc, #36]	; (8007724 <prvHeapInit+0xc0>)
 80076fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007702:	601a      	str	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	20000734 	.word	0x20000734
 8007714:	20004334 	.word	0x20004334
 8007718:	2000433c 	.word	0x2000433c
 800771c:	20004344 	.word	0x20004344
 8007720:	20004340 	.word	0x20004340
 8007724:	20004348 	.word	0x20004348

08007728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007730:	4b28      	ldr	r3, [pc, #160]	; (80077d4 <prvInsertBlockIntoFreeList+0xac>)
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e002      	b.n	800773c <prvInsertBlockIntoFreeList+0x14>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	429a      	cmp	r2, r3
 8007744:	d8f7      	bhi.n	8007736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d108      	bne.n	800776a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	441a      	add	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	441a      	add	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d118      	bne.n	80077b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d00d      	beq.n	80077a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	441a      	add	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	e008      	b.n	80077b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077a6:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <prvInsertBlockIntoFreeList+0xb0>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	e003      	b.n	80077b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d002      	beq.n	80077c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20004334 	.word	0x20004334
 80077d8:	2000433c 	.word	0x2000433c

080077dc <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80077e2:	1dfb      	adds	r3, r7, #7
 80077e4:	2201      	movs	r2, #1
 80077e6:	4619      	mov	r1, r3
 80077e8:	4806      	ldr	r0, [pc, #24]	; (8007804 <uart_read+0x28>)
 80077ea:	f7fc fa04 	bl	8003bf6 <HAL_UART_Receive_IT>
	// On veut bloquer, en prenant une notification vide
	 ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80077ee:	f04f 31ff 	mov.w	r1, #4294967295
 80077f2:	2001      	movs	r0, #1
 80077f4:	f7ff fa90 	bl	8006d18 <ulTaskNotifyTake>

	return c;
 80077f8:	79fb      	ldrb	r3, [r7, #7]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	2000052c 	.word	0x2000052c

08007808 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8007814:	887a      	ldrh	r2, [r7, #2]
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	4803      	ldr	r0, [pc, #12]	; (800782c <uart_write+0x24>)
 800781e:	f7fc f967 	bl	8003af0 <HAL_UART_Transmit>
	return size;
 8007822:	887b      	ldrh	r3, [r7, #2]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	2000052c 	.word	0x2000052c

08007830 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af02      	add	r7, sp, #8
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	e022      	b.n	8007886 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8007840:	4916      	ldr	r1, [pc, #88]	; (800789c <sh_help+0x6c>)
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4613      	mov	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	4912      	ldr	r1, [pc, #72]	; (800789c <sh_help+0x6c>)
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4613      	mov	r3, r2
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3308      	adds	r3, #8
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4603      	mov	r3, r0
 8007868:	4a0d      	ldr	r2, [pc, #52]	; (80078a0 <sh_help+0x70>)
 800786a:	2128      	movs	r1, #40	; 0x28
 800786c:	480d      	ldr	r0, [pc, #52]	; (80078a4 <sh_help+0x74>)
 800786e:	f001 f8a7 	bl	80089c0 <sniprintf>
 8007872:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	b29b      	uxth	r3, r3
 8007878:	4619      	mov	r1, r3
 800787a:	480a      	ldr	r0, [pc, #40]	; (80078a4 <sh_help+0x74>)
 800787c:	f7ff ffc4 	bl	8007808 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <sh_help+0x78>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	429a      	cmp	r2, r3
 800788e:	dbd7      	blt.n	8007840 <sh_help+0x10>
	}

	return 0;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20004350 	.word	0x20004350
 80078a0:	0800c814 	.word	0x0800c814
 80078a4:	20004650 	.word	0x20004650
 80078a8:	2000434c 	.word	0x2000434c

080078ac <shell_init>:

void shell_init() {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
	int size = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <shell_init+0x34>)
 80078b8:	2128      	movs	r1, #40	; 0x28
 80078ba:	480a      	ldr	r0, [pc, #40]	; (80078e4 <shell_init+0x38>)
 80078bc:	f001 f880 	bl	80089c0 <sniprintf>
 80078c0:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4619      	mov	r1, r3
 80078c8:	4806      	ldr	r0, [pc, #24]	; (80078e4 <shell_init+0x38>)
 80078ca:	f7ff ff9d 	bl	8007808 <uart_write>

	shell_add('h', sh_help, "Help");
 80078ce:	4a06      	ldr	r2, [pc, #24]	; (80078e8 <shell_init+0x3c>)
 80078d0:	4906      	ldr	r1, [pc, #24]	; (80078ec <shell_init+0x40>)
 80078d2:	2068      	movs	r0, #104	; 0x68
 80078d4:	f000 f80c 	bl	80078f0 <shell_add>
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	0800c820 	.word	0x0800c820
 80078e4:	20004650 	.word	0x20004650
 80078e8:	0800c848 	.word	0x0800c848
 80078ec:	08007831 	.word	0x08007831

080078f0 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80078fe:	4b19      	ldr	r3, [pc, #100]	; (8007964 <shell_add+0x74>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b3f      	cmp	r3, #63	; 0x3f
 8007904:	dc26      	bgt.n	8007954 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8007906:	4b17      	ldr	r3, [pc, #92]	; (8007964 <shell_add+0x74>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4917      	ldr	r1, [pc, #92]	; (8007968 <shell_add+0x78>)
 800790c:	4613      	mov	r3, r2
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	7bfa      	ldrb	r2, [r7, #15]
 8007918:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <shell_add+0x74>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4912      	ldr	r1, [pc, #72]	; (8007968 <shell_add+0x78>)
 8007920:	4613      	mov	r3, r2
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	3304      	adds	r3, #4
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <shell_add+0x74>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	490c      	ldr	r1, [pc, #48]	; (8007968 <shell_add+0x78>)
 8007936:	4613      	mov	r3, r2
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	3308      	adds	r3, #8
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <shell_add+0x74>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	4a05      	ldr	r2, [pc, #20]	; (8007964 <shell_add+0x74>)
 800794e:	6013      	str	r3, [r2, #0]
		return 0;
 8007950:	2300      	movs	r3, #0
 8007952:	e001      	b.n	8007958 <shell_add+0x68>
	}

	return -1;
 8007954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	2000434c 	.word	0x2000434c
 8007968:	20004350 	.word	0x20004350

0800796c <shell_exec>:

static int shell_exec(char * buf) {
 800796c:	b580      	push	{r7, lr}
 800796e:	b090      	sub	sp, #64	; 0x40
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007980:	e040      	b.n	8007a04 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8007982:	492d      	ldr	r1, [pc, #180]	; (8007a38 <shell_exec+0xcc>)
 8007984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007986:	4613      	mov	r3, r2
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007996:	429a      	cmp	r2, r3
 8007998:	d131      	bne.n	80079fe <shell_exec+0x92>
			argc = 1;
 800799a:	2301      	movs	r3, #1
 800799c:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	637b      	str	r3, [r7, #52]	; 0x34
 80079a6:	e013      	b.n	80079d0 <shell_exec+0x64>
				if(*p == ' ') {
 80079a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b20      	cmp	r3, #32
 80079ae:	d10c      	bne.n	80079ca <shell_exec+0x5e>
					*p = '\0';
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80079bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079be:	3201      	adds	r2, #1
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	3340      	adds	r3, #64	; 0x40
 80079c4:	443b      	add	r3, r7
 80079c6:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	3301      	adds	r3, #1
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
 80079d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <shell_exec+0x72>
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	2b07      	cmp	r3, #7
 80079dc:	dde4      	ble.n	80079a8 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80079de:	4916      	ldr	r1, [pc, #88]	; (8007a38 <shell_exec+0xcc>)
 80079e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079e2:	4613      	mov	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3304      	adds	r3, #4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f107 020c 	add.w	r2, r7, #12
 80079f4:	4611      	mov	r1, r2
 80079f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f8:	4798      	blx	r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	e017      	b.n	8007a2e <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80079fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a00:	3301      	adds	r3, #1
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a04:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <shell_exec+0xd0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	dbb9      	blt.n	8007982 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8007a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a12:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <shell_exec+0xd4>)
 8007a14:	2128      	movs	r1, #40	; 0x28
 8007a16:	480b      	ldr	r0, [pc, #44]	; (8007a44 <shell_exec+0xd8>)
 8007a18:	f000 ffd2 	bl	80089c0 <sniprintf>
 8007a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	4619      	mov	r1, r3
 8007a24:	4807      	ldr	r0, [pc, #28]	; (8007a44 <shell_exec+0xd8>)
 8007a26:	f7ff feef 	bl	8007808 <uart_write>
	return -1;
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3740      	adds	r7, #64	; 0x40
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20004350 	.word	0x20004350
 8007a3c:	2000434c 	.word	0x2000434c
 8007a40:	0800c850 	.word	0x0800c850
 8007a44:	20004650 	.word	0x20004650

08007a48 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
	int reading = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8007a56:	2102      	movs	r1, #2
 8007a58:	482a      	ldr	r0, [pc, #168]	; (8007b04 <shell_run+0xbc>)
 8007a5a:	f7ff fed5 	bl	8007808 <uart_write>
		reading = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8007a62:	e047      	b.n	8007af4 <shell_run+0xac>
			char c = uart_read();
 8007a64:	f7ff feba 	bl	80077dc <uart_read>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	2b08      	cmp	r3, #8
 8007a70:	d025      	beq.n	8007abe <shell_run+0x76>
 8007a72:	2b0d      	cmp	r3, #13
 8007a74:	d12e      	bne.n	8007ad4 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8007a76:	4a24      	ldr	r2, [pc, #144]	; (8007b08 <shell_run+0xc0>)
 8007a78:	2128      	movs	r1, #40	; 0x28
 8007a7a:	4824      	ldr	r0, [pc, #144]	; (8007b0c <shell_run+0xc4>)
 8007a7c:	f000 ffa0 	bl	80089c0 <sniprintf>
 8007a80:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	4619      	mov	r1, r3
 8007a88:	4820      	ldr	r0, [pc, #128]	; (8007b0c <shell_run+0xc4>)
 8007a8a:	f7ff febd 	bl	8007808 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	60ba      	str	r2, [r7, #8]
 8007a94:	4a1e      	ldr	r2, [pc, #120]	; (8007b10 <shell_run+0xc8>)
 8007a96:	2100      	movs	r1, #0
 8007a98:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8007a9a:	4b1d      	ldr	r3, [pc, #116]	; (8007b10 <shell_run+0xc8>)
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <shell_run+0xcc>)
 8007a9e:	2128      	movs	r1, #40	; 0x28
 8007aa0:	481a      	ldr	r0, [pc, #104]	; (8007b0c <shell_run+0xc4>)
 8007aa2:	f000 ff8d 	bl	80089c0 <sniprintf>
 8007aa6:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4619      	mov	r1, r3
 8007aae:	4817      	ldr	r0, [pc, #92]	; (8007b0c <shell_run+0xc4>)
 8007ab0:	f7ff feaa 	bl	8007808 <uart_write>
				reading = 0;        //exit read loop
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60bb      	str	r3, [r7, #8]
				break;
 8007abc:	e01a      	b.n	8007af4 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	dd16      	ble.n	8007af2 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8007aca:	2103      	movs	r1, #3
 8007acc:	4812      	ldr	r0, [pc, #72]	; (8007b18 <shell_run+0xd0>)
 8007ace:	f7ff fe9b 	bl	8007808 <uart_write>
				}
				break;
 8007ad2:	e00e      	b.n	8007af2 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b27      	cmp	r3, #39	; 0x27
 8007ad8:	dc0c      	bgt.n	8007af4 <shell_run+0xac>
					uart_write(&c, 1);
 8007ada:	1cfb      	adds	r3, r7, #3
 8007adc:	2101      	movs	r1, #1
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff fe92 	bl	8007808 <uart_write>
					cmd_buffer[pos++] = c; //store
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	60ba      	str	r2, [r7, #8]
 8007aea:	78f9      	ldrb	r1, [r7, #3]
 8007aec:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <shell_run+0xc8>)
 8007aee:	54d1      	strb	r1, [r2, r3]
 8007af0:	e000      	b.n	8007af4 <shell_run+0xac>
				break;
 8007af2:	bf00      	nop
		while(reading) {
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1b4      	bne.n	8007a64 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8007afa:	4805      	ldr	r0, [pc, #20]	; (8007b10 <shell_run+0xc8>)
 8007afc:	f7ff ff36 	bl	800796c <shell_exec>
		uart_write(prompt, 2);
 8007b00:	e7a9      	b.n	8007a56 <shell_run+0xe>
 8007b02:	bf00      	nop
 8007b04:	20000014 	.word	0x20000014
 8007b08:	0800c868 	.word	0x0800c868
 8007b0c:	20004650 	.word	0x20004650
 8007b10:	20004678 	.word	0x20004678
 8007b14:	0800c86c 	.word	0x0800c86c
 8007b18:	20000010 	.word	0x20000010

08007b1c <atoi>:
 8007b1c:	220a      	movs	r2, #10
 8007b1e:	2100      	movs	r1, #0
 8007b20:	f001 be4e 	b.w	80097c0 <strtol>

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	; (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000018 	.word	0x20000018

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4d0d      	ldr	r5, [pc, #52]	; (8007b68 <__libc_init_array+0x38>)
 8007b34:	4c0d      	ldr	r4, [pc, #52]	; (8007b6c <__libc_init_array+0x3c>)
 8007b36:	1b64      	subs	r4, r4, r5
 8007b38:	10a4      	asrs	r4, r4, #2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	4d0b      	ldr	r5, [pc, #44]	; (8007b70 <__libc_init_array+0x40>)
 8007b42:	4c0c      	ldr	r4, [pc, #48]	; (8007b74 <__libc_init_array+0x44>)
 8007b44:	f004 fd5a 	bl	800c5fc <_init>
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	0800cd44 	.word	0x0800cd44
 8007b6c:	0800cd44 	.word	0x0800cd44
 8007b70:	0800cd44 	.word	0x0800cd44
 8007b74:	0800cd48 	.word	0x0800cd48

08007b78 <memcpy>:
 8007b78:	440a      	add	r2, r1
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b80:	d100      	bne.n	8007b84 <memcpy+0xc>
 8007b82:	4770      	bx	lr
 8007b84:	b510      	push	{r4, lr}
 8007b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b8e:	4291      	cmp	r1, r2
 8007b90:	d1f9      	bne.n	8007b86 <memcpy+0xe>
 8007b92:	bd10      	pop	{r4, pc}

08007b94 <memset>:
 8007b94:	4402      	add	r2, r0
 8007b96:	4603      	mov	r3, r0
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d100      	bne.n	8007b9e <memset+0xa>
 8007b9c:	4770      	bx	lr
 8007b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba2:	e7f9      	b.n	8007b98 <memset+0x4>

08007ba4 <__cvt>:
 8007ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	ec55 4b10 	vmov	r4, r5, d0
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	460e      	mov	r6, r1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	462b      	mov	r3, r5
 8007bb4:	bfbb      	ittet	lt
 8007bb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bba:	461d      	movlt	r5, r3
 8007bbc:	2300      	movge	r3, #0
 8007bbe:	232d      	movlt	r3, #45	; 0x2d
 8007bc0:	700b      	strb	r3, [r1, #0]
 8007bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bc8:	4691      	mov	r9, r2
 8007bca:	f023 0820 	bic.w	r8, r3, #32
 8007bce:	bfbc      	itt	lt
 8007bd0:	4622      	movlt	r2, r4
 8007bd2:	4614      	movlt	r4, r2
 8007bd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bd8:	d005      	beq.n	8007be6 <__cvt+0x42>
 8007bda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bde:	d100      	bne.n	8007be2 <__cvt+0x3e>
 8007be0:	3601      	adds	r6, #1
 8007be2:	2102      	movs	r1, #2
 8007be4:	e000      	b.n	8007be8 <__cvt+0x44>
 8007be6:	2103      	movs	r1, #3
 8007be8:	ab03      	add	r3, sp, #12
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	ab02      	add	r3, sp, #8
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	ec45 4b10 	vmov	d0, r4, r5
 8007bf4:	4653      	mov	r3, sl
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	f001 ff3a 	bl	8009a70 <_dtoa_r>
 8007bfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c00:	4607      	mov	r7, r0
 8007c02:	d102      	bne.n	8007c0a <__cvt+0x66>
 8007c04:	f019 0f01 	tst.w	r9, #1
 8007c08:	d022      	beq.n	8007c50 <__cvt+0xac>
 8007c0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c0e:	eb07 0906 	add.w	r9, r7, r6
 8007c12:	d110      	bne.n	8007c36 <__cvt+0x92>
 8007c14:	783b      	ldrb	r3, [r7, #0]
 8007c16:	2b30      	cmp	r3, #48	; 0x30
 8007c18:	d10a      	bne.n	8007c30 <__cvt+0x8c>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7f8 ff71 	bl	8000b08 <__aeabi_dcmpeq>
 8007c26:	b918      	cbnz	r0, 8007c30 <__cvt+0x8c>
 8007c28:	f1c6 0601 	rsb	r6, r6, #1
 8007c2c:	f8ca 6000 	str.w	r6, [sl]
 8007c30:	f8da 3000 	ldr.w	r3, [sl]
 8007c34:	4499      	add	r9, r3
 8007c36:	2200      	movs	r2, #0
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 ff63 	bl	8000b08 <__aeabi_dcmpeq>
 8007c42:	b108      	cbz	r0, 8007c48 <__cvt+0xa4>
 8007c44:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c48:	2230      	movs	r2, #48	; 0x30
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	454b      	cmp	r3, r9
 8007c4e:	d307      	bcc.n	8007c60 <__cvt+0xbc>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c54:	1bdb      	subs	r3, r3, r7
 8007c56:	4638      	mov	r0, r7
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	b004      	add	sp, #16
 8007c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c60:	1c59      	adds	r1, r3, #1
 8007c62:	9103      	str	r1, [sp, #12]
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	e7f0      	b.n	8007c4a <__cvt+0xa6>

08007c68 <__exponent>:
 8007c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	bfb8      	it	lt
 8007c70:	4249      	neglt	r1, r1
 8007c72:	f803 2b02 	strb.w	r2, [r3], #2
 8007c76:	bfb4      	ite	lt
 8007c78:	222d      	movlt	r2, #45	; 0x2d
 8007c7a:	222b      	movge	r2, #43	; 0x2b
 8007c7c:	2909      	cmp	r1, #9
 8007c7e:	7042      	strb	r2, [r0, #1]
 8007c80:	dd2a      	ble.n	8007cd8 <__exponent+0x70>
 8007c82:	f10d 0407 	add.w	r4, sp, #7
 8007c86:	46a4      	mov	ip, r4
 8007c88:	270a      	movs	r7, #10
 8007c8a:	46a6      	mov	lr, r4
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c92:	fb07 1516 	mls	r5, r7, r6, r1
 8007c96:	3530      	adds	r5, #48	; 0x30
 8007c98:	2a63      	cmp	r2, #99	; 0x63
 8007c9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	dcf1      	bgt.n	8007c8a <__exponent+0x22>
 8007ca6:	3130      	adds	r1, #48	; 0x30
 8007ca8:	f1ae 0502 	sub.w	r5, lr, #2
 8007cac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cb0:	1c44      	adds	r4, r0, #1
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4561      	cmp	r1, ip
 8007cb6:	d30a      	bcc.n	8007cce <__exponent+0x66>
 8007cb8:	f10d 0209 	add.w	r2, sp, #9
 8007cbc:	eba2 020e 	sub.w	r2, r2, lr
 8007cc0:	4565      	cmp	r5, ip
 8007cc2:	bf88      	it	hi
 8007cc4:	2200      	movhi	r2, #0
 8007cc6:	4413      	add	r3, r2
 8007cc8:	1a18      	subs	r0, r3, r0
 8007cca:	b003      	add	sp, #12
 8007ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007cd6:	e7ed      	b.n	8007cb4 <__exponent+0x4c>
 8007cd8:	2330      	movs	r3, #48	; 0x30
 8007cda:	3130      	adds	r1, #48	; 0x30
 8007cdc:	7083      	strb	r3, [r0, #2]
 8007cde:	70c1      	strb	r1, [r0, #3]
 8007ce0:	1d03      	adds	r3, r0, #4
 8007ce2:	e7f1      	b.n	8007cc8 <__exponent+0x60>

08007ce4 <_printf_float>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	ed2d 8b02 	vpush	{d8}
 8007cec:	b08d      	sub	sp, #52	; 0x34
 8007cee:	460c      	mov	r4, r1
 8007cf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	f003 f9cd 	bl	800b098 <_localeconv_r>
 8007cfe:	f8d0 a000 	ldr.w	sl, [r0]
 8007d02:	4650      	mov	r0, sl
 8007d04:	f7f8 fa84 	bl	8000210 <strlen>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	9305      	str	r3, [sp, #20]
 8007d10:	f8d8 3000 	ldr.w	r3, [r8]
 8007d14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d18:	3307      	adds	r3, #7
 8007d1a:	f023 0307 	bic.w	r3, r3, #7
 8007d1e:	f103 0208 	add.w	r2, r3, #8
 8007d22:	f8c8 2000 	str.w	r2, [r8]
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d36:	9307      	str	r3, [sp, #28]
 8007d38:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d3c:	ee08 0a10 	vmov	s16, r0
 8007d40:	4b9f      	ldr	r3, [pc, #636]	; (8007fc0 <_printf_float+0x2dc>)
 8007d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d46:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4a:	f7f8 ff0f 	bl	8000b6c <__aeabi_dcmpun>
 8007d4e:	bb88      	cbnz	r0, 8007db4 <_printf_float+0xd0>
 8007d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d54:	4b9a      	ldr	r3, [pc, #616]	; (8007fc0 <_printf_float+0x2dc>)
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	f7f8 fee9 	bl	8000b30 <__aeabi_dcmple>
 8007d5e:	bb48      	cbnz	r0, 8007db4 <_printf_float+0xd0>
 8007d60:	2200      	movs	r2, #0
 8007d62:	2300      	movs	r3, #0
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 fed8 	bl	8000b1c <__aeabi_dcmplt>
 8007d6c:	b110      	cbz	r0, 8007d74 <_printf_float+0x90>
 8007d6e:	232d      	movs	r3, #45	; 0x2d
 8007d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d74:	4b93      	ldr	r3, [pc, #588]	; (8007fc4 <_printf_float+0x2e0>)
 8007d76:	4894      	ldr	r0, [pc, #592]	; (8007fc8 <_printf_float+0x2e4>)
 8007d78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d7c:	bf94      	ite	ls
 8007d7e:	4698      	movls	r8, r3
 8007d80:	4680      	movhi	r8, r0
 8007d82:	2303      	movs	r3, #3
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	9b05      	ldr	r3, [sp, #20]
 8007d88:	f023 0204 	bic.w	r2, r3, #4
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	f04f 0900 	mov.w	r9, #0
 8007d92:	9700      	str	r7, [sp, #0]
 8007d94:	4633      	mov	r3, r6
 8007d96:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f000 f9d8 	bl	8008150 <_printf_common>
 8007da0:	3001      	adds	r0, #1
 8007da2:	f040 8090 	bne.w	8007ec6 <_printf_float+0x1e2>
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	b00d      	add	sp, #52	; 0x34
 8007dac:	ecbd 8b02 	vpop	{d8}
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fed6 	bl	8000b6c <__aeabi_dcmpun>
 8007dc0:	b140      	cbz	r0, 8007dd4 <_printf_float+0xf0>
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfbc      	itt	lt
 8007dc8:	232d      	movlt	r3, #45	; 0x2d
 8007dca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dce:	487f      	ldr	r0, [pc, #508]	; (8007fcc <_printf_float+0x2e8>)
 8007dd0:	4b7f      	ldr	r3, [pc, #508]	; (8007fd0 <_printf_float+0x2ec>)
 8007dd2:	e7d1      	b.n	8007d78 <_printf_float+0x94>
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007dda:	9206      	str	r2, [sp, #24]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	d13f      	bne.n	8007e60 <_printf_float+0x17c>
 8007de0:	2306      	movs	r3, #6
 8007de2:	6063      	str	r3, [r4, #4]
 8007de4:	9b05      	ldr	r3, [sp, #20]
 8007de6:	6861      	ldr	r1, [r4, #4]
 8007de8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007dec:	2300      	movs	r3, #0
 8007dee:	9303      	str	r3, [sp, #12]
 8007df0:	ab0a      	add	r3, sp, #40	; 0x28
 8007df2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007df6:	ab09      	add	r3, sp, #36	; 0x24
 8007df8:	ec49 8b10 	vmov	d0, r8, r9
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e04:	4628      	mov	r0, r5
 8007e06:	f7ff fecd 	bl	8007ba4 <__cvt>
 8007e0a:	9b06      	ldr	r3, [sp, #24]
 8007e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e0e:	2b47      	cmp	r3, #71	; 0x47
 8007e10:	4680      	mov	r8, r0
 8007e12:	d108      	bne.n	8007e26 <_printf_float+0x142>
 8007e14:	1cc8      	adds	r0, r1, #3
 8007e16:	db02      	blt.n	8007e1e <_printf_float+0x13a>
 8007e18:	6863      	ldr	r3, [r4, #4]
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	dd41      	ble.n	8007ea2 <_printf_float+0x1be>
 8007e1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e22:	fa5f fb8b 	uxtb.w	fp, fp
 8007e26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e2a:	d820      	bhi.n	8007e6e <_printf_float+0x18a>
 8007e2c:	3901      	subs	r1, #1
 8007e2e:	465a      	mov	r2, fp
 8007e30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e34:	9109      	str	r1, [sp, #36]	; 0x24
 8007e36:	f7ff ff17 	bl	8007c68 <__exponent>
 8007e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e3c:	1813      	adds	r3, r2, r0
 8007e3e:	2a01      	cmp	r2, #1
 8007e40:	4681      	mov	r9, r0
 8007e42:	6123      	str	r3, [r4, #16]
 8007e44:	dc02      	bgt.n	8007e4c <_printf_float+0x168>
 8007e46:	6822      	ldr	r2, [r4, #0]
 8007e48:	07d2      	lsls	r2, r2, #31
 8007e4a:	d501      	bpl.n	8007e50 <_printf_float+0x16c>
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	6123      	str	r3, [r4, #16]
 8007e50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d09c      	beq.n	8007d92 <_printf_float+0xae>
 8007e58:	232d      	movs	r3, #45	; 0x2d
 8007e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5e:	e798      	b.n	8007d92 <_printf_float+0xae>
 8007e60:	9a06      	ldr	r2, [sp, #24]
 8007e62:	2a47      	cmp	r2, #71	; 0x47
 8007e64:	d1be      	bne.n	8007de4 <_printf_float+0x100>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1bc      	bne.n	8007de4 <_printf_float+0x100>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e7b9      	b.n	8007de2 <_printf_float+0xfe>
 8007e6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e72:	d118      	bne.n	8007ea6 <_printf_float+0x1c2>
 8007e74:	2900      	cmp	r1, #0
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	dd0b      	ble.n	8007e92 <_printf_float+0x1ae>
 8007e7a:	6121      	str	r1, [r4, #16]
 8007e7c:	b913      	cbnz	r3, 8007e84 <_printf_float+0x1a0>
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	07d0      	lsls	r0, r2, #31
 8007e82:	d502      	bpl.n	8007e8a <_printf_float+0x1a6>
 8007e84:	3301      	adds	r3, #1
 8007e86:	440b      	add	r3, r1
 8007e88:	6123      	str	r3, [r4, #16]
 8007e8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e8c:	f04f 0900 	mov.w	r9, #0
 8007e90:	e7de      	b.n	8007e50 <_printf_float+0x16c>
 8007e92:	b913      	cbnz	r3, 8007e9a <_printf_float+0x1b6>
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	07d2      	lsls	r2, r2, #31
 8007e98:	d501      	bpl.n	8007e9e <_printf_float+0x1ba>
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	e7f4      	b.n	8007e88 <_printf_float+0x1a4>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e7f2      	b.n	8007e88 <_printf_float+0x1a4>
 8007ea2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea8:	4299      	cmp	r1, r3
 8007eaa:	db05      	blt.n	8007eb8 <_printf_float+0x1d4>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	6121      	str	r1, [r4, #16]
 8007eb0:	07d8      	lsls	r0, r3, #31
 8007eb2:	d5ea      	bpl.n	8007e8a <_printf_float+0x1a6>
 8007eb4:	1c4b      	adds	r3, r1, #1
 8007eb6:	e7e7      	b.n	8007e88 <_printf_float+0x1a4>
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	bfd4      	ite	le
 8007ebc:	f1c1 0202 	rsble	r2, r1, #2
 8007ec0:	2201      	movgt	r2, #1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	e7e0      	b.n	8007e88 <_printf_float+0x1a4>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	055a      	lsls	r2, r3, #21
 8007eca:	d407      	bmi.n	8007edc <_printf_float+0x1f8>
 8007ecc:	6923      	ldr	r3, [r4, #16]
 8007ece:	4642      	mov	r2, r8
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d12c      	bne.n	8007f34 <_printf_float+0x250>
 8007eda:	e764      	b.n	8007da6 <_printf_float+0xc2>
 8007edc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ee0:	f240 80e0 	bls.w	80080a4 <_printf_float+0x3c0>
 8007ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2300      	movs	r3, #0
 8007eec:	f7f8 fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d034      	beq.n	8007f5e <_printf_float+0x27a>
 8007ef4:	4a37      	ldr	r2, [pc, #220]	; (8007fd4 <_printf_float+0x2f0>)
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b8      	blx	r7
 8007efe:	3001      	adds	r0, #1
 8007f00:	f43f af51 	beq.w	8007da6 <_printf_float+0xc2>
 8007f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	db02      	blt.n	8007f12 <_printf_float+0x22e>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	07d8      	lsls	r0, r3, #31
 8007f10:	d510      	bpl.n	8007f34 <_printf_float+0x250>
 8007f12:	ee18 3a10 	vmov	r3, s16
 8007f16:	4652      	mov	r2, sl
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	f43f af41 	beq.w	8007da6 <_printf_float+0xc2>
 8007f24:	f04f 0800 	mov.w	r8, #0
 8007f28:	f104 091a 	add.w	r9, r4, #26
 8007f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	4543      	cmp	r3, r8
 8007f32:	dc09      	bgt.n	8007f48 <_printf_float+0x264>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	079b      	lsls	r3, r3, #30
 8007f38:	f100 8105 	bmi.w	8008146 <_printf_float+0x462>
 8007f3c:	68e0      	ldr	r0, [r4, #12]
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f40:	4298      	cmp	r0, r3
 8007f42:	bfb8      	it	lt
 8007f44:	4618      	movlt	r0, r3
 8007f46:	e730      	b.n	8007daa <_printf_float+0xc6>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	464a      	mov	r2, r9
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b8      	blx	r7
 8007f52:	3001      	adds	r0, #1
 8007f54:	f43f af27 	beq.w	8007da6 <_printf_float+0xc2>
 8007f58:	f108 0801 	add.w	r8, r8, #1
 8007f5c:	e7e6      	b.n	8007f2c <_printf_float+0x248>
 8007f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	dc39      	bgt.n	8007fd8 <_printf_float+0x2f4>
 8007f64:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <_printf_float+0x2f0>)
 8007f66:	2301      	movs	r3, #1
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af19 	beq.w	8007da6 <_printf_float+0xc2>
 8007f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d102      	bne.n	8007f82 <_printf_float+0x29e>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	07d9      	lsls	r1, r3, #31
 8007f80:	d5d8      	bpl.n	8007f34 <_printf_float+0x250>
 8007f82:	ee18 3a10 	vmov	r3, s16
 8007f86:	4652      	mov	r2, sl
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af09 	beq.w	8007da6 <_printf_float+0xc2>
 8007f94:	f04f 0900 	mov.w	r9, #0
 8007f98:	f104 0a1a 	add.w	sl, r4, #26
 8007f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9e:	425b      	negs	r3, r3
 8007fa0:	454b      	cmp	r3, r9
 8007fa2:	dc01      	bgt.n	8007fa8 <_printf_float+0x2c4>
 8007fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa6:	e792      	b.n	8007ece <_printf_float+0x1ea>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4652      	mov	r2, sl
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f aef7 	beq.w	8007da6 <_printf_float+0xc2>
 8007fb8:	f109 0901 	add.w	r9, r9, #1
 8007fbc:	e7ee      	b.n	8007f9c <_printf_float+0x2b8>
 8007fbe:	bf00      	nop
 8007fc0:	7fefffff 	.word	0x7fefffff
 8007fc4:	0800c890 	.word	0x0800c890
 8007fc8:	0800c894 	.word	0x0800c894
 8007fcc:	0800c89c 	.word	0x0800c89c
 8007fd0:	0800c898 	.word	0x0800c898
 8007fd4:	0800c8a0 	.word	0x0800c8a0
 8007fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	bfa8      	it	ge
 8007fe0:	461a      	movge	r2, r3
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	4691      	mov	r9, r2
 8007fe6:	dc37      	bgt.n	8008058 <_printf_float+0x374>
 8007fe8:	f04f 0b00 	mov.w	fp, #0
 8007fec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ff0:	f104 021a 	add.w	r2, r4, #26
 8007ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ff6:	9305      	str	r3, [sp, #20]
 8007ff8:	eba3 0309 	sub.w	r3, r3, r9
 8007ffc:	455b      	cmp	r3, fp
 8007ffe:	dc33      	bgt.n	8008068 <_printf_float+0x384>
 8008000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008004:	429a      	cmp	r2, r3
 8008006:	db3b      	blt.n	8008080 <_printf_float+0x39c>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	07da      	lsls	r2, r3, #31
 800800c:	d438      	bmi.n	8008080 <_printf_float+0x39c>
 800800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008010:	9a05      	ldr	r2, [sp, #20]
 8008012:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008014:	1a9a      	subs	r2, r3, r2
 8008016:	eba3 0901 	sub.w	r9, r3, r1
 800801a:	4591      	cmp	r9, r2
 800801c:	bfa8      	it	ge
 800801e:	4691      	movge	r9, r2
 8008020:	f1b9 0f00 	cmp.w	r9, #0
 8008024:	dc35      	bgt.n	8008092 <_printf_float+0x3ae>
 8008026:	f04f 0800 	mov.w	r8, #0
 800802a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800802e:	f104 0a1a 	add.w	sl, r4, #26
 8008032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	eba3 0309 	sub.w	r3, r3, r9
 800803c:	4543      	cmp	r3, r8
 800803e:	f77f af79 	ble.w	8007f34 <_printf_float+0x250>
 8008042:	2301      	movs	r3, #1
 8008044:	4652      	mov	r2, sl
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f aeaa 	beq.w	8007da6 <_printf_float+0xc2>
 8008052:	f108 0801 	add.w	r8, r8, #1
 8008056:	e7ec      	b.n	8008032 <_printf_float+0x34e>
 8008058:	4613      	mov	r3, r2
 800805a:	4631      	mov	r1, r6
 800805c:	4642      	mov	r2, r8
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	d1c0      	bne.n	8007fe8 <_printf_float+0x304>
 8008066:	e69e      	b.n	8007da6 <_printf_float+0xc2>
 8008068:	2301      	movs	r3, #1
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	9205      	str	r2, [sp, #20]
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	f43f ae97 	beq.w	8007da6 <_printf_float+0xc2>
 8008078:	9a05      	ldr	r2, [sp, #20]
 800807a:	f10b 0b01 	add.w	fp, fp, #1
 800807e:	e7b9      	b.n	8007ff4 <_printf_float+0x310>
 8008080:	ee18 3a10 	vmov	r3, s16
 8008084:	4652      	mov	r2, sl
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	d1be      	bne.n	800800e <_printf_float+0x32a>
 8008090:	e689      	b.n	8007da6 <_printf_float+0xc2>
 8008092:	9a05      	ldr	r2, [sp, #20]
 8008094:	464b      	mov	r3, r9
 8008096:	4442      	add	r2, r8
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	d1c1      	bne.n	8008026 <_printf_float+0x342>
 80080a2:	e680      	b.n	8007da6 <_printf_float+0xc2>
 80080a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080a6:	2a01      	cmp	r2, #1
 80080a8:	dc01      	bgt.n	80080ae <_printf_float+0x3ca>
 80080aa:	07db      	lsls	r3, r3, #31
 80080ac:	d538      	bpl.n	8008120 <_printf_float+0x43c>
 80080ae:	2301      	movs	r3, #1
 80080b0:	4642      	mov	r2, r8
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f ae74 	beq.w	8007da6 <_printf_float+0xc2>
 80080be:	ee18 3a10 	vmov	r3, s16
 80080c2:	4652      	mov	r2, sl
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f ae6b 	beq.w	8007da6 <_printf_float+0xc2>
 80080d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080d4:	2200      	movs	r2, #0
 80080d6:	2300      	movs	r3, #0
 80080d8:	f7f8 fd16 	bl	8000b08 <__aeabi_dcmpeq>
 80080dc:	b9d8      	cbnz	r0, 8008116 <_printf_float+0x432>
 80080de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e0:	f108 0201 	add.w	r2, r8, #1
 80080e4:	3b01      	subs	r3, #1
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	d10e      	bne.n	800810e <_printf_float+0x42a>
 80080f0:	e659      	b.n	8007da6 <_printf_float+0xc2>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4652      	mov	r2, sl
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f ae52 	beq.w	8007da6 <_printf_float+0xc2>
 8008102:	f108 0801 	add.w	r8, r8, #1
 8008106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008108:	3b01      	subs	r3, #1
 800810a:	4543      	cmp	r3, r8
 800810c:	dcf1      	bgt.n	80080f2 <_printf_float+0x40e>
 800810e:	464b      	mov	r3, r9
 8008110:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008114:	e6dc      	b.n	8007ed0 <_printf_float+0x1ec>
 8008116:	f04f 0800 	mov.w	r8, #0
 800811a:	f104 0a1a 	add.w	sl, r4, #26
 800811e:	e7f2      	b.n	8008106 <_printf_float+0x422>
 8008120:	2301      	movs	r3, #1
 8008122:	4642      	mov	r2, r8
 8008124:	e7df      	b.n	80080e6 <_printf_float+0x402>
 8008126:	2301      	movs	r3, #1
 8008128:	464a      	mov	r2, r9
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f ae38 	beq.w	8007da6 <_printf_float+0xc2>
 8008136:	f108 0801 	add.w	r8, r8, #1
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800813e:	1a5b      	subs	r3, r3, r1
 8008140:	4543      	cmp	r3, r8
 8008142:	dcf0      	bgt.n	8008126 <_printf_float+0x442>
 8008144:	e6fa      	b.n	8007f3c <_printf_float+0x258>
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	f104 0919 	add.w	r9, r4, #25
 800814e:	e7f4      	b.n	800813a <_printf_float+0x456>

08008150 <_printf_common>:
 8008150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	4616      	mov	r6, r2
 8008156:	4699      	mov	r9, r3
 8008158:	688a      	ldr	r2, [r1, #8]
 800815a:	690b      	ldr	r3, [r1, #16]
 800815c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008160:	4293      	cmp	r3, r2
 8008162:	bfb8      	it	lt
 8008164:	4613      	movlt	r3, r2
 8008166:	6033      	str	r3, [r6, #0]
 8008168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800816c:	4607      	mov	r7, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b10a      	cbz	r2, 8008176 <_printf_common+0x26>
 8008172:	3301      	adds	r3, #1
 8008174:	6033      	str	r3, [r6, #0]
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	0699      	lsls	r1, r3, #26
 800817a:	bf42      	ittt	mi
 800817c:	6833      	ldrmi	r3, [r6, #0]
 800817e:	3302      	addmi	r3, #2
 8008180:	6033      	strmi	r3, [r6, #0]
 8008182:	6825      	ldr	r5, [r4, #0]
 8008184:	f015 0506 	ands.w	r5, r5, #6
 8008188:	d106      	bne.n	8008198 <_printf_common+0x48>
 800818a:	f104 0a19 	add.w	sl, r4, #25
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	6832      	ldr	r2, [r6, #0]
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	42ab      	cmp	r3, r5
 8008196:	dc26      	bgt.n	80081e6 <_printf_common+0x96>
 8008198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800819c:	1e13      	subs	r3, r2, #0
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	bf18      	it	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	0692      	lsls	r2, r2, #26
 80081a6:	d42b      	bmi.n	8008200 <_printf_common+0xb0>
 80081a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ac:	4649      	mov	r1, r9
 80081ae:	4638      	mov	r0, r7
 80081b0:	47c0      	blx	r8
 80081b2:	3001      	adds	r0, #1
 80081b4:	d01e      	beq.n	80081f4 <_printf_common+0xa4>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	68e5      	ldr	r5, [r4, #12]
 80081ba:	6832      	ldr	r2, [r6, #0]
 80081bc:	f003 0306 	and.w	r3, r3, #6
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	bf08      	it	eq
 80081c4:	1aad      	subeq	r5, r5, r2
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	bf0c      	ite	eq
 80081cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d0:	2500      	movne	r5, #0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bfc4      	itt	gt
 80081d6:	1a9b      	subgt	r3, r3, r2
 80081d8:	18ed      	addgt	r5, r5, r3
 80081da:	2600      	movs	r6, #0
 80081dc:	341a      	adds	r4, #26
 80081de:	42b5      	cmp	r5, r6
 80081e0:	d11a      	bne.n	8008218 <_printf_common+0xc8>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e008      	b.n	80081f8 <_printf_common+0xa8>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	4649      	mov	r1, r9
 80081ec:	4638      	mov	r0, r7
 80081ee:	47c0      	blx	r8
 80081f0:	3001      	adds	r0, #1
 80081f2:	d103      	bne.n	80081fc <_printf_common+0xac>
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7c6      	b.n	800818e <_printf_common+0x3e>
 8008200:	18e1      	adds	r1, r4, r3
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	2030      	movs	r0, #48	; 0x30
 8008206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800820a:	4422      	add	r2, r4
 800820c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008214:	3302      	adds	r3, #2
 8008216:	e7c7      	b.n	80081a8 <_printf_common+0x58>
 8008218:	2301      	movs	r3, #1
 800821a:	4622      	mov	r2, r4
 800821c:	4649      	mov	r1, r9
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	3001      	adds	r0, #1
 8008224:	d0e6      	beq.n	80081f4 <_printf_common+0xa4>
 8008226:	3601      	adds	r6, #1
 8008228:	e7d9      	b.n	80081de <_printf_common+0x8e>
	...

0800822c <_printf_i>:
 800822c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	7e0f      	ldrb	r7, [r1, #24]
 8008232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008234:	2f78      	cmp	r7, #120	; 0x78
 8008236:	4691      	mov	r9, r2
 8008238:	4680      	mov	r8, r0
 800823a:	460c      	mov	r4, r1
 800823c:	469a      	mov	sl, r3
 800823e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008242:	d807      	bhi.n	8008254 <_printf_i+0x28>
 8008244:	2f62      	cmp	r7, #98	; 0x62
 8008246:	d80a      	bhi.n	800825e <_printf_i+0x32>
 8008248:	2f00      	cmp	r7, #0
 800824a:	f000 80d8 	beq.w	80083fe <_printf_i+0x1d2>
 800824e:	2f58      	cmp	r7, #88	; 0x58
 8008250:	f000 80a3 	beq.w	800839a <_printf_i+0x16e>
 8008254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800825c:	e03a      	b.n	80082d4 <_printf_i+0xa8>
 800825e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008262:	2b15      	cmp	r3, #21
 8008264:	d8f6      	bhi.n	8008254 <_printf_i+0x28>
 8008266:	a101      	add	r1, pc, #4	; (adr r1, 800826c <_printf_i+0x40>)
 8008268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082d9 	.word	0x080082d9
 8008274:	08008255 	.word	0x08008255
 8008278:	08008255 	.word	0x08008255
 800827c:	08008255 	.word	0x08008255
 8008280:	08008255 	.word	0x08008255
 8008284:	080082d9 	.word	0x080082d9
 8008288:	08008255 	.word	0x08008255
 800828c:	08008255 	.word	0x08008255
 8008290:	08008255 	.word	0x08008255
 8008294:	08008255 	.word	0x08008255
 8008298:	080083e5 	.word	0x080083e5
 800829c:	08008309 	.word	0x08008309
 80082a0:	080083c7 	.word	0x080083c7
 80082a4:	08008255 	.word	0x08008255
 80082a8:	08008255 	.word	0x08008255
 80082ac:	08008407 	.word	0x08008407
 80082b0:	08008255 	.word	0x08008255
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008255 	.word	0x08008255
 80082bc:	08008255 	.word	0x08008255
 80082c0:	080083cf 	.word	0x080083cf
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	602a      	str	r2, [r5, #0]
 80082cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0a3      	b.n	8008420 <_printf_i+0x1f4>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	6829      	ldr	r1, [r5, #0]
 80082dc:	0606      	lsls	r6, r0, #24
 80082de:	f101 0304 	add.w	r3, r1, #4
 80082e2:	d50a      	bpl.n	80082fa <_printf_i+0xce>
 80082e4:	680e      	ldr	r6, [r1, #0]
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	da03      	bge.n	80082f4 <_printf_i+0xc8>
 80082ec:	232d      	movs	r3, #45	; 0x2d
 80082ee:	4276      	negs	r6, r6
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	485e      	ldr	r0, [pc, #376]	; (8008470 <_printf_i+0x244>)
 80082f6:	230a      	movs	r3, #10
 80082f8:	e019      	b.n	800832e <_printf_i+0x102>
 80082fa:	680e      	ldr	r6, [r1, #0]
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008302:	bf18      	it	ne
 8008304:	b236      	sxthne	r6, r6
 8008306:	e7ef      	b.n	80082e8 <_printf_i+0xbc>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	6029      	str	r1, [r5, #0]
 8008310:	0601      	lsls	r1, r0, #24
 8008312:	d501      	bpl.n	8008318 <_printf_i+0xec>
 8008314:	681e      	ldr	r6, [r3, #0]
 8008316:	e002      	b.n	800831e <_printf_i+0xf2>
 8008318:	0646      	lsls	r6, r0, #25
 800831a:	d5fb      	bpl.n	8008314 <_printf_i+0xe8>
 800831c:	881e      	ldrh	r6, [r3, #0]
 800831e:	4854      	ldr	r0, [pc, #336]	; (8008470 <_printf_i+0x244>)
 8008320:	2f6f      	cmp	r7, #111	; 0x6f
 8008322:	bf0c      	ite	eq
 8008324:	2308      	moveq	r3, #8
 8008326:	230a      	movne	r3, #10
 8008328:	2100      	movs	r1, #0
 800832a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800832e:	6865      	ldr	r5, [r4, #4]
 8008330:	60a5      	str	r5, [r4, #8]
 8008332:	2d00      	cmp	r5, #0
 8008334:	bfa2      	ittt	ge
 8008336:	6821      	ldrge	r1, [r4, #0]
 8008338:	f021 0104 	bicge.w	r1, r1, #4
 800833c:	6021      	strge	r1, [r4, #0]
 800833e:	b90e      	cbnz	r6, 8008344 <_printf_i+0x118>
 8008340:	2d00      	cmp	r5, #0
 8008342:	d04d      	beq.n	80083e0 <_printf_i+0x1b4>
 8008344:	4615      	mov	r5, r2
 8008346:	fbb6 f1f3 	udiv	r1, r6, r3
 800834a:	fb03 6711 	mls	r7, r3, r1, r6
 800834e:	5dc7      	ldrb	r7, [r0, r7]
 8008350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008354:	4637      	mov	r7, r6
 8008356:	42bb      	cmp	r3, r7
 8008358:	460e      	mov	r6, r1
 800835a:	d9f4      	bls.n	8008346 <_printf_i+0x11a>
 800835c:	2b08      	cmp	r3, #8
 800835e:	d10b      	bne.n	8008378 <_printf_i+0x14c>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	07de      	lsls	r6, r3, #31
 8008364:	d508      	bpl.n	8008378 <_printf_i+0x14c>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	6861      	ldr	r1, [r4, #4]
 800836a:	4299      	cmp	r1, r3
 800836c:	bfde      	ittt	le
 800836e:	2330      	movle	r3, #48	; 0x30
 8008370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008378:	1b52      	subs	r2, r2, r5
 800837a:	6122      	str	r2, [r4, #16]
 800837c:	f8cd a000 	str.w	sl, [sp]
 8008380:	464b      	mov	r3, r9
 8008382:	aa03      	add	r2, sp, #12
 8008384:	4621      	mov	r1, r4
 8008386:	4640      	mov	r0, r8
 8008388:	f7ff fee2 	bl	8008150 <_printf_common>
 800838c:	3001      	adds	r0, #1
 800838e:	d14c      	bne.n	800842a <_printf_i+0x1fe>
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	b004      	add	sp, #16
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	4835      	ldr	r0, [pc, #212]	; (8008470 <_printf_i+0x244>)
 800839c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083a0:	6829      	ldr	r1, [r5, #0]
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80083a8:	6029      	str	r1, [r5, #0]
 80083aa:	061d      	lsls	r5, r3, #24
 80083ac:	d514      	bpl.n	80083d8 <_printf_i+0x1ac>
 80083ae:	07df      	lsls	r7, r3, #31
 80083b0:	bf44      	itt	mi
 80083b2:	f043 0320 	orrmi.w	r3, r3, #32
 80083b6:	6023      	strmi	r3, [r4, #0]
 80083b8:	b91e      	cbnz	r6, 80083c2 <_printf_i+0x196>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	f023 0320 	bic.w	r3, r3, #32
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	2310      	movs	r3, #16
 80083c4:	e7b0      	b.n	8008328 <_printf_i+0xfc>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	2378      	movs	r3, #120	; 0x78
 80083d0:	4828      	ldr	r0, [pc, #160]	; (8008474 <_printf_i+0x248>)
 80083d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083d6:	e7e3      	b.n	80083a0 <_printf_i+0x174>
 80083d8:	0659      	lsls	r1, r3, #25
 80083da:	bf48      	it	mi
 80083dc:	b2b6      	uxthmi	r6, r6
 80083de:	e7e6      	b.n	80083ae <_printf_i+0x182>
 80083e0:	4615      	mov	r5, r2
 80083e2:	e7bb      	b.n	800835c <_printf_i+0x130>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	6826      	ldr	r6, [r4, #0]
 80083e8:	6961      	ldr	r1, [r4, #20]
 80083ea:	1d18      	adds	r0, r3, #4
 80083ec:	6028      	str	r0, [r5, #0]
 80083ee:	0635      	lsls	r5, r6, #24
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	d501      	bpl.n	80083f8 <_printf_i+0x1cc>
 80083f4:	6019      	str	r1, [r3, #0]
 80083f6:	e002      	b.n	80083fe <_printf_i+0x1d2>
 80083f8:	0670      	lsls	r0, r6, #25
 80083fa:	d5fb      	bpl.n	80083f4 <_printf_i+0x1c8>
 80083fc:	8019      	strh	r1, [r3, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	4615      	mov	r5, r2
 8008404:	e7ba      	b.n	800837c <_printf_i+0x150>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	602a      	str	r2, [r5, #0]
 800840c:	681d      	ldr	r5, [r3, #0]
 800840e:	6862      	ldr	r2, [r4, #4]
 8008410:	2100      	movs	r1, #0
 8008412:	4628      	mov	r0, r5
 8008414:	f7f7 ff04 	bl	8000220 <memchr>
 8008418:	b108      	cbz	r0, 800841e <_printf_i+0x1f2>
 800841a:	1b40      	subs	r0, r0, r5
 800841c:	6060      	str	r0, [r4, #4]
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	2300      	movs	r3, #0
 8008424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008428:	e7a8      	b.n	800837c <_printf_i+0x150>
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	462a      	mov	r2, r5
 800842e:	4649      	mov	r1, r9
 8008430:	4640      	mov	r0, r8
 8008432:	47d0      	blx	sl
 8008434:	3001      	adds	r0, #1
 8008436:	d0ab      	beq.n	8008390 <_printf_i+0x164>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	079b      	lsls	r3, r3, #30
 800843c:	d413      	bmi.n	8008466 <_printf_i+0x23a>
 800843e:	68e0      	ldr	r0, [r4, #12]
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	4298      	cmp	r0, r3
 8008444:	bfb8      	it	lt
 8008446:	4618      	movlt	r0, r3
 8008448:	e7a4      	b.n	8008394 <_printf_i+0x168>
 800844a:	2301      	movs	r3, #1
 800844c:	4632      	mov	r2, r6
 800844e:	4649      	mov	r1, r9
 8008450:	4640      	mov	r0, r8
 8008452:	47d0      	blx	sl
 8008454:	3001      	adds	r0, #1
 8008456:	d09b      	beq.n	8008390 <_printf_i+0x164>
 8008458:	3501      	adds	r5, #1
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	9903      	ldr	r1, [sp, #12]
 800845e:	1a5b      	subs	r3, r3, r1
 8008460:	42ab      	cmp	r3, r5
 8008462:	dcf2      	bgt.n	800844a <_printf_i+0x21e>
 8008464:	e7eb      	b.n	800843e <_printf_i+0x212>
 8008466:	2500      	movs	r5, #0
 8008468:	f104 0619 	add.w	r6, r4, #25
 800846c:	e7f5      	b.n	800845a <_printf_i+0x22e>
 800846e:	bf00      	nop
 8008470:	0800c8a2 	.word	0x0800c8a2
 8008474:	0800c8b3 	.word	0x0800c8b3

08008478 <_scanf_float>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	b087      	sub	sp, #28
 800847e:	4617      	mov	r7, r2
 8008480:	9303      	str	r3, [sp, #12]
 8008482:	688b      	ldr	r3, [r1, #8]
 8008484:	1e5a      	subs	r2, r3, #1
 8008486:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800848a:	bf83      	ittte	hi
 800848c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008490:	195b      	addhi	r3, r3, r5
 8008492:	9302      	strhi	r3, [sp, #8]
 8008494:	2300      	movls	r3, #0
 8008496:	bf86      	itte	hi
 8008498:	f240 135d 	movwhi	r3, #349	; 0x15d
 800849c:	608b      	strhi	r3, [r1, #8]
 800849e:	9302      	strls	r3, [sp, #8]
 80084a0:	680b      	ldr	r3, [r1, #0]
 80084a2:	468b      	mov	fp, r1
 80084a4:	2500      	movs	r5, #0
 80084a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80084ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084b2:	4680      	mov	r8, r0
 80084b4:	460c      	mov	r4, r1
 80084b6:	465e      	mov	r6, fp
 80084b8:	46aa      	mov	sl, r5
 80084ba:	46a9      	mov	r9, r5
 80084bc:	9501      	str	r5, [sp, #4]
 80084be:	68a2      	ldr	r2, [r4, #8]
 80084c0:	b152      	cbz	r2, 80084d8 <_scanf_float+0x60>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b4e      	cmp	r3, #78	; 0x4e
 80084c8:	d864      	bhi.n	8008594 <_scanf_float+0x11c>
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d83c      	bhi.n	8008548 <_scanf_float+0xd0>
 80084ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80084d2:	b2c8      	uxtb	r0, r1
 80084d4:	280e      	cmp	r0, #14
 80084d6:	d93a      	bls.n	800854e <_scanf_float+0xd6>
 80084d8:	f1b9 0f00 	cmp.w	r9, #0
 80084dc:	d003      	beq.n	80084e6 <_scanf_float+0x6e>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ea:	f1ba 0f01 	cmp.w	sl, #1
 80084ee:	f200 8113 	bhi.w	8008718 <_scanf_float+0x2a0>
 80084f2:	455e      	cmp	r6, fp
 80084f4:	f200 8105 	bhi.w	8008702 <_scanf_float+0x28a>
 80084f8:	2501      	movs	r5, #1
 80084fa:	4628      	mov	r0, r5
 80084fc:	b007      	add	sp, #28
 80084fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008502:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008506:	2a0d      	cmp	r2, #13
 8008508:	d8e6      	bhi.n	80084d8 <_scanf_float+0x60>
 800850a:	a101      	add	r1, pc, #4	; (adr r1, 8008510 <_scanf_float+0x98>)
 800850c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008510:	0800864f 	.word	0x0800864f
 8008514:	080084d9 	.word	0x080084d9
 8008518:	080084d9 	.word	0x080084d9
 800851c:	080084d9 	.word	0x080084d9
 8008520:	080086af 	.word	0x080086af
 8008524:	08008687 	.word	0x08008687
 8008528:	080084d9 	.word	0x080084d9
 800852c:	080084d9 	.word	0x080084d9
 8008530:	0800865d 	.word	0x0800865d
 8008534:	080084d9 	.word	0x080084d9
 8008538:	080084d9 	.word	0x080084d9
 800853c:	080084d9 	.word	0x080084d9
 8008540:	080084d9 	.word	0x080084d9
 8008544:	08008615 	.word	0x08008615
 8008548:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800854c:	e7db      	b.n	8008506 <_scanf_float+0x8e>
 800854e:	290e      	cmp	r1, #14
 8008550:	d8c2      	bhi.n	80084d8 <_scanf_float+0x60>
 8008552:	a001      	add	r0, pc, #4	; (adr r0, 8008558 <_scanf_float+0xe0>)
 8008554:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008558:	08008607 	.word	0x08008607
 800855c:	080084d9 	.word	0x080084d9
 8008560:	08008607 	.word	0x08008607
 8008564:	0800869b 	.word	0x0800869b
 8008568:	080084d9 	.word	0x080084d9
 800856c:	080085b5 	.word	0x080085b5
 8008570:	080085f1 	.word	0x080085f1
 8008574:	080085f1 	.word	0x080085f1
 8008578:	080085f1 	.word	0x080085f1
 800857c:	080085f1 	.word	0x080085f1
 8008580:	080085f1 	.word	0x080085f1
 8008584:	080085f1 	.word	0x080085f1
 8008588:	080085f1 	.word	0x080085f1
 800858c:	080085f1 	.word	0x080085f1
 8008590:	080085f1 	.word	0x080085f1
 8008594:	2b6e      	cmp	r3, #110	; 0x6e
 8008596:	d809      	bhi.n	80085ac <_scanf_float+0x134>
 8008598:	2b60      	cmp	r3, #96	; 0x60
 800859a:	d8b2      	bhi.n	8008502 <_scanf_float+0x8a>
 800859c:	2b54      	cmp	r3, #84	; 0x54
 800859e:	d077      	beq.n	8008690 <_scanf_float+0x218>
 80085a0:	2b59      	cmp	r3, #89	; 0x59
 80085a2:	d199      	bne.n	80084d8 <_scanf_float+0x60>
 80085a4:	2d07      	cmp	r5, #7
 80085a6:	d197      	bne.n	80084d8 <_scanf_float+0x60>
 80085a8:	2508      	movs	r5, #8
 80085aa:	e029      	b.n	8008600 <_scanf_float+0x188>
 80085ac:	2b74      	cmp	r3, #116	; 0x74
 80085ae:	d06f      	beq.n	8008690 <_scanf_float+0x218>
 80085b0:	2b79      	cmp	r3, #121	; 0x79
 80085b2:	e7f6      	b.n	80085a2 <_scanf_float+0x12a>
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	05c8      	lsls	r0, r1, #23
 80085b8:	d51a      	bpl.n	80085f0 <_scanf_float+0x178>
 80085ba:	9b02      	ldr	r3, [sp, #8]
 80085bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085c0:	6021      	str	r1, [r4, #0]
 80085c2:	f109 0901 	add.w	r9, r9, #1
 80085c6:	b11b      	cbz	r3, 80085d0 <_scanf_float+0x158>
 80085c8:	3b01      	subs	r3, #1
 80085ca:	3201      	adds	r2, #1
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	60a2      	str	r2, [r4, #8]
 80085d0:	68a3      	ldr	r3, [r4, #8]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	60a3      	str	r3, [r4, #8]
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	3301      	adds	r3, #1
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3b01      	subs	r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	f340 8084 	ble.w	80086f0 <_scanf_float+0x278>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3301      	adds	r3, #1
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	e766      	b.n	80084be <_scanf_float+0x46>
 80085f0:	eb1a 0f05 	cmn.w	sl, r5
 80085f4:	f47f af70 	bne.w	80084d8 <_scanf_float+0x60>
 80085f8:	6822      	ldr	r2, [r4, #0]
 80085fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	f806 3b01 	strb.w	r3, [r6], #1
 8008604:	e7e4      	b.n	80085d0 <_scanf_float+0x158>
 8008606:	6822      	ldr	r2, [r4, #0]
 8008608:	0610      	lsls	r0, r2, #24
 800860a:	f57f af65 	bpl.w	80084d8 <_scanf_float+0x60>
 800860e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008612:	e7f4      	b.n	80085fe <_scanf_float+0x186>
 8008614:	f1ba 0f00 	cmp.w	sl, #0
 8008618:	d10e      	bne.n	8008638 <_scanf_float+0x1c0>
 800861a:	f1b9 0f00 	cmp.w	r9, #0
 800861e:	d10e      	bne.n	800863e <_scanf_float+0x1c6>
 8008620:	6822      	ldr	r2, [r4, #0]
 8008622:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008626:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800862a:	d108      	bne.n	800863e <_scanf_float+0x1c6>
 800862c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008630:	6022      	str	r2, [r4, #0]
 8008632:	f04f 0a01 	mov.w	sl, #1
 8008636:	e7e3      	b.n	8008600 <_scanf_float+0x188>
 8008638:	f1ba 0f02 	cmp.w	sl, #2
 800863c:	d055      	beq.n	80086ea <_scanf_float+0x272>
 800863e:	2d01      	cmp	r5, #1
 8008640:	d002      	beq.n	8008648 <_scanf_float+0x1d0>
 8008642:	2d04      	cmp	r5, #4
 8008644:	f47f af48 	bne.w	80084d8 <_scanf_float+0x60>
 8008648:	3501      	adds	r5, #1
 800864a:	b2ed      	uxtb	r5, r5
 800864c:	e7d8      	b.n	8008600 <_scanf_float+0x188>
 800864e:	f1ba 0f01 	cmp.w	sl, #1
 8008652:	f47f af41 	bne.w	80084d8 <_scanf_float+0x60>
 8008656:	f04f 0a02 	mov.w	sl, #2
 800865a:	e7d1      	b.n	8008600 <_scanf_float+0x188>
 800865c:	b97d      	cbnz	r5, 800867e <_scanf_float+0x206>
 800865e:	f1b9 0f00 	cmp.w	r9, #0
 8008662:	f47f af3c 	bne.w	80084de <_scanf_float+0x66>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800866c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008670:	f47f af39 	bne.w	80084e6 <_scanf_float+0x6e>
 8008674:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008678:	6022      	str	r2, [r4, #0]
 800867a:	2501      	movs	r5, #1
 800867c:	e7c0      	b.n	8008600 <_scanf_float+0x188>
 800867e:	2d03      	cmp	r5, #3
 8008680:	d0e2      	beq.n	8008648 <_scanf_float+0x1d0>
 8008682:	2d05      	cmp	r5, #5
 8008684:	e7de      	b.n	8008644 <_scanf_float+0x1cc>
 8008686:	2d02      	cmp	r5, #2
 8008688:	f47f af26 	bne.w	80084d8 <_scanf_float+0x60>
 800868c:	2503      	movs	r5, #3
 800868e:	e7b7      	b.n	8008600 <_scanf_float+0x188>
 8008690:	2d06      	cmp	r5, #6
 8008692:	f47f af21 	bne.w	80084d8 <_scanf_float+0x60>
 8008696:	2507      	movs	r5, #7
 8008698:	e7b2      	b.n	8008600 <_scanf_float+0x188>
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	0591      	lsls	r1, r2, #22
 800869e:	f57f af1b 	bpl.w	80084d8 <_scanf_float+0x60>
 80086a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80086ac:	e7a8      	b.n	8008600 <_scanf_float+0x188>
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086b8:	d006      	beq.n	80086c8 <_scanf_float+0x250>
 80086ba:	0550      	lsls	r0, r2, #21
 80086bc:	f57f af0c 	bpl.w	80084d8 <_scanf_float+0x60>
 80086c0:	f1b9 0f00 	cmp.w	r9, #0
 80086c4:	f43f af0f 	beq.w	80084e6 <_scanf_float+0x6e>
 80086c8:	0591      	lsls	r1, r2, #22
 80086ca:	bf58      	it	pl
 80086cc:	9901      	ldrpl	r1, [sp, #4]
 80086ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086d2:	bf58      	it	pl
 80086d4:	eba9 0101 	subpl.w	r1, r9, r1
 80086d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80086dc:	bf58      	it	pl
 80086de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80086e2:	6022      	str	r2, [r4, #0]
 80086e4:	f04f 0900 	mov.w	r9, #0
 80086e8:	e78a      	b.n	8008600 <_scanf_float+0x188>
 80086ea:	f04f 0a03 	mov.w	sl, #3
 80086ee:	e787      	b.n	8008600 <_scanf_float+0x188>
 80086f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086f4:	4639      	mov	r1, r7
 80086f6:	4640      	mov	r0, r8
 80086f8:	4798      	blx	r3
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f43f aedf 	beq.w	80084be <_scanf_float+0x46>
 8008700:	e6ea      	b.n	80084d8 <_scanf_float+0x60>
 8008702:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008706:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800870a:	463a      	mov	r2, r7
 800870c:	4640      	mov	r0, r8
 800870e:	4798      	blx	r3
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	3b01      	subs	r3, #1
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	e6ec      	b.n	80084f2 <_scanf_float+0x7a>
 8008718:	1e6b      	subs	r3, r5, #1
 800871a:	2b06      	cmp	r3, #6
 800871c:	d825      	bhi.n	800876a <_scanf_float+0x2f2>
 800871e:	2d02      	cmp	r5, #2
 8008720:	d836      	bhi.n	8008790 <_scanf_float+0x318>
 8008722:	455e      	cmp	r6, fp
 8008724:	f67f aee8 	bls.w	80084f8 <_scanf_float+0x80>
 8008728:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800872c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008730:	463a      	mov	r2, r7
 8008732:	4640      	mov	r0, r8
 8008734:	4798      	blx	r3
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	3b01      	subs	r3, #1
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	e7f1      	b.n	8008722 <_scanf_float+0x2aa>
 800873e:	9802      	ldr	r0, [sp, #8]
 8008740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008744:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008748:	9002      	str	r0, [sp, #8]
 800874a:	463a      	mov	r2, r7
 800874c:	4640      	mov	r0, r8
 800874e:	4798      	blx	r3
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	3b01      	subs	r3, #1
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800875a:	fa5f fa8a 	uxtb.w	sl, sl
 800875e:	f1ba 0f02 	cmp.w	sl, #2
 8008762:	d1ec      	bne.n	800873e <_scanf_float+0x2c6>
 8008764:	3d03      	subs	r5, #3
 8008766:	b2ed      	uxtb	r5, r5
 8008768:	1b76      	subs	r6, r6, r5
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	05da      	lsls	r2, r3, #23
 800876e:	d52f      	bpl.n	80087d0 <_scanf_float+0x358>
 8008770:	055b      	lsls	r3, r3, #21
 8008772:	d510      	bpl.n	8008796 <_scanf_float+0x31e>
 8008774:	455e      	cmp	r6, fp
 8008776:	f67f aebf 	bls.w	80084f8 <_scanf_float+0x80>
 800877a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800877e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008782:	463a      	mov	r2, r7
 8008784:	4640      	mov	r0, r8
 8008786:	4798      	blx	r3
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	3b01      	subs	r3, #1
 800878c:	6123      	str	r3, [r4, #16]
 800878e:	e7f1      	b.n	8008774 <_scanf_float+0x2fc>
 8008790:	46aa      	mov	sl, r5
 8008792:	9602      	str	r6, [sp, #8]
 8008794:	e7df      	b.n	8008756 <_scanf_float+0x2de>
 8008796:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	2965      	cmp	r1, #101	; 0x65
 800879e:	f103 33ff 	add.w	r3, r3, #4294967295
 80087a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	d00c      	beq.n	80087c4 <_scanf_float+0x34c>
 80087aa:	2945      	cmp	r1, #69	; 0x45
 80087ac:	d00a      	beq.n	80087c4 <_scanf_float+0x34c>
 80087ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087b2:	463a      	mov	r2, r7
 80087b4:	4640      	mov	r0, r8
 80087b6:	4798      	blx	r3
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087be:	3b01      	subs	r3, #1
 80087c0:	1eb5      	subs	r5, r6, #2
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087c8:	463a      	mov	r2, r7
 80087ca:	4640      	mov	r0, r8
 80087cc:	4798      	blx	r3
 80087ce:	462e      	mov	r6, r5
 80087d0:	6825      	ldr	r5, [r4, #0]
 80087d2:	f015 0510 	ands.w	r5, r5, #16
 80087d6:	d159      	bne.n	800888c <_scanf_float+0x414>
 80087d8:	7035      	strb	r5, [r6, #0]
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e4:	d11b      	bne.n	800881e <_scanf_float+0x3a6>
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	454b      	cmp	r3, r9
 80087ea:	eba3 0209 	sub.w	r2, r3, r9
 80087ee:	d123      	bne.n	8008838 <_scanf_float+0x3c0>
 80087f0:	2200      	movs	r2, #0
 80087f2:	4659      	mov	r1, fp
 80087f4:	4640      	mov	r0, r8
 80087f6:	f000 ff59 	bl	80096ac <_strtod_r>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	f012 0f02 	tst.w	r2, #2
 8008802:	ec57 6b10 	vmov	r6, r7, d0
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	d021      	beq.n	800884e <_scanf_float+0x3d6>
 800880a:	9903      	ldr	r1, [sp, #12]
 800880c:	1d1a      	adds	r2, r3, #4
 800880e:	600a      	str	r2, [r1, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	e9c3 6700 	strd	r6, r7, [r3]
 8008816:	68e3      	ldr	r3, [r4, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	60e3      	str	r3, [r4, #12]
 800881c:	e66d      	b.n	80084fa <_scanf_float+0x82>
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0e5      	beq.n	80087f0 <_scanf_float+0x378>
 8008824:	9905      	ldr	r1, [sp, #20]
 8008826:	230a      	movs	r3, #10
 8008828:	462a      	mov	r2, r5
 800882a:	3101      	adds	r1, #1
 800882c:	4640      	mov	r0, r8
 800882e:	f000 ffc5 	bl	80097bc <_strtol_r>
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	9e05      	ldr	r6, [sp, #20]
 8008836:	1ac2      	subs	r2, r0, r3
 8008838:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800883c:	429e      	cmp	r6, r3
 800883e:	bf28      	it	cs
 8008840:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008844:	4912      	ldr	r1, [pc, #72]	; (8008890 <_scanf_float+0x418>)
 8008846:	4630      	mov	r0, r6
 8008848:	f000 f8ee 	bl	8008a28 <siprintf>
 800884c:	e7d0      	b.n	80087f0 <_scanf_float+0x378>
 800884e:	9903      	ldr	r1, [sp, #12]
 8008850:	f012 0f04 	tst.w	r2, #4
 8008854:	f103 0204 	add.w	r2, r3, #4
 8008858:	600a      	str	r2, [r1, #0]
 800885a:	d1d9      	bne.n	8008810 <_scanf_float+0x398>
 800885c:	f8d3 8000 	ldr.w	r8, [r3]
 8008860:	ee10 2a10 	vmov	r2, s0
 8008864:	ee10 0a10 	vmov	r0, s0
 8008868:	463b      	mov	r3, r7
 800886a:	4639      	mov	r1, r7
 800886c:	f7f8 f97e 	bl	8000b6c <__aeabi_dcmpun>
 8008870:	b128      	cbz	r0, 800887e <_scanf_float+0x406>
 8008872:	4808      	ldr	r0, [pc, #32]	; (8008894 <_scanf_float+0x41c>)
 8008874:	f000 f89e 	bl	80089b4 <nanf>
 8008878:	ed88 0a00 	vstr	s0, [r8]
 800887c:	e7cb      	b.n	8008816 <_scanf_float+0x39e>
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f8 f9d1 	bl	8000c28 <__aeabi_d2f>
 8008886:	f8c8 0000 	str.w	r0, [r8]
 800888a:	e7c4      	b.n	8008816 <_scanf_float+0x39e>
 800888c:	2500      	movs	r5, #0
 800888e:	e634      	b.n	80084fa <_scanf_float+0x82>
 8008890:	0800c8c4 	.word	0x0800c8c4
 8008894:	0800cd38 	.word	0x0800cd38

08008898 <iprintf>:
 8008898:	b40f      	push	{r0, r1, r2, r3}
 800889a:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <iprintf+0x2c>)
 800889c:	b513      	push	{r0, r1, r4, lr}
 800889e:	681c      	ldr	r4, [r3, #0]
 80088a0:	b124      	cbz	r4, 80088ac <iprintf+0x14>
 80088a2:	69a3      	ldr	r3, [r4, #24]
 80088a4:	b913      	cbnz	r3, 80088ac <iprintf+0x14>
 80088a6:	4620      	mov	r0, r4
 80088a8:	f001 ffea 	bl	800a880 <__sinit>
 80088ac:	ab05      	add	r3, sp, #20
 80088ae:	9a04      	ldr	r2, [sp, #16]
 80088b0:	68a1      	ldr	r1, [r4, #8]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	4620      	mov	r0, r4
 80088b6:	f003 fbb3 	bl	800c020 <_vfiprintf_r>
 80088ba:	b002      	add	sp, #8
 80088bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c0:	b004      	add	sp, #16
 80088c2:	4770      	bx	lr
 80088c4:	20000018 	.word	0x20000018

080088c8 <_puts_r>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	460e      	mov	r6, r1
 80088cc:	4605      	mov	r5, r0
 80088ce:	b118      	cbz	r0, 80088d8 <_puts_r+0x10>
 80088d0:	6983      	ldr	r3, [r0, #24]
 80088d2:	b90b      	cbnz	r3, 80088d8 <_puts_r+0x10>
 80088d4:	f001 ffd4 	bl	800a880 <__sinit>
 80088d8:	69ab      	ldr	r3, [r5, #24]
 80088da:	68ac      	ldr	r4, [r5, #8]
 80088dc:	b913      	cbnz	r3, 80088e4 <_puts_r+0x1c>
 80088de:	4628      	mov	r0, r5
 80088e0:	f001 ffce 	bl	800a880 <__sinit>
 80088e4:	4b2c      	ldr	r3, [pc, #176]	; (8008998 <_puts_r+0xd0>)
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d120      	bne.n	800892c <_puts_r+0x64>
 80088ea:	686c      	ldr	r4, [r5, #4]
 80088ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ee:	07db      	lsls	r3, r3, #31
 80088f0:	d405      	bmi.n	80088fe <_puts_r+0x36>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	0598      	lsls	r0, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_puts_r+0x36>
 80088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fa:	f002 fbd2 	bl	800b0a2 <__retarget_lock_acquire_recursive>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	0719      	lsls	r1, r3, #28
 8008902:	d51d      	bpl.n	8008940 <_puts_r+0x78>
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	b1db      	cbz	r3, 8008940 <_puts_r+0x78>
 8008908:	3e01      	subs	r6, #1
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008910:	3b01      	subs	r3, #1
 8008912:	60a3      	str	r3, [r4, #8]
 8008914:	bb39      	cbnz	r1, 8008966 <_puts_r+0x9e>
 8008916:	2b00      	cmp	r3, #0
 8008918:	da38      	bge.n	800898c <_puts_r+0xc4>
 800891a:	4622      	mov	r2, r4
 800891c:	210a      	movs	r1, #10
 800891e:	4628      	mov	r0, r5
 8008920:	f000 ff58 	bl	80097d4 <__swbuf_r>
 8008924:	3001      	adds	r0, #1
 8008926:	d011      	beq.n	800894c <_puts_r+0x84>
 8008928:	250a      	movs	r5, #10
 800892a:	e011      	b.n	8008950 <_puts_r+0x88>
 800892c:	4b1b      	ldr	r3, [pc, #108]	; (800899c <_puts_r+0xd4>)
 800892e:	429c      	cmp	r4, r3
 8008930:	d101      	bne.n	8008936 <_puts_r+0x6e>
 8008932:	68ac      	ldr	r4, [r5, #8]
 8008934:	e7da      	b.n	80088ec <_puts_r+0x24>
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <_puts_r+0xd8>)
 8008938:	429c      	cmp	r4, r3
 800893a:	bf08      	it	eq
 800893c:	68ec      	ldreq	r4, [r5, #12]
 800893e:	e7d5      	b.n	80088ec <_puts_r+0x24>
 8008940:	4621      	mov	r1, r4
 8008942:	4628      	mov	r0, r5
 8008944:	f000 ff98 	bl	8009878 <__swsetup_r>
 8008948:	2800      	cmp	r0, #0
 800894a:	d0dd      	beq.n	8008908 <_puts_r+0x40>
 800894c:	f04f 35ff 	mov.w	r5, #4294967295
 8008950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008952:	07da      	lsls	r2, r3, #31
 8008954:	d405      	bmi.n	8008962 <_puts_r+0x9a>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	059b      	lsls	r3, r3, #22
 800895a:	d402      	bmi.n	8008962 <_puts_r+0x9a>
 800895c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895e:	f002 fba1 	bl	800b0a4 <__retarget_lock_release_recursive>
 8008962:	4628      	mov	r0, r5
 8008964:	bd70      	pop	{r4, r5, r6, pc}
 8008966:	2b00      	cmp	r3, #0
 8008968:	da04      	bge.n	8008974 <_puts_r+0xac>
 800896a:	69a2      	ldr	r2, [r4, #24]
 800896c:	429a      	cmp	r2, r3
 800896e:	dc06      	bgt.n	800897e <_puts_r+0xb6>
 8008970:	290a      	cmp	r1, #10
 8008972:	d004      	beq.n	800897e <_puts_r+0xb6>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	6022      	str	r2, [r4, #0]
 800897a:	7019      	strb	r1, [r3, #0]
 800897c:	e7c5      	b.n	800890a <_puts_r+0x42>
 800897e:	4622      	mov	r2, r4
 8008980:	4628      	mov	r0, r5
 8008982:	f000 ff27 	bl	80097d4 <__swbuf_r>
 8008986:	3001      	adds	r0, #1
 8008988:	d1bf      	bne.n	800890a <_puts_r+0x42>
 800898a:	e7df      	b.n	800894c <_puts_r+0x84>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	250a      	movs	r5, #10
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	6022      	str	r2, [r4, #0]
 8008994:	701d      	strb	r5, [r3, #0]
 8008996:	e7db      	b.n	8008950 <_puts_r+0x88>
 8008998:	0800cad4 	.word	0x0800cad4
 800899c:	0800caf4 	.word	0x0800caf4
 80089a0:	0800cab4 	.word	0x0800cab4

080089a4 <puts>:
 80089a4:	4b02      	ldr	r3, [pc, #8]	; (80089b0 <puts+0xc>)
 80089a6:	4601      	mov	r1, r0
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	f7ff bf8d 	b.w	80088c8 <_puts_r>
 80089ae:	bf00      	nop
 80089b0:	20000018 	.word	0x20000018

080089b4 <nanf>:
 80089b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089bc <nanf+0x8>
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	7fc00000 	.word	0x7fc00000

080089c0 <sniprintf>:
 80089c0:	b40c      	push	{r2, r3}
 80089c2:	b530      	push	{r4, r5, lr}
 80089c4:	4b17      	ldr	r3, [pc, #92]	; (8008a24 <sniprintf+0x64>)
 80089c6:	1e0c      	subs	r4, r1, #0
 80089c8:	681d      	ldr	r5, [r3, #0]
 80089ca:	b09d      	sub	sp, #116	; 0x74
 80089cc:	da08      	bge.n	80089e0 <sniprintf+0x20>
 80089ce:	238b      	movs	r3, #139	; 0x8b
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	b01d      	add	sp, #116	; 0x74
 80089d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089dc:	b002      	add	sp, #8
 80089de:	4770      	bx	lr
 80089e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80089e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80089e8:	bf14      	ite	ne
 80089ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80089ee:	4623      	moveq	r3, r4
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	9307      	str	r3, [sp, #28]
 80089f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089f8:	9002      	str	r0, [sp, #8]
 80089fa:	9006      	str	r0, [sp, #24]
 80089fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a02:	ab21      	add	r3, sp, #132	; 0x84
 8008a04:	a902      	add	r1, sp, #8
 8008a06:	4628      	mov	r0, r5
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	f003 f9df 	bl	800bdcc <_svfiprintf_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	bfbc      	itt	lt
 8008a12:	238b      	movlt	r3, #139	; 0x8b
 8008a14:	602b      	strlt	r3, [r5, #0]
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	d0dd      	beq.n	80089d6 <sniprintf+0x16>
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e7d9      	b.n	80089d6 <sniprintf+0x16>
 8008a22:	bf00      	nop
 8008a24:	20000018 	.word	0x20000018

08008a28 <siprintf>:
 8008a28:	b40e      	push	{r1, r2, r3}
 8008a2a:	b500      	push	{lr}
 8008a2c:	b09c      	sub	sp, #112	; 0x70
 8008a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a30:	9002      	str	r0, [sp, #8]
 8008a32:	9006      	str	r0, [sp, #24]
 8008a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a38:	4809      	ldr	r0, [pc, #36]	; (8008a60 <siprintf+0x38>)
 8008a3a:	9107      	str	r1, [sp, #28]
 8008a3c:	9104      	str	r1, [sp, #16]
 8008a3e:	4909      	ldr	r1, [pc, #36]	; (8008a64 <siprintf+0x3c>)
 8008a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a44:	9105      	str	r1, [sp, #20]
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	a902      	add	r1, sp, #8
 8008a4c:	f003 f9be 	bl	800bdcc <_svfiprintf_r>
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	b01c      	add	sp, #112	; 0x70
 8008a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a5c:	b003      	add	sp, #12
 8008a5e:	4770      	bx	lr
 8008a60:	20000018 	.word	0x20000018
 8008a64:	ffff0208 	.word	0xffff0208

08008a68 <sulp>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	460d      	mov	r5, r1
 8008a6e:	ec45 4b10 	vmov	d0, r4, r5
 8008a72:	4616      	mov	r6, r2
 8008a74:	f002 ff08 	bl	800b888 <__ulp>
 8008a78:	ec51 0b10 	vmov	r0, r1, d0
 8008a7c:	b17e      	cbz	r6, 8008a9e <sulp+0x36>
 8008a7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dd09      	ble.n	8008a9e <sulp+0x36>
 8008a8a:	051b      	lsls	r3, r3, #20
 8008a8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a90:	2400      	movs	r4, #0
 8008a92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a96:	4622      	mov	r2, r4
 8008a98:	462b      	mov	r3, r5
 8008a9a:	f7f7 fdcd 	bl	8000638 <__aeabi_dmul>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}

08008aa0 <_strtod_l>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	ed2d 8b02 	vpush	{d8}
 8008aa8:	b09d      	sub	sp, #116	; 0x74
 8008aaa:	461f      	mov	r7, r3
 8008aac:	2300      	movs	r3, #0
 8008aae:	9318      	str	r3, [sp, #96]	; 0x60
 8008ab0:	4ba2      	ldr	r3, [pc, #648]	; (8008d3c <_strtod_l+0x29c>)
 8008ab2:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	9305      	str	r3, [sp, #20]
 8008ab8:	4604      	mov	r4, r0
 8008aba:	4618      	mov	r0, r3
 8008abc:	4688      	mov	r8, r1
 8008abe:	f7f7 fba7 	bl	8000210 <strlen>
 8008ac2:	f04f 0a00 	mov.w	sl, #0
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	f04f 0b00 	mov.w	fp, #0
 8008acc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	2a2b      	cmp	r2, #43	; 0x2b
 8008ad6:	d04e      	beq.n	8008b76 <_strtod_l+0xd6>
 8008ad8:	d83b      	bhi.n	8008b52 <_strtod_l+0xb2>
 8008ada:	2a0d      	cmp	r2, #13
 8008adc:	d834      	bhi.n	8008b48 <_strtod_l+0xa8>
 8008ade:	2a08      	cmp	r2, #8
 8008ae0:	d834      	bhi.n	8008b4c <_strtod_l+0xac>
 8008ae2:	2a00      	cmp	r2, #0
 8008ae4:	d03e      	beq.n	8008b64 <_strtod_l+0xc4>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8008aea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008aec:	7833      	ldrb	r3, [r6, #0]
 8008aee:	2b30      	cmp	r3, #48	; 0x30
 8008af0:	f040 80b0 	bne.w	8008c54 <_strtod_l+0x1b4>
 8008af4:	7873      	ldrb	r3, [r6, #1]
 8008af6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008afa:	2b58      	cmp	r3, #88	; 0x58
 8008afc:	d168      	bne.n	8008bd0 <_strtod_l+0x130>
 8008afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	ab18      	add	r3, sp, #96	; 0x60
 8008b04:	9702      	str	r7, [sp, #8]
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	4a8d      	ldr	r2, [pc, #564]	; (8008d40 <_strtod_l+0x2a0>)
 8008b0a:	ab19      	add	r3, sp, #100	; 0x64
 8008b0c:	a917      	add	r1, sp, #92	; 0x5c
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f001 ffba 	bl	800aa88 <__gethex>
 8008b14:	f010 0707 	ands.w	r7, r0, #7
 8008b18:	4605      	mov	r5, r0
 8008b1a:	d005      	beq.n	8008b28 <_strtod_l+0x88>
 8008b1c:	2f06      	cmp	r7, #6
 8008b1e:	d12c      	bne.n	8008b7a <_strtod_l+0xda>
 8008b20:	3601      	adds	r6, #1
 8008b22:	2300      	movs	r3, #0
 8008b24:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b26:	930a      	str	r3, [sp, #40]	; 0x28
 8008b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 8590 	bne.w	8009650 <_strtod_l+0xbb0>
 8008b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b32:	b1eb      	cbz	r3, 8008b70 <_strtod_l+0xd0>
 8008b34:	4652      	mov	r2, sl
 8008b36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b3a:	ec43 2b10 	vmov	d0, r2, r3
 8008b3e:	b01d      	add	sp, #116	; 0x74
 8008b40:	ecbd 8b02 	vpop	{d8}
 8008b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b48:	2a20      	cmp	r2, #32
 8008b4a:	d1cc      	bne.n	8008ae6 <_strtod_l+0x46>
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b50:	e7be      	b.n	8008ad0 <_strtod_l+0x30>
 8008b52:	2a2d      	cmp	r2, #45	; 0x2d
 8008b54:	d1c7      	bne.n	8008ae6 <_strtod_l+0x46>
 8008b56:	2201      	movs	r2, #1
 8008b58:	920a      	str	r2, [sp, #40]	; 0x28
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1c2      	bne.n	8008aea <_strtod_l+0x4a>
 8008b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f040 856e 	bne.w	800964c <_strtod_l+0xbac>
 8008b70:	4652      	mov	r2, sl
 8008b72:	465b      	mov	r3, fp
 8008b74:	e7e1      	b.n	8008b3a <_strtod_l+0x9a>
 8008b76:	2200      	movs	r2, #0
 8008b78:	e7ee      	b.n	8008b58 <_strtod_l+0xb8>
 8008b7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b7c:	b13a      	cbz	r2, 8008b8e <_strtod_l+0xee>
 8008b7e:	2135      	movs	r1, #53	; 0x35
 8008b80:	a81a      	add	r0, sp, #104	; 0x68
 8008b82:	f002 ff8c 	bl	800ba9e <__copybits>
 8008b86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f002 fb4b 	bl	800b224 <_Bfree>
 8008b8e:	3f01      	subs	r7, #1
 8008b90:	2f04      	cmp	r7, #4
 8008b92:	d806      	bhi.n	8008ba2 <_strtod_l+0x102>
 8008b94:	e8df f007 	tbb	[pc, r7]
 8008b98:	1714030a 	.word	0x1714030a
 8008b9c:	0a          	.byte	0x0a
 8008b9d:	00          	.byte	0x00
 8008b9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008ba2:	0728      	lsls	r0, r5, #28
 8008ba4:	d5c0      	bpl.n	8008b28 <_strtod_l+0x88>
 8008ba6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008baa:	e7bd      	b.n	8008b28 <_strtod_l+0x88>
 8008bac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008bb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bbe:	e7f0      	b.n	8008ba2 <_strtod_l+0x102>
 8008bc0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008d44 <_strtod_l+0x2a4>
 8008bc4:	e7ed      	b.n	8008ba2 <_strtod_l+0x102>
 8008bc6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008bca:	f04f 3aff 	mov.w	sl, #4294967295
 8008bce:	e7e8      	b.n	8008ba2 <_strtod_l+0x102>
 8008bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bd6:	785b      	ldrb	r3, [r3, #1]
 8008bd8:	2b30      	cmp	r3, #48	; 0x30
 8008bda:	d0f9      	beq.n	8008bd0 <_strtod_l+0x130>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0a3      	beq.n	8008b28 <_strtod_l+0x88>
 8008be0:	2301      	movs	r3, #1
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bea:	9308      	str	r3, [sp, #32]
 8008bec:	f8cd 901c 	str.w	r9, [sp, #28]
 8008bf0:	464f      	mov	r7, r9
 8008bf2:	220a      	movs	r2, #10
 8008bf4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008bf6:	7806      	ldrb	r6, [r0, #0]
 8008bf8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008bfc:	b2d9      	uxtb	r1, r3
 8008bfe:	2909      	cmp	r1, #9
 8008c00:	d92a      	bls.n	8008c58 <_strtod_l+0x1b8>
 8008c02:	9905      	ldr	r1, [sp, #20]
 8008c04:	462a      	mov	r2, r5
 8008c06:	f003 fb96 	bl	800c336 <strncmp>
 8008c0a:	b398      	cbz	r0, 8008c74 <_strtod_l+0x1d4>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4632      	mov	r2, r6
 8008c10:	463d      	mov	r5, r7
 8008c12:	9005      	str	r0, [sp, #20]
 8008c14:	4603      	mov	r3, r0
 8008c16:	2a65      	cmp	r2, #101	; 0x65
 8008c18:	d001      	beq.n	8008c1e <_strtod_l+0x17e>
 8008c1a:	2a45      	cmp	r2, #69	; 0x45
 8008c1c:	d118      	bne.n	8008c50 <_strtod_l+0x1b0>
 8008c1e:	b91d      	cbnz	r5, 8008c28 <_strtod_l+0x188>
 8008c20:	9a04      	ldr	r2, [sp, #16]
 8008c22:	4302      	orrs	r2, r0
 8008c24:	d09e      	beq.n	8008b64 <_strtod_l+0xc4>
 8008c26:	2500      	movs	r5, #0
 8008c28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008c2c:	f108 0201 	add.w	r2, r8, #1
 8008c30:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c32:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008c36:	2a2b      	cmp	r2, #43	; 0x2b
 8008c38:	d075      	beq.n	8008d26 <_strtod_l+0x286>
 8008c3a:	2a2d      	cmp	r2, #45	; 0x2d
 8008c3c:	d07b      	beq.n	8008d36 <_strtod_l+0x296>
 8008c3e:	f04f 0c00 	mov.w	ip, #0
 8008c42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c46:	2909      	cmp	r1, #9
 8008c48:	f240 8082 	bls.w	8008d50 <_strtod_l+0x2b0>
 8008c4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c50:	2600      	movs	r6, #0
 8008c52:	e09d      	b.n	8008d90 <_strtod_l+0x2f0>
 8008c54:	2300      	movs	r3, #0
 8008c56:	e7c4      	b.n	8008be2 <_strtod_l+0x142>
 8008c58:	2f08      	cmp	r7, #8
 8008c5a:	bfd8      	it	le
 8008c5c:	9907      	ldrle	r1, [sp, #28]
 8008c5e:	f100 0001 	add.w	r0, r0, #1
 8008c62:	bfda      	itte	le
 8008c64:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c68:	9307      	strle	r3, [sp, #28]
 8008c6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c6e:	3701      	adds	r7, #1
 8008c70:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c72:	e7bf      	b.n	8008bf4 <_strtod_l+0x154>
 8008c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c76:	195a      	adds	r2, r3, r5
 8008c78:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c7a:	5d5a      	ldrb	r2, [r3, r5]
 8008c7c:	2f00      	cmp	r7, #0
 8008c7e:	d037      	beq.n	8008cf0 <_strtod_l+0x250>
 8008c80:	9005      	str	r0, [sp, #20]
 8008c82:	463d      	mov	r5, r7
 8008c84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c88:	2b09      	cmp	r3, #9
 8008c8a:	d912      	bls.n	8008cb2 <_strtod_l+0x212>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e7c2      	b.n	8008c16 <_strtod_l+0x176>
 8008c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c96:	785a      	ldrb	r2, [r3, #1]
 8008c98:	3001      	adds	r0, #1
 8008c9a:	2a30      	cmp	r2, #48	; 0x30
 8008c9c:	d0f8      	beq.n	8008c90 <_strtod_l+0x1f0>
 8008c9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ca2:	2b08      	cmp	r3, #8
 8008ca4:	f200 84d9 	bhi.w	800965a <_strtod_l+0xbba>
 8008ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008caa:	9005      	str	r0, [sp, #20]
 8008cac:	2000      	movs	r0, #0
 8008cae:	9308      	str	r3, [sp, #32]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	3a30      	subs	r2, #48	; 0x30
 8008cb4:	f100 0301 	add.w	r3, r0, #1
 8008cb8:	d014      	beq.n	8008ce4 <_strtod_l+0x244>
 8008cba:	9905      	ldr	r1, [sp, #20]
 8008cbc:	4419      	add	r1, r3
 8008cbe:	9105      	str	r1, [sp, #20]
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	eb00 0e05 	add.w	lr, r0, r5
 8008cc6:	210a      	movs	r1, #10
 8008cc8:	4573      	cmp	r3, lr
 8008cca:	d113      	bne.n	8008cf4 <_strtod_l+0x254>
 8008ccc:	182b      	adds	r3, r5, r0
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	f105 0501 	add.w	r5, r5, #1
 8008cd4:	4405      	add	r5, r0
 8008cd6:	dc1c      	bgt.n	8008d12 <_strtod_l+0x272>
 8008cd8:	9907      	ldr	r1, [sp, #28]
 8008cda:	230a      	movs	r3, #10
 8008cdc:	fb03 2301 	mla	r3, r3, r1, r2
 8008ce0:	9307      	str	r3, [sp, #28]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ce6:	1c51      	adds	r1, r2, #1
 8008ce8:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cea:	7852      	ldrb	r2, [r2, #1]
 8008cec:	4618      	mov	r0, r3
 8008cee:	e7c9      	b.n	8008c84 <_strtod_l+0x1e4>
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	e7d2      	b.n	8008c9a <_strtod_l+0x1fa>
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	dc04      	bgt.n	8008d02 <_strtod_l+0x262>
 8008cf8:	9e07      	ldr	r6, [sp, #28]
 8008cfa:	434e      	muls	r6, r1
 8008cfc:	9607      	str	r6, [sp, #28]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	e7e2      	b.n	8008cc8 <_strtod_l+0x228>
 8008d02:	f103 0c01 	add.w	ip, r3, #1
 8008d06:	f1bc 0f10 	cmp.w	ip, #16
 8008d0a:	bfd8      	it	le
 8008d0c:	fb01 f909 	mulle.w	r9, r1, r9
 8008d10:	e7f5      	b.n	8008cfe <_strtod_l+0x25e>
 8008d12:	2d10      	cmp	r5, #16
 8008d14:	bfdc      	itt	le
 8008d16:	230a      	movle	r3, #10
 8008d18:	fb03 2909 	mlale	r9, r3, r9, r2
 8008d1c:	e7e1      	b.n	8008ce2 <_strtod_l+0x242>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9305      	str	r3, [sp, #20]
 8008d22:	2301      	movs	r3, #1
 8008d24:	e77c      	b.n	8008c20 <_strtod_l+0x180>
 8008d26:	f04f 0c00 	mov.w	ip, #0
 8008d2a:	f108 0202 	add.w	r2, r8, #2
 8008d2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d30:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008d34:	e785      	b.n	8008c42 <_strtod_l+0x1a2>
 8008d36:	f04f 0c01 	mov.w	ip, #1
 8008d3a:	e7f6      	b.n	8008d2a <_strtod_l+0x28a>
 8008d3c:	0800cb7c 	.word	0x0800cb7c
 8008d40:	0800c8cc 	.word	0x0800c8cc
 8008d44:	7ff00000 	.word	0x7ff00000
 8008d48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d4a:	1c51      	adds	r1, r2, #1
 8008d4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d4e:	7852      	ldrb	r2, [r2, #1]
 8008d50:	2a30      	cmp	r2, #48	; 0x30
 8008d52:	d0f9      	beq.n	8008d48 <_strtod_l+0x2a8>
 8008d54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d58:	2908      	cmp	r1, #8
 8008d5a:	f63f af79 	bhi.w	8008c50 <_strtod_l+0x1b0>
 8008d5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d64:	9206      	str	r2, [sp, #24]
 8008d66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d68:	1c51      	adds	r1, r2, #1
 8008d6a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d6c:	7852      	ldrb	r2, [r2, #1]
 8008d6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d72:	2e09      	cmp	r6, #9
 8008d74:	d937      	bls.n	8008de6 <_strtod_l+0x346>
 8008d76:	9e06      	ldr	r6, [sp, #24]
 8008d78:	1b89      	subs	r1, r1, r6
 8008d7a:	2908      	cmp	r1, #8
 8008d7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d80:	dc02      	bgt.n	8008d88 <_strtod_l+0x2e8>
 8008d82:	4576      	cmp	r6, lr
 8008d84:	bfa8      	it	ge
 8008d86:	4676      	movge	r6, lr
 8008d88:	f1bc 0f00 	cmp.w	ip, #0
 8008d8c:	d000      	beq.n	8008d90 <_strtod_l+0x2f0>
 8008d8e:	4276      	negs	r6, r6
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	d14d      	bne.n	8008e30 <_strtod_l+0x390>
 8008d94:	9904      	ldr	r1, [sp, #16]
 8008d96:	4301      	orrs	r1, r0
 8008d98:	f47f aec6 	bne.w	8008b28 <_strtod_l+0x88>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f47f aee1 	bne.w	8008b64 <_strtod_l+0xc4>
 8008da2:	2a69      	cmp	r2, #105	; 0x69
 8008da4:	d027      	beq.n	8008df6 <_strtod_l+0x356>
 8008da6:	dc24      	bgt.n	8008df2 <_strtod_l+0x352>
 8008da8:	2a49      	cmp	r2, #73	; 0x49
 8008daa:	d024      	beq.n	8008df6 <_strtod_l+0x356>
 8008dac:	2a4e      	cmp	r2, #78	; 0x4e
 8008dae:	f47f aed9 	bne.w	8008b64 <_strtod_l+0xc4>
 8008db2:	499f      	ldr	r1, [pc, #636]	; (8009030 <_strtod_l+0x590>)
 8008db4:	a817      	add	r0, sp, #92	; 0x5c
 8008db6:	f002 f8bf 	bl	800af38 <__match>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f43f aed2 	beq.w	8008b64 <_strtod_l+0xc4>
 8008dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b28      	cmp	r3, #40	; 0x28
 8008dc6:	d12d      	bne.n	8008e24 <_strtod_l+0x384>
 8008dc8:	499a      	ldr	r1, [pc, #616]	; (8009034 <_strtod_l+0x594>)
 8008dca:	aa1a      	add	r2, sp, #104	; 0x68
 8008dcc:	a817      	add	r0, sp, #92	; 0x5c
 8008dce:	f002 f8c7 	bl	800af60 <__hexnan>
 8008dd2:	2805      	cmp	r0, #5
 8008dd4:	d126      	bne.n	8008e24 <_strtod_l+0x384>
 8008dd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dd8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008ddc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008de0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008de4:	e6a0      	b.n	8008b28 <_strtod_l+0x88>
 8008de6:	210a      	movs	r1, #10
 8008de8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008dec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008df0:	e7b9      	b.n	8008d66 <_strtod_l+0x2c6>
 8008df2:	2a6e      	cmp	r2, #110	; 0x6e
 8008df4:	e7db      	b.n	8008dae <_strtod_l+0x30e>
 8008df6:	4990      	ldr	r1, [pc, #576]	; (8009038 <_strtod_l+0x598>)
 8008df8:	a817      	add	r0, sp, #92	; 0x5c
 8008dfa:	f002 f89d 	bl	800af38 <__match>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	f43f aeb0 	beq.w	8008b64 <_strtod_l+0xc4>
 8008e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e06:	498d      	ldr	r1, [pc, #564]	; (800903c <_strtod_l+0x59c>)
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	a817      	add	r0, sp, #92	; 0x5c
 8008e0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e0e:	f002 f893 	bl	800af38 <__match>
 8008e12:	b910      	cbnz	r0, 8008e1a <_strtod_l+0x37a>
 8008e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e16:	3301      	adds	r3, #1
 8008e18:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800904c <_strtod_l+0x5ac>
 8008e1e:	f04f 0a00 	mov.w	sl, #0
 8008e22:	e681      	b.n	8008b28 <_strtod_l+0x88>
 8008e24:	4886      	ldr	r0, [pc, #536]	; (8009040 <_strtod_l+0x5a0>)
 8008e26:	f003 fa2b 	bl	800c280 <nan>
 8008e2a:	ec5b ab10 	vmov	sl, fp, d0
 8008e2e:	e67b      	b.n	8008b28 <_strtod_l+0x88>
 8008e30:	9b05      	ldr	r3, [sp, #20]
 8008e32:	9807      	ldr	r0, [sp, #28]
 8008e34:	1af3      	subs	r3, r6, r3
 8008e36:	2f00      	cmp	r7, #0
 8008e38:	bf08      	it	eq
 8008e3a:	462f      	moveq	r7, r5
 8008e3c:	2d10      	cmp	r5, #16
 8008e3e:	9306      	str	r3, [sp, #24]
 8008e40:	46a8      	mov	r8, r5
 8008e42:	bfa8      	it	ge
 8008e44:	f04f 0810 	movge.w	r8, #16
 8008e48:	f7f7 fb7c 	bl	8000544 <__aeabi_ui2d>
 8008e4c:	2d09      	cmp	r5, #9
 8008e4e:	4682      	mov	sl, r0
 8008e50:	468b      	mov	fp, r1
 8008e52:	dd13      	ble.n	8008e7c <_strtod_l+0x3dc>
 8008e54:	4b7b      	ldr	r3, [pc, #492]	; (8009044 <_strtod_l+0x5a4>)
 8008e56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e5e:	f7f7 fbeb 	bl	8000638 <__aeabi_dmul>
 8008e62:	4682      	mov	sl, r0
 8008e64:	4648      	mov	r0, r9
 8008e66:	468b      	mov	fp, r1
 8008e68:	f7f7 fb6c 	bl	8000544 <__aeabi_ui2d>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4650      	mov	r0, sl
 8008e72:	4659      	mov	r1, fp
 8008e74:	f7f7 fa2a 	bl	80002cc <__adddf3>
 8008e78:	4682      	mov	sl, r0
 8008e7a:	468b      	mov	fp, r1
 8008e7c:	2d0f      	cmp	r5, #15
 8008e7e:	dc38      	bgt.n	8008ef2 <_strtod_l+0x452>
 8008e80:	9b06      	ldr	r3, [sp, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f43f ae50 	beq.w	8008b28 <_strtod_l+0x88>
 8008e88:	dd24      	ble.n	8008ed4 <_strtod_l+0x434>
 8008e8a:	2b16      	cmp	r3, #22
 8008e8c:	dc0b      	bgt.n	8008ea6 <_strtod_l+0x406>
 8008e8e:	496d      	ldr	r1, [pc, #436]	; (8009044 <_strtod_l+0x5a4>)
 8008e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e98:	4652      	mov	r2, sl
 8008e9a:	465b      	mov	r3, fp
 8008e9c:	f7f7 fbcc 	bl	8000638 <__aeabi_dmul>
 8008ea0:	4682      	mov	sl, r0
 8008ea2:	468b      	mov	fp, r1
 8008ea4:	e640      	b.n	8008b28 <_strtod_l+0x88>
 8008ea6:	9a06      	ldr	r2, [sp, #24]
 8008ea8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008eac:	4293      	cmp	r3, r2
 8008eae:	db20      	blt.n	8008ef2 <_strtod_l+0x452>
 8008eb0:	4c64      	ldr	r4, [pc, #400]	; (8009044 <_strtod_l+0x5a4>)
 8008eb2:	f1c5 050f 	rsb	r5, r5, #15
 8008eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008eba:	4652      	mov	r2, sl
 8008ebc:	465b      	mov	r3, fp
 8008ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec2:	f7f7 fbb9 	bl	8000638 <__aeabi_dmul>
 8008ec6:	9b06      	ldr	r3, [sp, #24]
 8008ec8:	1b5d      	subs	r5, r3, r5
 8008eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ed2:	e7e3      	b.n	8008e9c <_strtod_l+0x3fc>
 8008ed4:	9b06      	ldr	r3, [sp, #24]
 8008ed6:	3316      	adds	r3, #22
 8008ed8:	db0b      	blt.n	8008ef2 <_strtod_l+0x452>
 8008eda:	9b05      	ldr	r3, [sp, #20]
 8008edc:	1b9e      	subs	r6, r3, r6
 8008ede:	4b59      	ldr	r3, [pc, #356]	; (8009044 <_strtod_l+0x5a4>)
 8008ee0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008ee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ee8:	4650      	mov	r0, sl
 8008eea:	4659      	mov	r1, fp
 8008eec:	f7f7 fcce 	bl	800088c <__aeabi_ddiv>
 8008ef0:	e7d6      	b.n	8008ea0 <_strtod_l+0x400>
 8008ef2:	9b06      	ldr	r3, [sp, #24]
 8008ef4:	eba5 0808 	sub.w	r8, r5, r8
 8008ef8:	4498      	add	r8, r3
 8008efa:	f1b8 0f00 	cmp.w	r8, #0
 8008efe:	dd74      	ble.n	8008fea <_strtod_l+0x54a>
 8008f00:	f018 030f 	ands.w	r3, r8, #15
 8008f04:	d00a      	beq.n	8008f1c <_strtod_l+0x47c>
 8008f06:	494f      	ldr	r1, [pc, #316]	; (8009044 <_strtod_l+0x5a4>)
 8008f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f0c:	4652      	mov	r2, sl
 8008f0e:	465b      	mov	r3, fp
 8008f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f14:	f7f7 fb90 	bl	8000638 <__aeabi_dmul>
 8008f18:	4682      	mov	sl, r0
 8008f1a:	468b      	mov	fp, r1
 8008f1c:	f038 080f 	bics.w	r8, r8, #15
 8008f20:	d04f      	beq.n	8008fc2 <_strtod_l+0x522>
 8008f22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f26:	dd22      	ble.n	8008f6e <_strtod_l+0x4ce>
 8008f28:	2500      	movs	r5, #0
 8008f2a:	462e      	mov	r6, r5
 8008f2c:	9507      	str	r5, [sp, #28]
 8008f2e:	9505      	str	r5, [sp, #20]
 8008f30:	2322      	movs	r3, #34	; 0x22
 8008f32:	f8df b118 	ldr.w	fp, [pc, #280]	; 800904c <_strtod_l+0x5ac>
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	f04f 0a00 	mov.w	sl, #0
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f43f adf2 	beq.w	8008b28 <_strtod_l+0x88>
 8008f44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f46:	4620      	mov	r0, r4
 8008f48:	f002 f96c 	bl	800b224 <_Bfree>
 8008f4c:	9905      	ldr	r1, [sp, #20]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f002 f968 	bl	800b224 <_Bfree>
 8008f54:	4631      	mov	r1, r6
 8008f56:	4620      	mov	r0, r4
 8008f58:	f002 f964 	bl	800b224 <_Bfree>
 8008f5c:	9907      	ldr	r1, [sp, #28]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f002 f960 	bl	800b224 <_Bfree>
 8008f64:	4629      	mov	r1, r5
 8008f66:	4620      	mov	r0, r4
 8008f68:	f002 f95c 	bl	800b224 <_Bfree>
 8008f6c:	e5dc      	b.n	8008b28 <_strtod_l+0x88>
 8008f6e:	4b36      	ldr	r3, [pc, #216]	; (8009048 <_strtod_l+0x5a8>)
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	2300      	movs	r3, #0
 8008f74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f78:	4650      	mov	r0, sl
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	4699      	mov	r9, r3
 8008f7e:	f1b8 0f01 	cmp.w	r8, #1
 8008f82:	dc21      	bgt.n	8008fc8 <_strtod_l+0x528>
 8008f84:	b10b      	cbz	r3, 8008f8a <_strtod_l+0x4ea>
 8008f86:	4682      	mov	sl, r0
 8008f88:	468b      	mov	fp, r1
 8008f8a:	4b2f      	ldr	r3, [pc, #188]	; (8009048 <_strtod_l+0x5a8>)
 8008f8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f94:	4652      	mov	r2, sl
 8008f96:	465b      	mov	r3, fp
 8008f98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f9c:	f7f7 fb4c 	bl	8000638 <__aeabi_dmul>
 8008fa0:	4b2a      	ldr	r3, [pc, #168]	; (800904c <_strtod_l+0x5ac>)
 8008fa2:	460a      	mov	r2, r1
 8008fa4:	400b      	ands	r3, r1
 8008fa6:	492a      	ldr	r1, [pc, #168]	; (8009050 <_strtod_l+0x5b0>)
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	4682      	mov	sl, r0
 8008fac:	d8bc      	bhi.n	8008f28 <_strtod_l+0x488>
 8008fae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008fb2:	428b      	cmp	r3, r1
 8008fb4:	bf86      	itte	hi
 8008fb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009054 <_strtod_l+0x5b4>
 8008fba:	f04f 3aff 	movhi.w	sl, #4294967295
 8008fbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9304      	str	r3, [sp, #16]
 8008fc6:	e084      	b.n	80090d2 <_strtod_l+0x632>
 8008fc8:	f018 0f01 	tst.w	r8, #1
 8008fcc:	d005      	beq.n	8008fda <_strtod_l+0x53a>
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 fb30 	bl	8000638 <__aeabi_dmul>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	9a04      	ldr	r2, [sp, #16]
 8008fdc:	3208      	adds	r2, #8
 8008fde:	f109 0901 	add.w	r9, r9, #1
 8008fe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fe6:	9204      	str	r2, [sp, #16]
 8008fe8:	e7c9      	b.n	8008f7e <_strtod_l+0x4de>
 8008fea:	d0ea      	beq.n	8008fc2 <_strtod_l+0x522>
 8008fec:	f1c8 0800 	rsb	r8, r8, #0
 8008ff0:	f018 020f 	ands.w	r2, r8, #15
 8008ff4:	d00a      	beq.n	800900c <_strtod_l+0x56c>
 8008ff6:	4b13      	ldr	r3, [pc, #76]	; (8009044 <_strtod_l+0x5a4>)
 8008ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ffc:	4650      	mov	r0, sl
 8008ffe:	4659      	mov	r1, fp
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 fc42 	bl	800088c <__aeabi_ddiv>
 8009008:	4682      	mov	sl, r0
 800900a:	468b      	mov	fp, r1
 800900c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009010:	d0d7      	beq.n	8008fc2 <_strtod_l+0x522>
 8009012:	f1b8 0f1f 	cmp.w	r8, #31
 8009016:	dd1f      	ble.n	8009058 <_strtod_l+0x5b8>
 8009018:	2500      	movs	r5, #0
 800901a:	462e      	mov	r6, r5
 800901c:	9507      	str	r5, [sp, #28]
 800901e:	9505      	str	r5, [sp, #20]
 8009020:	2322      	movs	r3, #34	; 0x22
 8009022:	f04f 0a00 	mov.w	sl, #0
 8009026:	f04f 0b00 	mov.w	fp, #0
 800902a:	6023      	str	r3, [r4, #0]
 800902c:	e786      	b.n	8008f3c <_strtod_l+0x49c>
 800902e:	bf00      	nop
 8009030:	0800c89d 	.word	0x0800c89d
 8009034:	0800c8e0 	.word	0x0800c8e0
 8009038:	0800c895 	.word	0x0800c895
 800903c:	0800ca24 	.word	0x0800ca24
 8009040:	0800cd38 	.word	0x0800cd38
 8009044:	0800cc18 	.word	0x0800cc18
 8009048:	0800cbf0 	.word	0x0800cbf0
 800904c:	7ff00000 	.word	0x7ff00000
 8009050:	7ca00000 	.word	0x7ca00000
 8009054:	7fefffff 	.word	0x7fefffff
 8009058:	f018 0310 	ands.w	r3, r8, #16
 800905c:	bf18      	it	ne
 800905e:	236a      	movne	r3, #106	; 0x6a
 8009060:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009410 <_strtod_l+0x970>
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	4650      	mov	r0, sl
 8009068:	4659      	mov	r1, fp
 800906a:	2300      	movs	r3, #0
 800906c:	f018 0f01 	tst.w	r8, #1
 8009070:	d004      	beq.n	800907c <_strtod_l+0x5dc>
 8009072:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009076:	f7f7 fadf 	bl	8000638 <__aeabi_dmul>
 800907a:	2301      	movs	r3, #1
 800907c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009080:	f109 0908 	add.w	r9, r9, #8
 8009084:	d1f2      	bne.n	800906c <_strtod_l+0x5cc>
 8009086:	b10b      	cbz	r3, 800908c <_strtod_l+0x5ec>
 8009088:	4682      	mov	sl, r0
 800908a:	468b      	mov	fp, r1
 800908c:	9b04      	ldr	r3, [sp, #16]
 800908e:	b1c3      	cbz	r3, 80090c2 <_strtod_l+0x622>
 8009090:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009094:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009098:	2b00      	cmp	r3, #0
 800909a:	4659      	mov	r1, fp
 800909c:	dd11      	ble.n	80090c2 <_strtod_l+0x622>
 800909e:	2b1f      	cmp	r3, #31
 80090a0:	f340 8124 	ble.w	80092ec <_strtod_l+0x84c>
 80090a4:	2b34      	cmp	r3, #52	; 0x34
 80090a6:	bfde      	ittt	le
 80090a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80090ac:	f04f 33ff 	movle.w	r3, #4294967295
 80090b0:	fa03 f202 	lslle.w	r2, r3, r2
 80090b4:	f04f 0a00 	mov.w	sl, #0
 80090b8:	bfcc      	ite	gt
 80090ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090be:	ea02 0b01 	andle.w	fp, r2, r1
 80090c2:	2200      	movs	r2, #0
 80090c4:	2300      	movs	r3, #0
 80090c6:	4650      	mov	r0, sl
 80090c8:	4659      	mov	r1, fp
 80090ca:	f7f7 fd1d 	bl	8000b08 <__aeabi_dcmpeq>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1a2      	bne.n	8009018 <_strtod_l+0x578>
 80090d2:	9b07      	ldr	r3, [sp, #28]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	9908      	ldr	r1, [sp, #32]
 80090d8:	462b      	mov	r3, r5
 80090da:	463a      	mov	r2, r7
 80090dc:	4620      	mov	r0, r4
 80090de:	f002 f909 	bl	800b2f4 <__s2b>
 80090e2:	9007      	str	r0, [sp, #28]
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f43f af1f 	beq.w	8008f28 <_strtod_l+0x488>
 80090ea:	9b05      	ldr	r3, [sp, #20]
 80090ec:	1b9e      	subs	r6, r3, r6
 80090ee:	9b06      	ldr	r3, [sp, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfb4      	ite	lt
 80090f4:	4633      	movlt	r3, r6
 80090f6:	2300      	movge	r3, #0
 80090f8:	930c      	str	r3, [sp, #48]	; 0x30
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	2500      	movs	r5, #0
 80090fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009102:	9312      	str	r3, [sp, #72]	; 0x48
 8009104:	462e      	mov	r6, r5
 8009106:	9b07      	ldr	r3, [sp, #28]
 8009108:	4620      	mov	r0, r4
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	f002 f84a 	bl	800b1a4 <_Balloc>
 8009110:	9005      	str	r0, [sp, #20]
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f af0c 	beq.w	8008f30 <_strtod_l+0x490>
 8009118:	9b07      	ldr	r3, [sp, #28]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	3202      	adds	r2, #2
 800911e:	f103 010c 	add.w	r1, r3, #12
 8009122:	0092      	lsls	r2, r2, #2
 8009124:	300c      	adds	r0, #12
 8009126:	f7fe fd27 	bl	8007b78 <memcpy>
 800912a:	ec4b ab10 	vmov	d0, sl, fp
 800912e:	aa1a      	add	r2, sp, #104	; 0x68
 8009130:	a919      	add	r1, sp, #100	; 0x64
 8009132:	4620      	mov	r0, r4
 8009134:	f002 fc24 	bl	800b980 <__d2b>
 8009138:	ec4b ab18 	vmov	d8, sl, fp
 800913c:	9018      	str	r0, [sp, #96]	; 0x60
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f aef6 	beq.w	8008f30 <_strtod_l+0x490>
 8009144:	2101      	movs	r1, #1
 8009146:	4620      	mov	r0, r4
 8009148:	f002 f96e 	bl	800b428 <__i2b>
 800914c:	4606      	mov	r6, r0
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f aeee 	beq.w	8008f30 <_strtod_l+0x490>
 8009154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009156:	9904      	ldr	r1, [sp, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	bfab      	itete	ge
 800915c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800915e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009160:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009162:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009166:	bfac      	ite	ge
 8009168:	eb03 0902 	addge.w	r9, r3, r2
 800916c:	1ad7      	sublt	r7, r2, r3
 800916e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009170:	eba3 0801 	sub.w	r8, r3, r1
 8009174:	4490      	add	r8, r2
 8009176:	4ba1      	ldr	r3, [pc, #644]	; (80093fc <_strtod_l+0x95c>)
 8009178:	f108 38ff 	add.w	r8, r8, #4294967295
 800917c:	4598      	cmp	r8, r3
 800917e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009182:	f280 80c7 	bge.w	8009314 <_strtod_l+0x874>
 8009186:	eba3 0308 	sub.w	r3, r3, r8
 800918a:	2b1f      	cmp	r3, #31
 800918c:	eba2 0203 	sub.w	r2, r2, r3
 8009190:	f04f 0101 	mov.w	r1, #1
 8009194:	f300 80b1 	bgt.w	80092fa <_strtod_l+0x85a>
 8009198:	fa01 f303 	lsl.w	r3, r1, r3
 800919c:	930d      	str	r3, [sp, #52]	; 0x34
 800919e:	2300      	movs	r3, #0
 80091a0:	9308      	str	r3, [sp, #32]
 80091a2:	eb09 0802 	add.w	r8, r9, r2
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	45c1      	cmp	r9, r8
 80091aa:	4417      	add	r7, r2
 80091ac:	441f      	add	r7, r3
 80091ae:	464b      	mov	r3, r9
 80091b0:	bfa8      	it	ge
 80091b2:	4643      	movge	r3, r8
 80091b4:	42bb      	cmp	r3, r7
 80091b6:	bfa8      	it	ge
 80091b8:	463b      	movge	r3, r7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfc2      	ittt	gt
 80091be:	eba8 0803 	subgt.w	r8, r8, r3
 80091c2:	1aff      	subgt	r7, r7, r3
 80091c4:	eba9 0903 	subgt.w	r9, r9, r3
 80091c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dd17      	ble.n	80091fe <_strtod_l+0x75e>
 80091ce:	4631      	mov	r1, r6
 80091d0:	461a      	mov	r2, r3
 80091d2:	4620      	mov	r0, r4
 80091d4:	f002 f9e8 	bl	800b5a8 <__pow5mult>
 80091d8:	4606      	mov	r6, r0
 80091da:	2800      	cmp	r0, #0
 80091dc:	f43f aea8 	beq.w	8008f30 <_strtod_l+0x490>
 80091e0:	4601      	mov	r1, r0
 80091e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091e4:	4620      	mov	r0, r4
 80091e6:	f002 f935 	bl	800b454 <__multiply>
 80091ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f43f ae9f 	beq.w	8008f30 <_strtod_l+0x490>
 80091f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091f4:	4620      	mov	r0, r4
 80091f6:	f002 f815 	bl	800b224 <_Bfree>
 80091fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091fc:	9318      	str	r3, [sp, #96]	; 0x60
 80091fe:	f1b8 0f00 	cmp.w	r8, #0
 8009202:	f300 808c 	bgt.w	800931e <_strtod_l+0x87e>
 8009206:	9b06      	ldr	r3, [sp, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dd08      	ble.n	800921e <_strtod_l+0x77e>
 800920c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800920e:	9905      	ldr	r1, [sp, #20]
 8009210:	4620      	mov	r0, r4
 8009212:	f002 f9c9 	bl	800b5a8 <__pow5mult>
 8009216:	9005      	str	r0, [sp, #20]
 8009218:	2800      	cmp	r0, #0
 800921a:	f43f ae89 	beq.w	8008f30 <_strtod_l+0x490>
 800921e:	2f00      	cmp	r7, #0
 8009220:	dd08      	ble.n	8009234 <_strtod_l+0x794>
 8009222:	9905      	ldr	r1, [sp, #20]
 8009224:	463a      	mov	r2, r7
 8009226:	4620      	mov	r0, r4
 8009228:	f002 fa18 	bl	800b65c <__lshift>
 800922c:	9005      	str	r0, [sp, #20]
 800922e:	2800      	cmp	r0, #0
 8009230:	f43f ae7e 	beq.w	8008f30 <_strtod_l+0x490>
 8009234:	f1b9 0f00 	cmp.w	r9, #0
 8009238:	dd08      	ble.n	800924c <_strtod_l+0x7ac>
 800923a:	4631      	mov	r1, r6
 800923c:	464a      	mov	r2, r9
 800923e:	4620      	mov	r0, r4
 8009240:	f002 fa0c 	bl	800b65c <__lshift>
 8009244:	4606      	mov	r6, r0
 8009246:	2800      	cmp	r0, #0
 8009248:	f43f ae72 	beq.w	8008f30 <_strtod_l+0x490>
 800924c:	9a05      	ldr	r2, [sp, #20]
 800924e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009250:	4620      	mov	r0, r4
 8009252:	f002 fa8f 	bl	800b774 <__mdiff>
 8009256:	4605      	mov	r5, r0
 8009258:	2800      	cmp	r0, #0
 800925a:	f43f ae69 	beq.w	8008f30 <_strtod_l+0x490>
 800925e:	68c3      	ldr	r3, [r0, #12]
 8009260:	930b      	str	r3, [sp, #44]	; 0x2c
 8009262:	2300      	movs	r3, #0
 8009264:	60c3      	str	r3, [r0, #12]
 8009266:	4631      	mov	r1, r6
 8009268:	f002 fa68 	bl	800b73c <__mcmp>
 800926c:	2800      	cmp	r0, #0
 800926e:	da60      	bge.n	8009332 <_strtod_l+0x892>
 8009270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009272:	ea53 030a 	orrs.w	r3, r3, sl
 8009276:	f040 8082 	bne.w	800937e <_strtod_l+0x8de>
 800927a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800927e:	2b00      	cmp	r3, #0
 8009280:	d17d      	bne.n	800937e <_strtod_l+0x8de>
 8009282:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009286:	0d1b      	lsrs	r3, r3, #20
 8009288:	051b      	lsls	r3, r3, #20
 800928a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800928e:	d976      	bls.n	800937e <_strtod_l+0x8de>
 8009290:	696b      	ldr	r3, [r5, #20]
 8009292:	b913      	cbnz	r3, 800929a <_strtod_l+0x7fa>
 8009294:	692b      	ldr	r3, [r5, #16]
 8009296:	2b01      	cmp	r3, #1
 8009298:	dd71      	ble.n	800937e <_strtod_l+0x8de>
 800929a:	4629      	mov	r1, r5
 800929c:	2201      	movs	r2, #1
 800929e:	4620      	mov	r0, r4
 80092a0:	f002 f9dc 	bl	800b65c <__lshift>
 80092a4:	4631      	mov	r1, r6
 80092a6:	4605      	mov	r5, r0
 80092a8:	f002 fa48 	bl	800b73c <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dd66      	ble.n	800937e <_strtod_l+0x8de>
 80092b0:	9904      	ldr	r1, [sp, #16]
 80092b2:	4a53      	ldr	r2, [pc, #332]	; (8009400 <_strtod_l+0x960>)
 80092b4:	465b      	mov	r3, fp
 80092b6:	2900      	cmp	r1, #0
 80092b8:	f000 8081 	beq.w	80093be <_strtod_l+0x91e>
 80092bc:	ea02 010b 	and.w	r1, r2, fp
 80092c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092c4:	dc7b      	bgt.n	80093be <_strtod_l+0x91e>
 80092c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092ca:	f77f aea9 	ble.w	8009020 <_strtod_l+0x580>
 80092ce:	4b4d      	ldr	r3, [pc, #308]	; (8009404 <_strtod_l+0x964>)
 80092d0:	4650      	mov	r0, sl
 80092d2:	4659      	mov	r1, fp
 80092d4:	2200      	movs	r2, #0
 80092d6:	f7f7 f9af 	bl	8000638 <__aeabi_dmul>
 80092da:	460b      	mov	r3, r1
 80092dc:	4303      	orrs	r3, r0
 80092de:	bf08      	it	eq
 80092e0:	2322      	moveq	r3, #34	; 0x22
 80092e2:	4682      	mov	sl, r0
 80092e4:	468b      	mov	fp, r1
 80092e6:	bf08      	it	eq
 80092e8:	6023      	streq	r3, [r4, #0]
 80092ea:	e62b      	b.n	8008f44 <_strtod_l+0x4a4>
 80092ec:	f04f 32ff 	mov.w	r2, #4294967295
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	ea03 0a0a 	and.w	sl, r3, sl
 80092f8:	e6e3      	b.n	80090c2 <_strtod_l+0x622>
 80092fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80092fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009302:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009306:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800930a:	fa01 f308 	lsl.w	r3, r1, r8
 800930e:	9308      	str	r3, [sp, #32]
 8009310:	910d      	str	r1, [sp, #52]	; 0x34
 8009312:	e746      	b.n	80091a2 <_strtod_l+0x702>
 8009314:	2300      	movs	r3, #0
 8009316:	9308      	str	r3, [sp, #32]
 8009318:	2301      	movs	r3, #1
 800931a:	930d      	str	r3, [sp, #52]	; 0x34
 800931c:	e741      	b.n	80091a2 <_strtod_l+0x702>
 800931e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009320:	4642      	mov	r2, r8
 8009322:	4620      	mov	r0, r4
 8009324:	f002 f99a 	bl	800b65c <__lshift>
 8009328:	9018      	str	r0, [sp, #96]	; 0x60
 800932a:	2800      	cmp	r0, #0
 800932c:	f47f af6b 	bne.w	8009206 <_strtod_l+0x766>
 8009330:	e5fe      	b.n	8008f30 <_strtod_l+0x490>
 8009332:	465f      	mov	r7, fp
 8009334:	d16e      	bne.n	8009414 <_strtod_l+0x974>
 8009336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800933c:	b342      	cbz	r2, 8009390 <_strtod_l+0x8f0>
 800933e:	4a32      	ldr	r2, [pc, #200]	; (8009408 <_strtod_l+0x968>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d128      	bne.n	8009396 <_strtod_l+0x8f6>
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	4651      	mov	r1, sl
 8009348:	b1eb      	cbz	r3, 8009386 <_strtod_l+0x8e6>
 800934a:	4b2d      	ldr	r3, [pc, #180]	; (8009400 <_strtod_l+0x960>)
 800934c:	403b      	ands	r3, r7
 800934e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009352:	f04f 32ff 	mov.w	r2, #4294967295
 8009356:	d819      	bhi.n	800938c <_strtod_l+0x8ec>
 8009358:	0d1b      	lsrs	r3, r3, #20
 800935a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	4299      	cmp	r1, r3
 8009364:	d117      	bne.n	8009396 <_strtod_l+0x8f6>
 8009366:	4b29      	ldr	r3, [pc, #164]	; (800940c <_strtod_l+0x96c>)
 8009368:	429f      	cmp	r7, r3
 800936a:	d102      	bne.n	8009372 <_strtod_l+0x8d2>
 800936c:	3101      	adds	r1, #1
 800936e:	f43f addf 	beq.w	8008f30 <_strtod_l+0x490>
 8009372:	4b23      	ldr	r3, [pc, #140]	; (8009400 <_strtod_l+0x960>)
 8009374:	403b      	ands	r3, r7
 8009376:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800937a:	f04f 0a00 	mov.w	sl, #0
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1a4      	bne.n	80092ce <_strtod_l+0x82e>
 8009384:	e5de      	b.n	8008f44 <_strtod_l+0x4a4>
 8009386:	f04f 33ff 	mov.w	r3, #4294967295
 800938a:	e7ea      	b.n	8009362 <_strtod_l+0x8c2>
 800938c:	4613      	mov	r3, r2
 800938e:	e7e8      	b.n	8009362 <_strtod_l+0x8c2>
 8009390:	ea53 030a 	orrs.w	r3, r3, sl
 8009394:	d08c      	beq.n	80092b0 <_strtod_l+0x810>
 8009396:	9b08      	ldr	r3, [sp, #32]
 8009398:	b1db      	cbz	r3, 80093d2 <_strtod_l+0x932>
 800939a:	423b      	tst	r3, r7
 800939c:	d0ef      	beq.n	800937e <_strtod_l+0x8de>
 800939e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a0:	9a04      	ldr	r2, [sp, #16]
 80093a2:	4650      	mov	r0, sl
 80093a4:	4659      	mov	r1, fp
 80093a6:	b1c3      	cbz	r3, 80093da <_strtod_l+0x93a>
 80093a8:	f7ff fb5e 	bl	8008a68 <sulp>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	ec51 0b18 	vmov	r0, r1, d8
 80093b4:	f7f6 ff8a 	bl	80002cc <__adddf3>
 80093b8:	4682      	mov	sl, r0
 80093ba:	468b      	mov	fp, r1
 80093bc:	e7df      	b.n	800937e <_strtod_l+0x8de>
 80093be:	4013      	ands	r3, r2
 80093c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093cc:	f04f 3aff 	mov.w	sl, #4294967295
 80093d0:	e7d5      	b.n	800937e <_strtod_l+0x8de>
 80093d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d4:	ea13 0f0a 	tst.w	r3, sl
 80093d8:	e7e0      	b.n	800939c <_strtod_l+0x8fc>
 80093da:	f7ff fb45 	bl	8008a68 <sulp>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	ec51 0b18 	vmov	r0, r1, d8
 80093e6:	f7f6 ff6f 	bl	80002c8 <__aeabi_dsub>
 80093ea:	2200      	movs	r2, #0
 80093ec:	2300      	movs	r3, #0
 80093ee:	4682      	mov	sl, r0
 80093f0:	468b      	mov	fp, r1
 80093f2:	f7f7 fb89 	bl	8000b08 <__aeabi_dcmpeq>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0c1      	beq.n	800937e <_strtod_l+0x8de>
 80093fa:	e611      	b.n	8009020 <_strtod_l+0x580>
 80093fc:	fffffc02 	.word	0xfffffc02
 8009400:	7ff00000 	.word	0x7ff00000
 8009404:	39500000 	.word	0x39500000
 8009408:	000fffff 	.word	0x000fffff
 800940c:	7fefffff 	.word	0x7fefffff
 8009410:	0800c8f8 	.word	0x0800c8f8
 8009414:	4631      	mov	r1, r6
 8009416:	4628      	mov	r0, r5
 8009418:	f002 fb0e 	bl	800ba38 <__ratio>
 800941c:	ec59 8b10 	vmov	r8, r9, d0
 8009420:	ee10 0a10 	vmov	r0, s0
 8009424:	2200      	movs	r2, #0
 8009426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800942a:	4649      	mov	r1, r9
 800942c:	f7f7 fb80 	bl	8000b30 <__aeabi_dcmple>
 8009430:	2800      	cmp	r0, #0
 8009432:	d07a      	beq.n	800952a <_strtod_l+0xa8a>
 8009434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d04a      	beq.n	80094d0 <_strtod_l+0xa30>
 800943a:	4b95      	ldr	r3, [pc, #596]	; (8009690 <_strtod_l+0xbf0>)
 800943c:	2200      	movs	r2, #0
 800943e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009442:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009690 <_strtod_l+0xbf0>
 8009446:	f04f 0800 	mov.w	r8, #0
 800944a:	4b92      	ldr	r3, [pc, #584]	; (8009694 <_strtod_l+0xbf4>)
 800944c:	403b      	ands	r3, r7
 800944e:	930d      	str	r3, [sp, #52]	; 0x34
 8009450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009452:	4b91      	ldr	r3, [pc, #580]	; (8009698 <_strtod_l+0xbf8>)
 8009454:	429a      	cmp	r2, r3
 8009456:	f040 80b0 	bne.w	80095ba <_strtod_l+0xb1a>
 800945a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800945e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009462:	ec4b ab10 	vmov	d0, sl, fp
 8009466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800946a:	f002 fa0d 	bl	800b888 <__ulp>
 800946e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009472:	ec53 2b10 	vmov	r2, r3, d0
 8009476:	f7f7 f8df 	bl	8000638 <__aeabi_dmul>
 800947a:	4652      	mov	r2, sl
 800947c:	465b      	mov	r3, fp
 800947e:	f7f6 ff25 	bl	80002cc <__adddf3>
 8009482:	460b      	mov	r3, r1
 8009484:	4983      	ldr	r1, [pc, #524]	; (8009694 <_strtod_l+0xbf4>)
 8009486:	4a85      	ldr	r2, [pc, #532]	; (800969c <_strtod_l+0xbfc>)
 8009488:	4019      	ands	r1, r3
 800948a:	4291      	cmp	r1, r2
 800948c:	4682      	mov	sl, r0
 800948e:	d960      	bls.n	8009552 <_strtod_l+0xab2>
 8009490:	ee18 3a90 	vmov	r3, s17
 8009494:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009498:	4293      	cmp	r3, r2
 800949a:	d104      	bne.n	80094a6 <_strtod_l+0xa06>
 800949c:	ee18 3a10 	vmov	r3, s16
 80094a0:	3301      	adds	r3, #1
 80094a2:	f43f ad45 	beq.w	8008f30 <_strtod_l+0x490>
 80094a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80096a8 <_strtod_l+0xc08>
 80094aa:	f04f 3aff 	mov.w	sl, #4294967295
 80094ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094b0:	4620      	mov	r0, r4
 80094b2:	f001 feb7 	bl	800b224 <_Bfree>
 80094b6:	9905      	ldr	r1, [sp, #20]
 80094b8:	4620      	mov	r0, r4
 80094ba:	f001 feb3 	bl	800b224 <_Bfree>
 80094be:	4631      	mov	r1, r6
 80094c0:	4620      	mov	r0, r4
 80094c2:	f001 feaf 	bl	800b224 <_Bfree>
 80094c6:	4629      	mov	r1, r5
 80094c8:	4620      	mov	r0, r4
 80094ca:	f001 feab 	bl	800b224 <_Bfree>
 80094ce:	e61a      	b.n	8009106 <_strtod_l+0x666>
 80094d0:	f1ba 0f00 	cmp.w	sl, #0
 80094d4:	d11b      	bne.n	800950e <_strtod_l+0xa6e>
 80094d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094da:	b9f3      	cbnz	r3, 800951a <_strtod_l+0xa7a>
 80094dc:	4b6c      	ldr	r3, [pc, #432]	; (8009690 <_strtod_l+0xbf0>)
 80094de:	2200      	movs	r2, #0
 80094e0:	4640      	mov	r0, r8
 80094e2:	4649      	mov	r1, r9
 80094e4:	f7f7 fb1a 	bl	8000b1c <__aeabi_dcmplt>
 80094e8:	b9d0      	cbnz	r0, 8009520 <_strtod_l+0xa80>
 80094ea:	4640      	mov	r0, r8
 80094ec:	4649      	mov	r1, r9
 80094ee:	4b6c      	ldr	r3, [pc, #432]	; (80096a0 <_strtod_l+0xc00>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	f7f7 f8a1 	bl	8000638 <__aeabi_dmul>
 80094f6:	4680      	mov	r8, r0
 80094f8:	4689      	mov	r9, r1
 80094fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009502:	9315      	str	r3, [sp, #84]	; 0x54
 8009504:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800950c:	e79d      	b.n	800944a <_strtod_l+0x9aa>
 800950e:	f1ba 0f01 	cmp.w	sl, #1
 8009512:	d102      	bne.n	800951a <_strtod_l+0xa7a>
 8009514:	2f00      	cmp	r7, #0
 8009516:	f43f ad83 	beq.w	8009020 <_strtod_l+0x580>
 800951a:	4b62      	ldr	r3, [pc, #392]	; (80096a4 <_strtod_l+0xc04>)
 800951c:	2200      	movs	r2, #0
 800951e:	e78e      	b.n	800943e <_strtod_l+0x99e>
 8009520:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80096a0 <_strtod_l+0xc00>
 8009524:	f04f 0800 	mov.w	r8, #0
 8009528:	e7e7      	b.n	80094fa <_strtod_l+0xa5a>
 800952a:	4b5d      	ldr	r3, [pc, #372]	; (80096a0 <_strtod_l+0xc00>)
 800952c:	4640      	mov	r0, r8
 800952e:	4649      	mov	r1, r9
 8009530:	2200      	movs	r2, #0
 8009532:	f7f7 f881 	bl	8000638 <__aeabi_dmul>
 8009536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009538:	4680      	mov	r8, r0
 800953a:	4689      	mov	r9, r1
 800953c:	b933      	cbnz	r3, 800954c <_strtod_l+0xaac>
 800953e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009542:	900e      	str	r0, [sp, #56]	; 0x38
 8009544:	930f      	str	r3, [sp, #60]	; 0x3c
 8009546:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800954a:	e7dd      	b.n	8009508 <_strtod_l+0xa68>
 800954c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009550:	e7f9      	b.n	8009546 <_strtod_l+0xaa6>
 8009552:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009556:	9b04      	ldr	r3, [sp, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1a8      	bne.n	80094ae <_strtod_l+0xa0e>
 800955c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009562:	0d1b      	lsrs	r3, r3, #20
 8009564:	051b      	lsls	r3, r3, #20
 8009566:	429a      	cmp	r2, r3
 8009568:	d1a1      	bne.n	80094ae <_strtod_l+0xa0e>
 800956a:	4640      	mov	r0, r8
 800956c:	4649      	mov	r1, r9
 800956e:	f7f7 fbc3 	bl	8000cf8 <__aeabi_d2lz>
 8009572:	f7f7 f833 	bl	80005dc <__aeabi_l2d>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4640      	mov	r0, r8
 800957c:	4649      	mov	r1, r9
 800957e:	f7f6 fea3 	bl	80002c8 <__aeabi_dsub>
 8009582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009588:	ea43 030a 	orr.w	r3, r3, sl
 800958c:	4313      	orrs	r3, r2
 800958e:	4680      	mov	r8, r0
 8009590:	4689      	mov	r9, r1
 8009592:	d055      	beq.n	8009640 <_strtod_l+0xba0>
 8009594:	a336      	add	r3, pc, #216	; (adr r3, 8009670 <_strtod_l+0xbd0>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f7 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f47f acd0 	bne.w	8008f44 <_strtod_l+0x4a4>
 80095a4:	a334      	add	r3, pc, #208	; (adr r3, 8009678 <_strtod_l+0xbd8>)
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	4640      	mov	r0, r8
 80095ac:	4649      	mov	r1, r9
 80095ae:	f7f7 fad3 	bl	8000b58 <__aeabi_dcmpgt>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f43f af7b 	beq.w	80094ae <_strtod_l+0xa0e>
 80095b8:	e4c4      	b.n	8008f44 <_strtod_l+0x4a4>
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	b333      	cbz	r3, 800960c <_strtod_l+0xb6c>
 80095be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095c4:	d822      	bhi.n	800960c <_strtod_l+0xb6c>
 80095c6:	a32e      	add	r3, pc, #184	; (adr r3, 8009680 <_strtod_l+0xbe0>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7f7 faae 	bl	8000b30 <__aeabi_dcmple>
 80095d4:	b1a0      	cbz	r0, 8009600 <_strtod_l+0xb60>
 80095d6:	4649      	mov	r1, r9
 80095d8:	4640      	mov	r0, r8
 80095da:	f7f7 fb05 	bl	8000be8 <__aeabi_d2uiz>
 80095de:	2801      	cmp	r0, #1
 80095e0:	bf38      	it	cc
 80095e2:	2001      	movcc	r0, #1
 80095e4:	f7f6 ffae 	bl	8000544 <__aeabi_ui2d>
 80095e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ea:	4680      	mov	r8, r0
 80095ec:	4689      	mov	r9, r1
 80095ee:	bb23      	cbnz	r3, 800963a <_strtod_l+0xb9a>
 80095f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095f4:	9010      	str	r0, [sp, #64]	; 0x40
 80095f6:	9311      	str	r3, [sp, #68]	; 0x44
 80095f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009604:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009608:	1a9b      	subs	r3, r3, r2
 800960a:	9309      	str	r3, [sp, #36]	; 0x24
 800960c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009610:	eeb0 0a48 	vmov.f32	s0, s16
 8009614:	eef0 0a68 	vmov.f32	s1, s17
 8009618:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800961c:	f002 f934 	bl	800b888 <__ulp>
 8009620:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009624:	ec53 2b10 	vmov	r2, r3, d0
 8009628:	f7f7 f806 	bl	8000638 <__aeabi_dmul>
 800962c:	ec53 2b18 	vmov	r2, r3, d8
 8009630:	f7f6 fe4c 	bl	80002cc <__adddf3>
 8009634:	4682      	mov	sl, r0
 8009636:	468b      	mov	fp, r1
 8009638:	e78d      	b.n	8009556 <_strtod_l+0xab6>
 800963a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800963e:	e7db      	b.n	80095f8 <_strtod_l+0xb58>
 8009640:	a311      	add	r3, pc, #68	; (adr r3, 8009688 <_strtod_l+0xbe8>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f7 fa69 	bl	8000b1c <__aeabi_dcmplt>
 800964a:	e7b2      	b.n	80095b2 <_strtod_l+0xb12>
 800964c:	2300      	movs	r3, #0
 800964e:	930a      	str	r3, [sp, #40]	; 0x28
 8009650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	f7ff ba6b 	b.w	8008b30 <_strtod_l+0x90>
 800965a:	2a65      	cmp	r2, #101	; 0x65
 800965c:	f43f ab5f 	beq.w	8008d1e <_strtod_l+0x27e>
 8009660:	2a45      	cmp	r2, #69	; 0x45
 8009662:	f43f ab5c 	beq.w	8008d1e <_strtod_l+0x27e>
 8009666:	2301      	movs	r3, #1
 8009668:	f7ff bb94 	b.w	8008d94 <_strtod_l+0x2f4>
 800966c:	f3af 8000 	nop.w
 8009670:	94a03595 	.word	0x94a03595
 8009674:	3fdfffff 	.word	0x3fdfffff
 8009678:	35afe535 	.word	0x35afe535
 800967c:	3fe00000 	.word	0x3fe00000
 8009680:	ffc00000 	.word	0xffc00000
 8009684:	41dfffff 	.word	0x41dfffff
 8009688:	94a03595 	.word	0x94a03595
 800968c:	3fcfffff 	.word	0x3fcfffff
 8009690:	3ff00000 	.word	0x3ff00000
 8009694:	7ff00000 	.word	0x7ff00000
 8009698:	7fe00000 	.word	0x7fe00000
 800969c:	7c9fffff 	.word	0x7c9fffff
 80096a0:	3fe00000 	.word	0x3fe00000
 80096a4:	bff00000 	.word	0xbff00000
 80096a8:	7fefffff 	.word	0x7fefffff

080096ac <_strtod_r>:
 80096ac:	4b01      	ldr	r3, [pc, #4]	; (80096b4 <_strtod_r+0x8>)
 80096ae:	f7ff b9f7 	b.w	8008aa0 <_strtod_l>
 80096b2:	bf00      	nop
 80096b4:	20000080 	.word	0x20000080

080096b8 <_strtol_l.constprop.0>:
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096be:	d001      	beq.n	80096c4 <_strtol_l.constprop.0+0xc>
 80096c0:	2b24      	cmp	r3, #36	; 0x24
 80096c2:	d906      	bls.n	80096d2 <_strtol_l.constprop.0+0x1a>
 80096c4:	f7fe fa2e 	bl	8007b24 <__errno>
 80096c8:	2316      	movs	r3, #22
 80096ca:	6003      	str	r3, [r0, #0]
 80096cc:	2000      	movs	r0, #0
 80096ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097b8 <_strtol_l.constprop.0+0x100>
 80096d6:	460d      	mov	r5, r1
 80096d8:	462e      	mov	r6, r5
 80096da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80096e2:	f017 0708 	ands.w	r7, r7, #8
 80096e6:	d1f7      	bne.n	80096d8 <_strtol_l.constprop.0+0x20>
 80096e8:	2c2d      	cmp	r4, #45	; 0x2d
 80096ea:	d132      	bne.n	8009752 <_strtol_l.constprop.0+0x9a>
 80096ec:	782c      	ldrb	r4, [r5, #0]
 80096ee:	2701      	movs	r7, #1
 80096f0:	1cb5      	adds	r5, r6, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d05b      	beq.n	80097ae <_strtol_l.constprop.0+0xf6>
 80096f6:	2b10      	cmp	r3, #16
 80096f8:	d109      	bne.n	800970e <_strtol_l.constprop.0+0x56>
 80096fa:	2c30      	cmp	r4, #48	; 0x30
 80096fc:	d107      	bne.n	800970e <_strtol_l.constprop.0+0x56>
 80096fe:	782c      	ldrb	r4, [r5, #0]
 8009700:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009704:	2c58      	cmp	r4, #88	; 0x58
 8009706:	d14d      	bne.n	80097a4 <_strtol_l.constprop.0+0xec>
 8009708:	786c      	ldrb	r4, [r5, #1]
 800970a:	2310      	movs	r3, #16
 800970c:	3502      	adds	r5, #2
 800970e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009712:	f108 38ff 	add.w	r8, r8, #4294967295
 8009716:	f04f 0c00 	mov.w	ip, #0
 800971a:	fbb8 f9f3 	udiv	r9, r8, r3
 800971e:	4666      	mov	r6, ip
 8009720:	fb03 8a19 	mls	sl, r3, r9, r8
 8009724:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009728:	f1be 0f09 	cmp.w	lr, #9
 800972c:	d816      	bhi.n	800975c <_strtol_l.constprop.0+0xa4>
 800972e:	4674      	mov	r4, lr
 8009730:	42a3      	cmp	r3, r4
 8009732:	dd24      	ble.n	800977e <_strtol_l.constprop.0+0xc6>
 8009734:	f1bc 0f00 	cmp.w	ip, #0
 8009738:	db1e      	blt.n	8009778 <_strtol_l.constprop.0+0xc0>
 800973a:	45b1      	cmp	r9, r6
 800973c:	d31c      	bcc.n	8009778 <_strtol_l.constprop.0+0xc0>
 800973e:	d101      	bne.n	8009744 <_strtol_l.constprop.0+0x8c>
 8009740:	45a2      	cmp	sl, r4
 8009742:	db19      	blt.n	8009778 <_strtol_l.constprop.0+0xc0>
 8009744:	fb06 4603 	mla	r6, r6, r3, r4
 8009748:	f04f 0c01 	mov.w	ip, #1
 800974c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009750:	e7e8      	b.n	8009724 <_strtol_l.constprop.0+0x6c>
 8009752:	2c2b      	cmp	r4, #43	; 0x2b
 8009754:	bf04      	itt	eq
 8009756:	782c      	ldrbeq	r4, [r5, #0]
 8009758:	1cb5      	addeq	r5, r6, #2
 800975a:	e7ca      	b.n	80096f2 <_strtol_l.constprop.0+0x3a>
 800975c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009760:	f1be 0f19 	cmp.w	lr, #25
 8009764:	d801      	bhi.n	800976a <_strtol_l.constprop.0+0xb2>
 8009766:	3c37      	subs	r4, #55	; 0x37
 8009768:	e7e2      	b.n	8009730 <_strtol_l.constprop.0+0x78>
 800976a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800976e:	f1be 0f19 	cmp.w	lr, #25
 8009772:	d804      	bhi.n	800977e <_strtol_l.constprop.0+0xc6>
 8009774:	3c57      	subs	r4, #87	; 0x57
 8009776:	e7db      	b.n	8009730 <_strtol_l.constprop.0+0x78>
 8009778:	f04f 3cff 	mov.w	ip, #4294967295
 800977c:	e7e6      	b.n	800974c <_strtol_l.constprop.0+0x94>
 800977e:	f1bc 0f00 	cmp.w	ip, #0
 8009782:	da05      	bge.n	8009790 <_strtol_l.constprop.0+0xd8>
 8009784:	2322      	movs	r3, #34	; 0x22
 8009786:	6003      	str	r3, [r0, #0]
 8009788:	4646      	mov	r6, r8
 800978a:	b942      	cbnz	r2, 800979e <_strtol_l.constprop.0+0xe6>
 800978c:	4630      	mov	r0, r6
 800978e:	e79e      	b.n	80096ce <_strtol_l.constprop.0+0x16>
 8009790:	b107      	cbz	r7, 8009794 <_strtol_l.constprop.0+0xdc>
 8009792:	4276      	negs	r6, r6
 8009794:	2a00      	cmp	r2, #0
 8009796:	d0f9      	beq.n	800978c <_strtol_l.constprop.0+0xd4>
 8009798:	f1bc 0f00 	cmp.w	ip, #0
 800979c:	d000      	beq.n	80097a0 <_strtol_l.constprop.0+0xe8>
 800979e:	1e69      	subs	r1, r5, #1
 80097a0:	6011      	str	r1, [r2, #0]
 80097a2:	e7f3      	b.n	800978c <_strtol_l.constprop.0+0xd4>
 80097a4:	2430      	movs	r4, #48	; 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1b1      	bne.n	800970e <_strtol_l.constprop.0+0x56>
 80097aa:	2308      	movs	r3, #8
 80097ac:	e7af      	b.n	800970e <_strtol_l.constprop.0+0x56>
 80097ae:	2c30      	cmp	r4, #48	; 0x30
 80097b0:	d0a5      	beq.n	80096fe <_strtol_l.constprop.0+0x46>
 80097b2:	230a      	movs	r3, #10
 80097b4:	e7ab      	b.n	800970e <_strtol_l.constprop.0+0x56>
 80097b6:	bf00      	nop
 80097b8:	0800c921 	.word	0x0800c921

080097bc <_strtol_r>:
 80097bc:	f7ff bf7c 	b.w	80096b8 <_strtol_l.constprop.0>

080097c0 <strtol>:
 80097c0:	4613      	mov	r3, r2
 80097c2:	460a      	mov	r2, r1
 80097c4:	4601      	mov	r1, r0
 80097c6:	4802      	ldr	r0, [pc, #8]	; (80097d0 <strtol+0x10>)
 80097c8:	6800      	ldr	r0, [r0, #0]
 80097ca:	f7ff bf75 	b.w	80096b8 <_strtol_l.constprop.0>
 80097ce:	bf00      	nop
 80097d0:	20000018 	.word	0x20000018

080097d4 <__swbuf_r>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	460e      	mov	r6, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	4605      	mov	r5, r0
 80097dc:	b118      	cbz	r0, 80097e6 <__swbuf_r+0x12>
 80097de:	6983      	ldr	r3, [r0, #24]
 80097e0:	b90b      	cbnz	r3, 80097e6 <__swbuf_r+0x12>
 80097e2:	f001 f84d 	bl	800a880 <__sinit>
 80097e6:	4b21      	ldr	r3, [pc, #132]	; (800986c <__swbuf_r+0x98>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d12b      	bne.n	8009844 <__swbuf_r+0x70>
 80097ec:	686c      	ldr	r4, [r5, #4]
 80097ee:	69a3      	ldr	r3, [r4, #24]
 80097f0:	60a3      	str	r3, [r4, #8]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	071a      	lsls	r2, r3, #28
 80097f6:	d52f      	bpl.n	8009858 <__swbuf_r+0x84>
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	b36b      	cbz	r3, 8009858 <__swbuf_r+0x84>
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	6820      	ldr	r0, [r4, #0]
 8009800:	1ac0      	subs	r0, r0, r3
 8009802:	6963      	ldr	r3, [r4, #20]
 8009804:	b2f6      	uxtb	r6, r6
 8009806:	4283      	cmp	r3, r0
 8009808:	4637      	mov	r7, r6
 800980a:	dc04      	bgt.n	8009816 <__swbuf_r+0x42>
 800980c:	4621      	mov	r1, r4
 800980e:	4628      	mov	r0, r5
 8009810:	f000 ffa2 	bl	800a758 <_fflush_r>
 8009814:	bb30      	cbnz	r0, 8009864 <__swbuf_r+0x90>
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	3b01      	subs	r3, #1
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	6022      	str	r2, [r4, #0]
 8009822:	701e      	strb	r6, [r3, #0]
 8009824:	6963      	ldr	r3, [r4, #20]
 8009826:	3001      	adds	r0, #1
 8009828:	4283      	cmp	r3, r0
 800982a:	d004      	beq.n	8009836 <__swbuf_r+0x62>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	07db      	lsls	r3, r3, #31
 8009830:	d506      	bpl.n	8009840 <__swbuf_r+0x6c>
 8009832:	2e0a      	cmp	r6, #10
 8009834:	d104      	bne.n	8009840 <__swbuf_r+0x6c>
 8009836:	4621      	mov	r1, r4
 8009838:	4628      	mov	r0, r5
 800983a:	f000 ff8d 	bl	800a758 <_fflush_r>
 800983e:	b988      	cbnz	r0, 8009864 <__swbuf_r+0x90>
 8009840:	4638      	mov	r0, r7
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <__swbuf_r+0x9c>)
 8009846:	429c      	cmp	r4, r3
 8009848:	d101      	bne.n	800984e <__swbuf_r+0x7a>
 800984a:	68ac      	ldr	r4, [r5, #8]
 800984c:	e7cf      	b.n	80097ee <__swbuf_r+0x1a>
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <__swbuf_r+0xa0>)
 8009850:	429c      	cmp	r4, r3
 8009852:	bf08      	it	eq
 8009854:	68ec      	ldreq	r4, [r5, #12]
 8009856:	e7ca      	b.n	80097ee <__swbuf_r+0x1a>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f80c 	bl	8009878 <__swsetup_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	d0cb      	beq.n	80097fc <__swbuf_r+0x28>
 8009864:	f04f 37ff 	mov.w	r7, #4294967295
 8009868:	e7ea      	b.n	8009840 <__swbuf_r+0x6c>
 800986a:	bf00      	nop
 800986c:	0800cad4 	.word	0x0800cad4
 8009870:	0800caf4 	.word	0x0800caf4
 8009874:	0800cab4 	.word	0x0800cab4

08009878 <__swsetup_r>:
 8009878:	4b32      	ldr	r3, [pc, #200]	; (8009944 <__swsetup_r+0xcc>)
 800987a:	b570      	push	{r4, r5, r6, lr}
 800987c:	681d      	ldr	r5, [r3, #0]
 800987e:	4606      	mov	r6, r0
 8009880:	460c      	mov	r4, r1
 8009882:	b125      	cbz	r5, 800988e <__swsetup_r+0x16>
 8009884:	69ab      	ldr	r3, [r5, #24]
 8009886:	b913      	cbnz	r3, 800988e <__swsetup_r+0x16>
 8009888:	4628      	mov	r0, r5
 800988a:	f000 fff9 	bl	800a880 <__sinit>
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <__swsetup_r+0xd0>)
 8009890:	429c      	cmp	r4, r3
 8009892:	d10f      	bne.n	80098b4 <__swsetup_r+0x3c>
 8009894:	686c      	ldr	r4, [r5, #4]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800989c:	0719      	lsls	r1, r3, #28
 800989e:	d42c      	bmi.n	80098fa <__swsetup_r+0x82>
 80098a0:	06dd      	lsls	r5, r3, #27
 80098a2:	d411      	bmi.n	80098c8 <__swsetup_r+0x50>
 80098a4:	2309      	movs	r3, #9
 80098a6:	6033      	str	r3, [r6, #0]
 80098a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	e03e      	b.n	8009932 <__swsetup_r+0xba>
 80098b4:	4b25      	ldr	r3, [pc, #148]	; (800994c <__swsetup_r+0xd4>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	d101      	bne.n	80098be <__swsetup_r+0x46>
 80098ba:	68ac      	ldr	r4, [r5, #8]
 80098bc:	e7eb      	b.n	8009896 <__swsetup_r+0x1e>
 80098be:	4b24      	ldr	r3, [pc, #144]	; (8009950 <__swsetup_r+0xd8>)
 80098c0:	429c      	cmp	r4, r3
 80098c2:	bf08      	it	eq
 80098c4:	68ec      	ldreq	r4, [r5, #12]
 80098c6:	e7e6      	b.n	8009896 <__swsetup_r+0x1e>
 80098c8:	0758      	lsls	r0, r3, #29
 80098ca:	d512      	bpl.n	80098f2 <__swsetup_r+0x7a>
 80098cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ce:	b141      	cbz	r1, 80098e2 <__swsetup_r+0x6a>
 80098d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098d4:	4299      	cmp	r1, r3
 80098d6:	d002      	beq.n	80098de <__swsetup_r+0x66>
 80098d8:	4630      	mov	r0, r6
 80098da:	f002 f93b 	bl	800bb54 <_free_r>
 80098de:	2300      	movs	r3, #0
 80098e0:	6363      	str	r3, [r4, #52]	; 0x34
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	2300      	movs	r3, #0
 80098ec:	6063      	str	r3, [r4, #4]
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f043 0308 	orr.w	r3, r3, #8
 80098f8:	81a3      	strh	r3, [r4, #12]
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	b94b      	cbnz	r3, 8009912 <__swsetup_r+0x9a>
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009908:	d003      	beq.n	8009912 <__swsetup_r+0x9a>
 800990a:	4621      	mov	r1, r4
 800990c:	4630      	mov	r0, r6
 800990e:	f001 fbef 	bl	800b0f0 <__smakebuf_r>
 8009912:	89a0      	ldrh	r0, [r4, #12]
 8009914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009918:	f010 0301 	ands.w	r3, r0, #1
 800991c:	d00a      	beq.n	8009934 <__swsetup_r+0xbc>
 800991e:	2300      	movs	r3, #0
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	6963      	ldr	r3, [r4, #20]
 8009924:	425b      	negs	r3, r3
 8009926:	61a3      	str	r3, [r4, #24]
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	b943      	cbnz	r3, 800993e <__swsetup_r+0xc6>
 800992c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009930:	d1ba      	bne.n	80098a8 <__swsetup_r+0x30>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	0781      	lsls	r1, r0, #30
 8009936:	bf58      	it	pl
 8009938:	6963      	ldrpl	r3, [r4, #20]
 800993a:	60a3      	str	r3, [r4, #8]
 800993c:	e7f4      	b.n	8009928 <__swsetup_r+0xb0>
 800993e:	2000      	movs	r0, #0
 8009940:	e7f7      	b.n	8009932 <__swsetup_r+0xba>
 8009942:	bf00      	nop
 8009944:	20000018 	.word	0x20000018
 8009948:	0800cad4 	.word	0x0800cad4
 800994c:	0800caf4 	.word	0x0800caf4
 8009950:	0800cab4 	.word	0x0800cab4

08009954 <quorem>:
 8009954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009958:	6903      	ldr	r3, [r0, #16]
 800995a:	690c      	ldr	r4, [r1, #16]
 800995c:	42a3      	cmp	r3, r4
 800995e:	4607      	mov	r7, r0
 8009960:	f2c0 8081 	blt.w	8009a66 <quorem+0x112>
 8009964:	3c01      	subs	r4, #1
 8009966:	f101 0814 	add.w	r8, r1, #20
 800996a:	f100 0514 	add.w	r5, r0, #20
 800996e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009972:	9301      	str	r3, [sp, #4]
 8009974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800997c:	3301      	adds	r3, #1
 800997e:	429a      	cmp	r2, r3
 8009980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009988:	fbb2 f6f3 	udiv	r6, r2, r3
 800998c:	d331      	bcc.n	80099f2 <quorem+0x9e>
 800998e:	f04f 0e00 	mov.w	lr, #0
 8009992:	4640      	mov	r0, r8
 8009994:	46ac      	mov	ip, r5
 8009996:	46f2      	mov	sl, lr
 8009998:	f850 2b04 	ldr.w	r2, [r0], #4
 800999c:	b293      	uxth	r3, r2
 800999e:	fb06 e303 	mla	r3, r6, r3, lr
 80099a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	ebaa 0303 	sub.w	r3, sl, r3
 80099ac:	f8dc a000 	ldr.w	sl, [ip]
 80099b0:	0c12      	lsrs	r2, r2, #16
 80099b2:	fa13 f38a 	uxtah	r3, r3, sl
 80099b6:	fb06 e202 	mla	r2, r6, r2, lr
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	9b00      	ldr	r3, [sp, #0]
 80099be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099c2:	b292      	uxth	r2, r2
 80099c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80099d0:	4581      	cmp	r9, r0
 80099d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099d6:	f84c 3b04 	str.w	r3, [ip], #4
 80099da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099de:	d2db      	bcs.n	8009998 <quorem+0x44>
 80099e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80099e4:	b92b      	cbnz	r3, 80099f2 <quorem+0x9e>
 80099e6:	9b01      	ldr	r3, [sp, #4]
 80099e8:	3b04      	subs	r3, #4
 80099ea:	429d      	cmp	r5, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	d32e      	bcc.n	8009a4e <quorem+0xfa>
 80099f0:	613c      	str	r4, [r7, #16]
 80099f2:	4638      	mov	r0, r7
 80099f4:	f001 fea2 	bl	800b73c <__mcmp>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	db24      	blt.n	8009a46 <quorem+0xf2>
 80099fc:	3601      	adds	r6, #1
 80099fe:	4628      	mov	r0, r5
 8009a00:	f04f 0c00 	mov.w	ip, #0
 8009a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a08:	f8d0 e000 	ldr.w	lr, [r0]
 8009a0c:	b293      	uxth	r3, r2
 8009a0e:	ebac 0303 	sub.w	r3, ip, r3
 8009a12:	0c12      	lsrs	r2, r2, #16
 8009a14:	fa13 f38e 	uxtah	r3, r3, lr
 8009a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a26:	45c1      	cmp	r9, r8
 8009a28:	f840 3b04 	str.w	r3, [r0], #4
 8009a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a30:	d2e8      	bcs.n	8009a04 <quorem+0xb0>
 8009a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a3a:	b922      	cbnz	r2, 8009a46 <quorem+0xf2>
 8009a3c:	3b04      	subs	r3, #4
 8009a3e:	429d      	cmp	r5, r3
 8009a40:	461a      	mov	r2, r3
 8009a42:	d30a      	bcc.n	8009a5a <quorem+0x106>
 8009a44:	613c      	str	r4, [r7, #16]
 8009a46:	4630      	mov	r0, r6
 8009a48:	b003      	add	sp, #12
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	6812      	ldr	r2, [r2, #0]
 8009a50:	3b04      	subs	r3, #4
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	d1cc      	bne.n	80099f0 <quorem+0x9c>
 8009a56:	3c01      	subs	r4, #1
 8009a58:	e7c7      	b.n	80099ea <quorem+0x96>
 8009a5a:	6812      	ldr	r2, [r2, #0]
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	d1f0      	bne.n	8009a44 <quorem+0xf0>
 8009a62:	3c01      	subs	r4, #1
 8009a64:	e7eb      	b.n	8009a3e <quorem+0xea>
 8009a66:	2000      	movs	r0, #0
 8009a68:	e7ee      	b.n	8009a48 <quorem+0xf4>
 8009a6a:	0000      	movs	r0, r0
 8009a6c:	0000      	movs	r0, r0
	...

08009a70 <_dtoa_r>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	ed2d 8b04 	vpush	{d8-d9}
 8009a78:	ec57 6b10 	vmov	r6, r7, d0
 8009a7c:	b093      	sub	sp, #76	; 0x4c
 8009a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a84:	9106      	str	r1, [sp, #24]
 8009a86:	ee10 aa10 	vmov	sl, s0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a90:	46bb      	mov	fp, r7
 8009a92:	b975      	cbnz	r5, 8009ab2 <_dtoa_r+0x42>
 8009a94:	2010      	movs	r0, #16
 8009a96:	f001 fb6b 	bl	800b170 <malloc>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a9e:	b920      	cbnz	r0, 8009aaa <_dtoa_r+0x3a>
 8009aa0:	4ba7      	ldr	r3, [pc, #668]	; (8009d40 <_dtoa_r+0x2d0>)
 8009aa2:	21ea      	movs	r1, #234	; 0xea
 8009aa4:	48a7      	ldr	r0, [pc, #668]	; (8009d44 <_dtoa_r+0x2d4>)
 8009aa6:	f002 fc79 	bl	800c39c <__assert_func>
 8009aaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009aae:	6005      	str	r5, [r0, #0]
 8009ab0:	60c5      	str	r5, [r0, #12]
 8009ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ab4:	6819      	ldr	r1, [r3, #0]
 8009ab6:	b151      	cbz	r1, 8009ace <_dtoa_r+0x5e>
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	604a      	str	r2, [r1, #4]
 8009abc:	2301      	movs	r3, #1
 8009abe:	4093      	lsls	r3, r2
 8009ac0:	608b      	str	r3, [r1, #8]
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f001 fbae 	bl	800b224 <_Bfree>
 8009ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	1e3b      	subs	r3, r7, #0
 8009ad0:	bfaa      	itet	ge
 8009ad2:	2300      	movge	r3, #0
 8009ad4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ad8:	f8c8 3000 	strge.w	r3, [r8]
 8009adc:	4b9a      	ldr	r3, [pc, #616]	; (8009d48 <_dtoa_r+0x2d8>)
 8009ade:	bfbc      	itt	lt
 8009ae0:	2201      	movlt	r2, #1
 8009ae2:	f8c8 2000 	strlt.w	r2, [r8]
 8009ae6:	ea33 030b 	bics.w	r3, r3, fp
 8009aea:	d11b      	bne.n	8009b24 <_dtoa_r+0xb4>
 8009aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aee:	f242 730f 	movw	r3, #9999	; 0x270f
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009af8:	4333      	orrs	r3, r6
 8009afa:	f000 8592 	beq.w	800a622 <_dtoa_r+0xbb2>
 8009afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b00:	b963      	cbnz	r3, 8009b1c <_dtoa_r+0xac>
 8009b02:	4b92      	ldr	r3, [pc, #584]	; (8009d4c <_dtoa_r+0x2dc>)
 8009b04:	e022      	b.n	8009b4c <_dtoa_r+0xdc>
 8009b06:	4b92      	ldr	r3, [pc, #584]	; (8009d50 <_dtoa_r+0x2e0>)
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	9801      	ldr	r0, [sp, #4]
 8009b12:	b013      	add	sp, #76	; 0x4c
 8009b14:	ecbd 8b04 	vpop	{d8-d9}
 8009b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1c:	4b8b      	ldr	r3, [pc, #556]	; (8009d4c <_dtoa_r+0x2dc>)
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	3303      	adds	r3, #3
 8009b22:	e7f3      	b.n	8009b0c <_dtoa_r+0x9c>
 8009b24:	2200      	movs	r2, #0
 8009b26:	2300      	movs	r3, #0
 8009b28:	4650      	mov	r0, sl
 8009b2a:	4659      	mov	r1, fp
 8009b2c:	f7f6 ffec 	bl	8000b08 <__aeabi_dcmpeq>
 8009b30:	ec4b ab19 	vmov	d9, sl, fp
 8009b34:	4680      	mov	r8, r0
 8009b36:	b158      	cbz	r0, 8009b50 <_dtoa_r+0xe0>
 8009b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 856b 	beq.w	800a61c <_dtoa_r+0xbac>
 8009b46:	4883      	ldr	r0, [pc, #524]	; (8009d54 <_dtoa_r+0x2e4>)
 8009b48:	6018      	str	r0, [r3, #0]
 8009b4a:	1e43      	subs	r3, r0, #1
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	e7df      	b.n	8009b10 <_dtoa_r+0xa0>
 8009b50:	ec4b ab10 	vmov	d0, sl, fp
 8009b54:	aa10      	add	r2, sp, #64	; 0x40
 8009b56:	a911      	add	r1, sp, #68	; 0x44
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f001 ff11 	bl	800b980 <__d2b>
 8009b5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b62:	ee08 0a10 	vmov	s16, r0
 8009b66:	2d00      	cmp	r5, #0
 8009b68:	f000 8084 	beq.w	8009c74 <_dtoa_r+0x204>
 8009b6c:	ee19 3a90 	vmov	r3, s19
 8009b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b78:	4656      	mov	r6, sl
 8009b7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b86:	4b74      	ldr	r3, [pc, #464]	; (8009d58 <_dtoa_r+0x2e8>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	f7f6 fb9b 	bl	80002c8 <__aeabi_dsub>
 8009b92:	a365      	add	r3, pc, #404	; (adr r3, 8009d28 <_dtoa_r+0x2b8>)
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f7f6 fd4e 	bl	8000638 <__aeabi_dmul>
 8009b9c:	a364      	add	r3, pc, #400	; (adr r3, 8009d30 <_dtoa_r+0x2c0>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f7f6 fb93 	bl	80002cc <__adddf3>
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	4628      	mov	r0, r5
 8009baa:	460f      	mov	r7, r1
 8009bac:	f7f6 fcda 	bl	8000564 <__aeabi_i2d>
 8009bb0:	a361      	add	r3, pc, #388	; (adr r3, 8009d38 <_dtoa_r+0x2c8>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fd3f 	bl	8000638 <__aeabi_dmul>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	f7f6 fb83 	bl	80002cc <__adddf3>
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	f7f6 ffe5 	bl	8000b98 <__aeabi_d2iz>
 8009bce:	2200      	movs	r2, #0
 8009bd0:	9000      	str	r0, [sp, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f6 ffa0 	bl	8000b1c <__aeabi_dcmplt>
 8009bdc:	b150      	cbz	r0, 8009bf4 <_dtoa_r+0x184>
 8009bde:	9800      	ldr	r0, [sp, #0]
 8009be0:	f7f6 fcc0 	bl	8000564 <__aeabi_i2d>
 8009be4:	4632      	mov	r2, r6
 8009be6:	463b      	mov	r3, r7
 8009be8:	f7f6 ff8e 	bl	8000b08 <__aeabi_dcmpeq>
 8009bec:	b910      	cbnz	r0, 8009bf4 <_dtoa_r+0x184>
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	9b00      	ldr	r3, [sp, #0]
 8009bf6:	2b16      	cmp	r3, #22
 8009bf8:	d85a      	bhi.n	8009cb0 <_dtoa_r+0x240>
 8009bfa:	9a00      	ldr	r2, [sp, #0]
 8009bfc:	4b57      	ldr	r3, [pc, #348]	; (8009d5c <_dtoa_r+0x2ec>)
 8009bfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	ec51 0b19 	vmov	r0, r1, d9
 8009c0a:	f7f6 ff87 	bl	8000b1c <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d050      	beq.n	8009cb4 <_dtoa_r+0x244>
 8009c12:	9b00      	ldr	r3, [sp, #0]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c1e:	1b5d      	subs	r5, r3, r5
 8009c20:	1e6b      	subs	r3, r5, #1
 8009c22:	9305      	str	r3, [sp, #20]
 8009c24:	bf45      	ittet	mi
 8009c26:	f1c5 0301 	rsbmi	r3, r5, #1
 8009c2a:	9304      	strmi	r3, [sp, #16]
 8009c2c:	2300      	movpl	r3, #0
 8009c2e:	2300      	movmi	r3, #0
 8009c30:	bf4c      	ite	mi
 8009c32:	9305      	strmi	r3, [sp, #20]
 8009c34:	9304      	strpl	r3, [sp, #16]
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	db3d      	blt.n	8009cb8 <_dtoa_r+0x248>
 8009c3c:	9b05      	ldr	r3, [sp, #20]
 8009c3e:	9a00      	ldr	r2, [sp, #0]
 8009c40:	920a      	str	r2, [sp, #40]	; 0x28
 8009c42:	4413      	add	r3, r2
 8009c44:	9305      	str	r3, [sp, #20]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9307      	str	r3, [sp, #28]
 8009c4a:	9b06      	ldr	r3, [sp, #24]
 8009c4c:	2b09      	cmp	r3, #9
 8009c4e:	f200 8089 	bhi.w	8009d64 <_dtoa_r+0x2f4>
 8009c52:	2b05      	cmp	r3, #5
 8009c54:	bfc4      	itt	gt
 8009c56:	3b04      	subgt	r3, #4
 8009c58:	9306      	strgt	r3, [sp, #24]
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	f1a3 0302 	sub.w	r3, r3, #2
 8009c60:	bfcc      	ite	gt
 8009c62:	2500      	movgt	r5, #0
 8009c64:	2501      	movle	r5, #1
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	f200 8087 	bhi.w	8009d7a <_dtoa_r+0x30a>
 8009c6c:	e8df f003 	tbb	[pc, r3]
 8009c70:	59383a2d 	.word	0x59383a2d
 8009c74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c78:	441d      	add	r5, r3
 8009c7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	bfc1      	itttt	gt
 8009c82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c92:	bfda      	itte	le
 8009c94:	f1c3 0320 	rsble	r3, r3, #32
 8009c98:	fa06 f003 	lslle.w	r0, r6, r3
 8009c9c:	4318      	orrgt	r0, r3
 8009c9e:	f7f6 fc51 	bl	8000544 <__aeabi_ui2d>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009caa:	3d01      	subs	r5, #1
 8009cac:	930e      	str	r3, [sp, #56]	; 0x38
 8009cae:	e76a      	b.n	8009b86 <_dtoa_r+0x116>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e7b2      	b.n	8009c1a <_dtoa_r+0x1aa>
 8009cb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009cb6:	e7b1      	b.n	8009c1c <_dtoa_r+0x1ac>
 8009cb8:	9b04      	ldr	r3, [sp, #16]
 8009cba:	9a00      	ldr	r2, [sp, #0]
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	9304      	str	r3, [sp, #16]
 8009cc0:	4253      	negs	r3, r2
 8009cc2:	9307      	str	r3, [sp, #28]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cc8:	e7bf      	b.n	8009c4a <_dtoa_r+0x1da>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9308      	str	r3, [sp, #32]
 8009cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	dc55      	bgt.n	8009d80 <_dtoa_r+0x310>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8009cde:	e00c      	b.n	8009cfa <_dtoa_r+0x28a>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e7f3      	b.n	8009ccc <_dtoa_r+0x25c>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ce8:	9308      	str	r3, [sp, #32]
 8009cea:	9b00      	ldr	r3, [sp, #0]
 8009cec:	4413      	add	r3, r2
 8009cee:	9302      	str	r3, [sp, #8]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	9303      	str	r3, [sp, #12]
 8009cf6:	bfb8      	it	lt
 8009cf8:	2301      	movlt	r3, #1
 8009cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	6042      	str	r2, [r0, #4]
 8009d00:	2204      	movs	r2, #4
 8009d02:	f102 0614 	add.w	r6, r2, #20
 8009d06:	429e      	cmp	r6, r3
 8009d08:	6841      	ldr	r1, [r0, #4]
 8009d0a:	d93d      	bls.n	8009d88 <_dtoa_r+0x318>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f001 fa49 	bl	800b1a4 <_Balloc>
 8009d12:	9001      	str	r0, [sp, #4]
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d13b      	bne.n	8009d90 <_dtoa_r+0x320>
 8009d18:	4b11      	ldr	r3, [pc, #68]	; (8009d60 <_dtoa_r+0x2f0>)
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d20:	e6c0      	b.n	8009aa4 <_dtoa_r+0x34>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e7df      	b.n	8009ce6 <_dtoa_r+0x276>
 8009d26:	bf00      	nop
 8009d28:	636f4361 	.word	0x636f4361
 8009d2c:	3fd287a7 	.word	0x3fd287a7
 8009d30:	8b60c8b3 	.word	0x8b60c8b3
 8009d34:	3fc68a28 	.word	0x3fc68a28
 8009d38:	509f79fb 	.word	0x509f79fb
 8009d3c:	3fd34413 	.word	0x3fd34413
 8009d40:	0800ca2e 	.word	0x0800ca2e
 8009d44:	0800ca45 	.word	0x0800ca45
 8009d48:	7ff00000 	.word	0x7ff00000
 8009d4c:	0800ca2a 	.word	0x0800ca2a
 8009d50:	0800ca21 	.word	0x0800ca21
 8009d54:	0800c8a1 	.word	0x0800c8a1
 8009d58:	3ff80000 	.word	0x3ff80000
 8009d5c:	0800cc18 	.word	0x0800cc18
 8009d60:	0800caa0 	.word	0x0800caa0
 8009d64:	2501      	movs	r5, #1
 8009d66:	2300      	movs	r3, #0
 8009d68:	9306      	str	r3, [sp, #24]
 8009d6a:	9508      	str	r5, [sp, #32]
 8009d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d74:	2200      	movs	r2, #0
 8009d76:	2312      	movs	r3, #18
 8009d78:	e7b0      	b.n	8009cdc <_dtoa_r+0x26c>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	9308      	str	r3, [sp, #32]
 8009d7e:	e7f5      	b.n	8009d6c <_dtoa_r+0x2fc>
 8009d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d86:	e7b8      	b.n	8009cfa <_dtoa_r+0x28a>
 8009d88:	3101      	adds	r1, #1
 8009d8a:	6041      	str	r1, [r0, #4]
 8009d8c:	0052      	lsls	r2, r2, #1
 8009d8e:	e7b8      	b.n	8009d02 <_dtoa_r+0x292>
 8009d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d92:	9a01      	ldr	r2, [sp, #4]
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	2b0e      	cmp	r3, #14
 8009d9a:	f200 809d 	bhi.w	8009ed8 <_dtoa_r+0x468>
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	f000 809a 	beq.w	8009ed8 <_dtoa_r+0x468>
 8009da4:	9b00      	ldr	r3, [sp, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	dd32      	ble.n	8009e10 <_dtoa_r+0x3a0>
 8009daa:	4ab7      	ldr	r2, [pc, #732]	; (800a088 <_dtoa_r+0x618>)
 8009dac:	f003 030f 	and.w	r3, r3, #15
 8009db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009db4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009db8:	9b00      	ldr	r3, [sp, #0]
 8009dba:	05d8      	lsls	r0, r3, #23
 8009dbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009dc0:	d516      	bpl.n	8009df0 <_dtoa_r+0x380>
 8009dc2:	4bb2      	ldr	r3, [pc, #712]	; (800a08c <_dtoa_r+0x61c>)
 8009dc4:	ec51 0b19 	vmov	r0, r1, d9
 8009dc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dcc:	f7f6 fd5e 	bl	800088c <__aeabi_ddiv>
 8009dd0:	f007 070f 	and.w	r7, r7, #15
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	468b      	mov	fp, r1
 8009dd8:	2503      	movs	r5, #3
 8009dda:	4eac      	ldr	r6, [pc, #688]	; (800a08c <_dtoa_r+0x61c>)
 8009ddc:	b957      	cbnz	r7, 8009df4 <_dtoa_r+0x384>
 8009dde:	4642      	mov	r2, r8
 8009de0:	464b      	mov	r3, r9
 8009de2:	4650      	mov	r0, sl
 8009de4:	4659      	mov	r1, fp
 8009de6:	f7f6 fd51 	bl	800088c <__aeabi_ddiv>
 8009dea:	4682      	mov	sl, r0
 8009dec:	468b      	mov	fp, r1
 8009dee:	e028      	b.n	8009e42 <_dtoa_r+0x3d2>
 8009df0:	2502      	movs	r5, #2
 8009df2:	e7f2      	b.n	8009dda <_dtoa_r+0x36a>
 8009df4:	07f9      	lsls	r1, r7, #31
 8009df6:	d508      	bpl.n	8009e0a <_dtoa_r+0x39a>
 8009df8:	4640      	mov	r0, r8
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e00:	f7f6 fc1a 	bl	8000638 <__aeabi_dmul>
 8009e04:	3501      	adds	r5, #1
 8009e06:	4680      	mov	r8, r0
 8009e08:	4689      	mov	r9, r1
 8009e0a:	107f      	asrs	r7, r7, #1
 8009e0c:	3608      	adds	r6, #8
 8009e0e:	e7e5      	b.n	8009ddc <_dtoa_r+0x36c>
 8009e10:	f000 809b 	beq.w	8009f4a <_dtoa_r+0x4da>
 8009e14:	9b00      	ldr	r3, [sp, #0]
 8009e16:	4f9d      	ldr	r7, [pc, #628]	; (800a08c <_dtoa_r+0x61c>)
 8009e18:	425e      	negs	r6, r3
 8009e1a:	4b9b      	ldr	r3, [pc, #620]	; (800a088 <_dtoa_r+0x618>)
 8009e1c:	f006 020f 	and.w	r2, r6, #15
 8009e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	ec51 0b19 	vmov	r0, r1, d9
 8009e2c:	f7f6 fc04 	bl	8000638 <__aeabi_dmul>
 8009e30:	1136      	asrs	r6, r6, #4
 8009e32:	4682      	mov	sl, r0
 8009e34:	468b      	mov	fp, r1
 8009e36:	2300      	movs	r3, #0
 8009e38:	2502      	movs	r5, #2
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	d17a      	bne.n	8009f34 <_dtoa_r+0x4c4>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1d3      	bne.n	8009dea <_dtoa_r+0x37a>
 8009e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 8082 	beq.w	8009f4e <_dtoa_r+0x4de>
 8009e4a:	4b91      	ldr	r3, [pc, #580]	; (800a090 <_dtoa_r+0x620>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4650      	mov	r0, sl
 8009e50:	4659      	mov	r1, fp
 8009e52:	f7f6 fe63 	bl	8000b1c <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d079      	beq.n	8009f4e <_dtoa_r+0x4de>
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d076      	beq.n	8009f4e <_dtoa_r+0x4de>
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dd36      	ble.n	8009ed4 <_dtoa_r+0x464>
 8009e66:	9b00      	ldr	r3, [sp, #0]
 8009e68:	4650      	mov	r0, sl
 8009e6a:	4659      	mov	r1, fp
 8009e6c:	1e5f      	subs	r7, r3, #1
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4b88      	ldr	r3, [pc, #544]	; (800a094 <_dtoa_r+0x624>)
 8009e72:	f7f6 fbe1 	bl	8000638 <__aeabi_dmul>
 8009e76:	9e02      	ldr	r6, [sp, #8]
 8009e78:	4682      	mov	sl, r0
 8009e7a:	468b      	mov	fp, r1
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f7f6 fb70 	bl	8000564 <__aeabi_i2d>
 8009e84:	4652      	mov	r2, sl
 8009e86:	465b      	mov	r3, fp
 8009e88:	f7f6 fbd6 	bl	8000638 <__aeabi_dmul>
 8009e8c:	4b82      	ldr	r3, [pc, #520]	; (800a098 <_dtoa_r+0x628>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f7f6 fa1c 	bl	80002cc <__adddf3>
 8009e94:	46d0      	mov	r8, sl
 8009e96:	46d9      	mov	r9, fp
 8009e98:	4682      	mov	sl, r0
 8009e9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	d158      	bne.n	8009f54 <_dtoa_r+0x4e4>
 8009ea2:	4b7e      	ldr	r3, [pc, #504]	; (800a09c <_dtoa_r+0x62c>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	f7f6 fa0d 	bl	80002c8 <__aeabi_dsub>
 8009eae:	4652      	mov	r2, sl
 8009eb0:	465b      	mov	r3, fp
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	f7f6 fe4f 	bl	8000b58 <__aeabi_dcmpgt>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f040 8295 	bne.w	800a3ea <_dtoa_r+0x97a>
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	f7f6 fe27 	bl	8000b1c <__aeabi_dcmplt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f040 8289 	bne.w	800a3e6 <_dtoa_r+0x976>
 8009ed4:	ec5b ab19 	vmov	sl, fp, d9
 8009ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f2c0 8148 	blt.w	800a170 <_dtoa_r+0x700>
 8009ee0:	9a00      	ldr	r2, [sp, #0]
 8009ee2:	2a0e      	cmp	r2, #14
 8009ee4:	f300 8144 	bgt.w	800a170 <_dtoa_r+0x700>
 8009ee8:	4b67      	ldr	r3, [pc, #412]	; (800a088 <_dtoa_r+0x618>)
 8009eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f280 80d5 	bge.w	800a0a4 <_dtoa_r+0x634>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f300 80d1 	bgt.w	800a0a4 <_dtoa_r+0x634>
 8009f02:	f040 826f 	bne.w	800a3e4 <_dtoa_r+0x974>
 8009f06:	4b65      	ldr	r3, [pc, #404]	; (800a09c <_dtoa_r+0x62c>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	f7f6 fb93 	bl	8000638 <__aeabi_dmul>
 8009f12:	4652      	mov	r2, sl
 8009f14:	465b      	mov	r3, fp
 8009f16:	f7f6 fe15 	bl	8000b44 <__aeabi_dcmpge>
 8009f1a:	9e03      	ldr	r6, [sp, #12]
 8009f1c:	4637      	mov	r7, r6
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f040 8245 	bne.w	800a3ae <_dtoa_r+0x93e>
 8009f24:	9d01      	ldr	r5, [sp, #4]
 8009f26:	2331      	movs	r3, #49	; 0x31
 8009f28:	f805 3b01 	strb.w	r3, [r5], #1
 8009f2c:	9b00      	ldr	r3, [sp, #0]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	e240      	b.n	800a3b6 <_dtoa_r+0x946>
 8009f34:	07f2      	lsls	r2, r6, #31
 8009f36:	d505      	bpl.n	8009f44 <_dtoa_r+0x4d4>
 8009f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f3c:	f7f6 fb7c 	bl	8000638 <__aeabi_dmul>
 8009f40:	3501      	adds	r5, #1
 8009f42:	2301      	movs	r3, #1
 8009f44:	1076      	asrs	r6, r6, #1
 8009f46:	3708      	adds	r7, #8
 8009f48:	e777      	b.n	8009e3a <_dtoa_r+0x3ca>
 8009f4a:	2502      	movs	r5, #2
 8009f4c:	e779      	b.n	8009e42 <_dtoa_r+0x3d2>
 8009f4e:	9f00      	ldr	r7, [sp, #0]
 8009f50:	9e03      	ldr	r6, [sp, #12]
 8009f52:	e794      	b.n	8009e7e <_dtoa_r+0x40e>
 8009f54:	9901      	ldr	r1, [sp, #4]
 8009f56:	4b4c      	ldr	r3, [pc, #304]	; (800a088 <_dtoa_r+0x618>)
 8009f58:	4431      	add	r1, r6
 8009f5a:	910d      	str	r1, [sp, #52]	; 0x34
 8009f5c:	9908      	ldr	r1, [sp, #32]
 8009f5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f66:	2900      	cmp	r1, #0
 8009f68:	d043      	beq.n	8009ff2 <_dtoa_r+0x582>
 8009f6a:	494d      	ldr	r1, [pc, #308]	; (800a0a0 <_dtoa_r+0x630>)
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	f7f6 fc8d 	bl	800088c <__aeabi_ddiv>
 8009f72:	4652      	mov	r2, sl
 8009f74:	465b      	mov	r3, fp
 8009f76:	f7f6 f9a7 	bl	80002c8 <__aeabi_dsub>
 8009f7a:	9d01      	ldr	r5, [sp, #4]
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	468b      	mov	fp, r1
 8009f80:	4649      	mov	r1, r9
 8009f82:	4640      	mov	r0, r8
 8009f84:	f7f6 fe08 	bl	8000b98 <__aeabi_d2iz>
 8009f88:	4606      	mov	r6, r0
 8009f8a:	f7f6 faeb 	bl	8000564 <__aeabi_i2d>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	4640      	mov	r0, r8
 8009f94:	4649      	mov	r1, r9
 8009f96:	f7f6 f997 	bl	80002c8 <__aeabi_dsub>
 8009f9a:	3630      	adds	r6, #48	; 0x30
 8009f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4689      	mov	r9, r1
 8009fa8:	f7f6 fdb8 	bl	8000b1c <__aeabi_dcmplt>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d163      	bne.n	800a078 <_dtoa_r+0x608>
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	4936      	ldr	r1, [pc, #216]	; (800a090 <_dtoa_r+0x620>)
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f7f6 f986 	bl	80002c8 <__aeabi_dsub>
 8009fbc:	4652      	mov	r2, sl
 8009fbe:	465b      	mov	r3, fp
 8009fc0:	f7f6 fdac 	bl	8000b1c <__aeabi_dcmplt>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f040 80b5 	bne.w	800a134 <_dtoa_r+0x6c4>
 8009fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fcc:	429d      	cmp	r5, r3
 8009fce:	d081      	beq.n	8009ed4 <_dtoa_r+0x464>
 8009fd0:	4b30      	ldr	r3, [pc, #192]	; (800a094 <_dtoa_r+0x624>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4650      	mov	r0, sl
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	f7f6 fb2e 	bl	8000638 <__aeabi_dmul>
 8009fdc:	4b2d      	ldr	r3, [pc, #180]	; (800a094 <_dtoa_r+0x624>)
 8009fde:	4682      	mov	sl, r0
 8009fe0:	468b      	mov	fp, r1
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f7f6 fb26 	bl	8000638 <__aeabi_dmul>
 8009fec:	4680      	mov	r8, r0
 8009fee:	4689      	mov	r9, r1
 8009ff0:	e7c6      	b.n	8009f80 <_dtoa_r+0x510>
 8009ff2:	4650      	mov	r0, sl
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	f7f6 fb1f 	bl	8000638 <__aeabi_dmul>
 8009ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ffc:	9d01      	ldr	r5, [sp, #4]
 8009ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a000:	4682      	mov	sl, r0
 800a002:	468b      	mov	fp, r1
 800a004:	4649      	mov	r1, r9
 800a006:	4640      	mov	r0, r8
 800a008:	f7f6 fdc6 	bl	8000b98 <__aeabi_d2iz>
 800a00c:	4606      	mov	r6, r0
 800a00e:	f7f6 faa9 	bl	8000564 <__aeabi_i2d>
 800a012:	3630      	adds	r6, #48	; 0x30
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 f954 	bl	80002c8 <__aeabi_dsub>
 800a020:	f805 6b01 	strb.w	r6, [r5], #1
 800a024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a026:	429d      	cmp	r5, r3
 800a028:	4680      	mov	r8, r0
 800a02a:	4689      	mov	r9, r1
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	d124      	bne.n	800a07c <_dtoa_r+0x60c>
 800a032:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <_dtoa_r+0x630>)
 800a034:	4650      	mov	r0, sl
 800a036:	4659      	mov	r1, fp
 800a038:	f7f6 f948 	bl	80002cc <__adddf3>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4640      	mov	r0, r8
 800a042:	4649      	mov	r1, r9
 800a044:	f7f6 fd88 	bl	8000b58 <__aeabi_dcmpgt>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d173      	bne.n	800a134 <_dtoa_r+0x6c4>
 800a04c:	4652      	mov	r2, sl
 800a04e:	465b      	mov	r3, fp
 800a050:	4913      	ldr	r1, [pc, #76]	; (800a0a0 <_dtoa_r+0x630>)
 800a052:	2000      	movs	r0, #0
 800a054:	f7f6 f938 	bl	80002c8 <__aeabi_dsub>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 fd5c 	bl	8000b1c <__aeabi_dcmplt>
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f af35 	beq.w	8009ed4 <_dtoa_r+0x464>
 800a06a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a06c:	1e6b      	subs	r3, r5, #1
 800a06e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a074:	2b30      	cmp	r3, #48	; 0x30
 800a076:	d0f8      	beq.n	800a06a <_dtoa_r+0x5fa>
 800a078:	9700      	str	r7, [sp, #0]
 800a07a:	e049      	b.n	800a110 <_dtoa_r+0x6a0>
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <_dtoa_r+0x624>)
 800a07e:	f7f6 fadb 	bl	8000638 <__aeabi_dmul>
 800a082:	4680      	mov	r8, r0
 800a084:	4689      	mov	r9, r1
 800a086:	e7bd      	b.n	800a004 <_dtoa_r+0x594>
 800a088:	0800cc18 	.word	0x0800cc18
 800a08c:	0800cbf0 	.word	0x0800cbf0
 800a090:	3ff00000 	.word	0x3ff00000
 800a094:	40240000 	.word	0x40240000
 800a098:	401c0000 	.word	0x401c0000
 800a09c:	40140000 	.word	0x40140000
 800a0a0:	3fe00000 	.word	0x3fe00000
 800a0a4:	9d01      	ldr	r5, [sp, #4]
 800a0a6:	4656      	mov	r6, sl
 800a0a8:	465f      	mov	r7, fp
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	f7f6 fbeb 	bl	800088c <__aeabi_ddiv>
 800a0b6:	f7f6 fd6f 	bl	8000b98 <__aeabi_d2iz>
 800a0ba:	4682      	mov	sl, r0
 800a0bc:	f7f6 fa52 	bl	8000564 <__aeabi_i2d>
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	f7f6 fab8 	bl	8000638 <__aeabi_dmul>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a0d4:	f7f6 f8f8 	bl	80002c8 <__aeabi_dsub>
 800a0d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a0dc:	9e01      	ldr	r6, [sp, #4]
 800a0de:	9f03      	ldr	r7, [sp, #12]
 800a0e0:	1bae      	subs	r6, r5, r6
 800a0e2:	42b7      	cmp	r7, r6
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	d135      	bne.n	800a156 <_dtoa_r+0x6e6>
 800a0ea:	f7f6 f8ef 	bl	80002cc <__adddf3>
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	464b      	mov	r3, r9
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	f7f6 fd2f 	bl	8000b58 <__aeabi_dcmpgt>
 800a0fa:	b9d0      	cbnz	r0, 800a132 <_dtoa_r+0x6c2>
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	f7f6 fd00 	bl	8000b08 <__aeabi_dcmpeq>
 800a108:	b110      	cbz	r0, 800a110 <_dtoa_r+0x6a0>
 800a10a:	f01a 0f01 	tst.w	sl, #1
 800a10e:	d110      	bne.n	800a132 <_dtoa_r+0x6c2>
 800a110:	4620      	mov	r0, r4
 800a112:	ee18 1a10 	vmov	r1, s16
 800a116:	f001 f885 	bl	800b224 <_Bfree>
 800a11a:	2300      	movs	r3, #0
 800a11c:	9800      	ldr	r0, [sp, #0]
 800a11e:	702b      	strb	r3, [r5, #0]
 800a120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a122:	3001      	adds	r0, #1
 800a124:	6018      	str	r0, [r3, #0]
 800a126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f43f acf1 	beq.w	8009b10 <_dtoa_r+0xa0>
 800a12e:	601d      	str	r5, [r3, #0]
 800a130:	e4ee      	b.n	8009b10 <_dtoa_r+0xa0>
 800a132:	9f00      	ldr	r7, [sp, #0]
 800a134:	462b      	mov	r3, r5
 800a136:	461d      	mov	r5, r3
 800a138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a13c:	2a39      	cmp	r2, #57	; 0x39
 800a13e:	d106      	bne.n	800a14e <_dtoa_r+0x6de>
 800a140:	9a01      	ldr	r2, [sp, #4]
 800a142:	429a      	cmp	r2, r3
 800a144:	d1f7      	bne.n	800a136 <_dtoa_r+0x6c6>
 800a146:	9901      	ldr	r1, [sp, #4]
 800a148:	2230      	movs	r2, #48	; 0x30
 800a14a:	3701      	adds	r7, #1
 800a14c:	700a      	strb	r2, [r1, #0]
 800a14e:	781a      	ldrb	r2, [r3, #0]
 800a150:	3201      	adds	r2, #1
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	e790      	b.n	800a078 <_dtoa_r+0x608>
 800a156:	4ba6      	ldr	r3, [pc, #664]	; (800a3f0 <_dtoa_r+0x980>)
 800a158:	2200      	movs	r2, #0
 800a15a:	f7f6 fa6d 	bl	8000638 <__aeabi_dmul>
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	f7f6 fccf 	bl	8000b08 <__aeabi_dcmpeq>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d09d      	beq.n	800a0aa <_dtoa_r+0x63a>
 800a16e:	e7cf      	b.n	800a110 <_dtoa_r+0x6a0>
 800a170:	9a08      	ldr	r2, [sp, #32]
 800a172:	2a00      	cmp	r2, #0
 800a174:	f000 80d7 	beq.w	800a326 <_dtoa_r+0x8b6>
 800a178:	9a06      	ldr	r2, [sp, #24]
 800a17a:	2a01      	cmp	r2, #1
 800a17c:	f300 80ba 	bgt.w	800a2f4 <_dtoa_r+0x884>
 800a180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a182:	2a00      	cmp	r2, #0
 800a184:	f000 80b2 	beq.w	800a2ec <_dtoa_r+0x87c>
 800a188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a18c:	9e07      	ldr	r6, [sp, #28]
 800a18e:	9d04      	ldr	r5, [sp, #16]
 800a190:	9a04      	ldr	r2, [sp, #16]
 800a192:	441a      	add	r2, r3
 800a194:	9204      	str	r2, [sp, #16]
 800a196:	9a05      	ldr	r2, [sp, #20]
 800a198:	2101      	movs	r1, #1
 800a19a:	441a      	add	r2, r3
 800a19c:	4620      	mov	r0, r4
 800a19e:	9205      	str	r2, [sp, #20]
 800a1a0:	f001 f942 	bl	800b428 <__i2b>
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	dd0c      	ble.n	800a1c4 <_dtoa_r+0x754>
 800a1aa:	9b05      	ldr	r3, [sp, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	dd09      	ble.n	800a1c4 <_dtoa_r+0x754>
 800a1b0:	42ab      	cmp	r3, r5
 800a1b2:	9a04      	ldr	r2, [sp, #16]
 800a1b4:	bfa8      	it	ge
 800a1b6:	462b      	movge	r3, r5
 800a1b8:	1ad2      	subs	r2, r2, r3
 800a1ba:	9204      	str	r2, [sp, #16]
 800a1bc:	9a05      	ldr	r2, [sp, #20]
 800a1be:	1aed      	subs	r5, r5, r3
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	9305      	str	r3, [sp, #20]
 800a1c4:	9b07      	ldr	r3, [sp, #28]
 800a1c6:	b31b      	cbz	r3, 800a210 <_dtoa_r+0x7a0>
 800a1c8:	9b08      	ldr	r3, [sp, #32]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 80af 	beq.w	800a32e <_dtoa_r+0x8be>
 800a1d0:	2e00      	cmp	r6, #0
 800a1d2:	dd13      	ble.n	800a1fc <_dtoa_r+0x78c>
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f001 f9e5 	bl	800b5a8 <__pow5mult>
 800a1de:	ee18 2a10 	vmov	r2, s16
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	4607      	mov	r7, r0
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f001 f934 	bl	800b454 <__multiply>
 800a1ec:	ee18 1a10 	vmov	r1, s16
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f001 f816 	bl	800b224 <_Bfree>
 800a1f8:	ee08 8a10 	vmov	s16, r8
 800a1fc:	9b07      	ldr	r3, [sp, #28]
 800a1fe:	1b9a      	subs	r2, r3, r6
 800a200:	d006      	beq.n	800a210 <_dtoa_r+0x7a0>
 800a202:	ee18 1a10 	vmov	r1, s16
 800a206:	4620      	mov	r0, r4
 800a208:	f001 f9ce 	bl	800b5a8 <__pow5mult>
 800a20c:	ee08 0a10 	vmov	s16, r0
 800a210:	2101      	movs	r1, #1
 800a212:	4620      	mov	r0, r4
 800a214:	f001 f908 	bl	800b428 <__i2b>
 800a218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	4606      	mov	r6, r0
 800a21e:	f340 8088 	ble.w	800a332 <_dtoa_r+0x8c2>
 800a222:	461a      	mov	r2, r3
 800a224:	4601      	mov	r1, r0
 800a226:	4620      	mov	r0, r4
 800a228:	f001 f9be 	bl	800b5a8 <__pow5mult>
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	4606      	mov	r6, r0
 800a232:	f340 8081 	ble.w	800a338 <_dtoa_r+0x8c8>
 800a236:	f04f 0800 	mov.w	r8, #0
 800a23a:	6933      	ldr	r3, [r6, #16]
 800a23c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a240:	6918      	ldr	r0, [r3, #16]
 800a242:	f001 f8a1 	bl	800b388 <__hi0bits>
 800a246:	f1c0 0020 	rsb	r0, r0, #32
 800a24a:	9b05      	ldr	r3, [sp, #20]
 800a24c:	4418      	add	r0, r3
 800a24e:	f010 001f 	ands.w	r0, r0, #31
 800a252:	f000 8092 	beq.w	800a37a <_dtoa_r+0x90a>
 800a256:	f1c0 0320 	rsb	r3, r0, #32
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	f340 808a 	ble.w	800a374 <_dtoa_r+0x904>
 800a260:	f1c0 001c 	rsb	r0, r0, #28
 800a264:	9b04      	ldr	r3, [sp, #16]
 800a266:	4403      	add	r3, r0
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	4403      	add	r3, r0
 800a26e:	4405      	add	r5, r0
 800a270:	9305      	str	r3, [sp, #20]
 800a272:	9b04      	ldr	r3, [sp, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	dd07      	ble.n	800a288 <_dtoa_r+0x818>
 800a278:	ee18 1a10 	vmov	r1, s16
 800a27c:	461a      	mov	r2, r3
 800a27e:	4620      	mov	r0, r4
 800a280:	f001 f9ec 	bl	800b65c <__lshift>
 800a284:	ee08 0a10 	vmov	s16, r0
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dd05      	ble.n	800a29a <_dtoa_r+0x82a>
 800a28e:	4631      	mov	r1, r6
 800a290:	461a      	mov	r2, r3
 800a292:	4620      	mov	r0, r4
 800a294:	f001 f9e2 	bl	800b65c <__lshift>
 800a298:	4606      	mov	r6, r0
 800a29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d06e      	beq.n	800a37e <_dtoa_r+0x90e>
 800a2a0:	ee18 0a10 	vmov	r0, s16
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	f001 fa49 	bl	800b73c <__mcmp>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	da67      	bge.n	800a37e <_dtoa_r+0x90e>
 800a2ae:	9b00      	ldr	r3, [sp, #0]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	ee18 1a10 	vmov	r1, s16
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 ffd3 	bl	800b268 <__multadd>
 800a2c2:	9b08      	ldr	r3, [sp, #32]
 800a2c4:	ee08 0a10 	vmov	s16, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 81b1 	beq.w	800a630 <_dtoa_r+0xbc0>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	220a      	movs	r2, #10
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 ffc7 	bl	800b268 <__multadd>
 800a2da:	9b02      	ldr	r3, [sp, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	4607      	mov	r7, r0
 800a2e0:	f300 808e 	bgt.w	800a400 <_dtoa_r+0x990>
 800a2e4:	9b06      	ldr	r3, [sp, #24]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	dc51      	bgt.n	800a38e <_dtoa_r+0x91e>
 800a2ea:	e089      	b.n	800a400 <_dtoa_r+0x990>
 800a2ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2f2:	e74b      	b.n	800a18c <_dtoa_r+0x71c>
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	1e5e      	subs	r6, r3, #1
 800a2f8:	9b07      	ldr	r3, [sp, #28]
 800a2fa:	42b3      	cmp	r3, r6
 800a2fc:	bfbf      	itttt	lt
 800a2fe:	9b07      	ldrlt	r3, [sp, #28]
 800a300:	9607      	strlt	r6, [sp, #28]
 800a302:	1af2      	sublt	r2, r6, r3
 800a304:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a306:	bfb6      	itet	lt
 800a308:	189b      	addlt	r3, r3, r2
 800a30a:	1b9e      	subge	r6, r3, r6
 800a30c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a30e:	9b03      	ldr	r3, [sp, #12]
 800a310:	bfb8      	it	lt
 800a312:	2600      	movlt	r6, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	bfb7      	itett	lt
 800a318:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a31c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a320:	1a9d      	sublt	r5, r3, r2
 800a322:	2300      	movlt	r3, #0
 800a324:	e734      	b.n	800a190 <_dtoa_r+0x720>
 800a326:	9e07      	ldr	r6, [sp, #28]
 800a328:	9d04      	ldr	r5, [sp, #16]
 800a32a:	9f08      	ldr	r7, [sp, #32]
 800a32c:	e73b      	b.n	800a1a6 <_dtoa_r+0x736>
 800a32e:	9a07      	ldr	r2, [sp, #28]
 800a330:	e767      	b.n	800a202 <_dtoa_r+0x792>
 800a332:	9b06      	ldr	r3, [sp, #24]
 800a334:	2b01      	cmp	r3, #1
 800a336:	dc18      	bgt.n	800a36a <_dtoa_r+0x8fa>
 800a338:	f1ba 0f00 	cmp.w	sl, #0
 800a33c:	d115      	bne.n	800a36a <_dtoa_r+0x8fa>
 800a33e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a342:	b993      	cbnz	r3, 800a36a <_dtoa_r+0x8fa>
 800a344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a348:	0d1b      	lsrs	r3, r3, #20
 800a34a:	051b      	lsls	r3, r3, #20
 800a34c:	b183      	cbz	r3, 800a370 <_dtoa_r+0x900>
 800a34e:	9b04      	ldr	r3, [sp, #16]
 800a350:	3301      	adds	r3, #1
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	9b05      	ldr	r3, [sp, #20]
 800a356:	3301      	adds	r3, #1
 800a358:	9305      	str	r3, [sp, #20]
 800a35a:	f04f 0801 	mov.w	r8, #1
 800a35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f af6a 	bne.w	800a23a <_dtoa_r+0x7ca>
 800a366:	2001      	movs	r0, #1
 800a368:	e76f      	b.n	800a24a <_dtoa_r+0x7da>
 800a36a:	f04f 0800 	mov.w	r8, #0
 800a36e:	e7f6      	b.n	800a35e <_dtoa_r+0x8ee>
 800a370:	4698      	mov	r8, r3
 800a372:	e7f4      	b.n	800a35e <_dtoa_r+0x8ee>
 800a374:	f43f af7d 	beq.w	800a272 <_dtoa_r+0x802>
 800a378:	4618      	mov	r0, r3
 800a37a:	301c      	adds	r0, #28
 800a37c:	e772      	b.n	800a264 <_dtoa_r+0x7f4>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	dc37      	bgt.n	800a3f4 <_dtoa_r+0x984>
 800a384:	9b06      	ldr	r3, [sp, #24]
 800a386:	2b02      	cmp	r3, #2
 800a388:	dd34      	ble.n	800a3f4 <_dtoa_r+0x984>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	9b02      	ldr	r3, [sp, #8]
 800a390:	b96b      	cbnz	r3, 800a3ae <_dtoa_r+0x93e>
 800a392:	4631      	mov	r1, r6
 800a394:	2205      	movs	r2, #5
 800a396:	4620      	mov	r0, r4
 800a398:	f000 ff66 	bl	800b268 <__multadd>
 800a39c:	4601      	mov	r1, r0
 800a39e:	4606      	mov	r6, r0
 800a3a0:	ee18 0a10 	vmov	r0, s16
 800a3a4:	f001 f9ca 	bl	800b73c <__mcmp>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f73f adbb 	bgt.w	8009f24 <_dtoa_r+0x4b4>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b0:	9d01      	ldr	r5, [sp, #4]
 800a3b2:	43db      	mvns	r3, r3
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	f04f 0800 	mov.w	r8, #0
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 ff31 	bl	800b224 <_Bfree>
 800a3c2:	2f00      	cmp	r7, #0
 800a3c4:	f43f aea4 	beq.w	800a110 <_dtoa_r+0x6a0>
 800a3c8:	f1b8 0f00 	cmp.w	r8, #0
 800a3cc:	d005      	beq.n	800a3da <_dtoa_r+0x96a>
 800a3ce:	45b8      	cmp	r8, r7
 800a3d0:	d003      	beq.n	800a3da <_dtoa_r+0x96a>
 800a3d2:	4641      	mov	r1, r8
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f000 ff25 	bl	800b224 <_Bfree>
 800a3da:	4639      	mov	r1, r7
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 ff21 	bl	800b224 <_Bfree>
 800a3e2:	e695      	b.n	800a110 <_dtoa_r+0x6a0>
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	4637      	mov	r7, r6
 800a3e8:	e7e1      	b.n	800a3ae <_dtoa_r+0x93e>
 800a3ea:	9700      	str	r7, [sp, #0]
 800a3ec:	4637      	mov	r7, r6
 800a3ee:	e599      	b.n	8009f24 <_dtoa_r+0x4b4>
 800a3f0:	40240000 	.word	0x40240000
 800a3f4:	9b08      	ldr	r3, [sp, #32]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 80ca 	beq.w	800a590 <_dtoa_r+0xb20>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	9302      	str	r3, [sp, #8]
 800a400:	2d00      	cmp	r5, #0
 800a402:	dd05      	ble.n	800a410 <_dtoa_r+0x9a0>
 800a404:	4639      	mov	r1, r7
 800a406:	462a      	mov	r2, r5
 800a408:	4620      	mov	r0, r4
 800a40a:	f001 f927 	bl	800b65c <__lshift>
 800a40e:	4607      	mov	r7, r0
 800a410:	f1b8 0f00 	cmp.w	r8, #0
 800a414:	d05b      	beq.n	800a4ce <_dtoa_r+0xa5e>
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 fec3 	bl	800b1a4 <_Balloc>
 800a41e:	4605      	mov	r5, r0
 800a420:	b928      	cbnz	r0, 800a42e <_dtoa_r+0x9be>
 800a422:	4b87      	ldr	r3, [pc, #540]	; (800a640 <_dtoa_r+0xbd0>)
 800a424:	4602      	mov	r2, r0
 800a426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a42a:	f7ff bb3b 	b.w	8009aa4 <_dtoa_r+0x34>
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	3202      	adds	r2, #2
 800a432:	0092      	lsls	r2, r2, #2
 800a434:	f107 010c 	add.w	r1, r7, #12
 800a438:	300c      	adds	r0, #12
 800a43a:	f7fd fb9d 	bl	8007b78 <memcpy>
 800a43e:	2201      	movs	r2, #1
 800a440:	4629      	mov	r1, r5
 800a442:	4620      	mov	r0, r4
 800a444:	f001 f90a 	bl	800b65c <__lshift>
 800a448:	9b01      	ldr	r3, [sp, #4]
 800a44a:	f103 0901 	add.w	r9, r3, #1
 800a44e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a452:	4413      	add	r3, r2
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	f00a 0301 	and.w	r3, sl, #1
 800a45a:	46b8      	mov	r8, r7
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	4607      	mov	r7, r0
 800a460:	4631      	mov	r1, r6
 800a462:	ee18 0a10 	vmov	r0, s16
 800a466:	f7ff fa75 	bl	8009954 <quorem>
 800a46a:	4641      	mov	r1, r8
 800a46c:	9002      	str	r0, [sp, #8]
 800a46e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a472:	ee18 0a10 	vmov	r0, s16
 800a476:	f001 f961 	bl	800b73c <__mcmp>
 800a47a:	463a      	mov	r2, r7
 800a47c:	9003      	str	r0, [sp, #12]
 800a47e:	4631      	mov	r1, r6
 800a480:	4620      	mov	r0, r4
 800a482:	f001 f977 	bl	800b774 <__mdiff>
 800a486:	68c2      	ldr	r2, [r0, #12]
 800a488:	f109 3bff 	add.w	fp, r9, #4294967295
 800a48c:	4605      	mov	r5, r0
 800a48e:	bb02      	cbnz	r2, 800a4d2 <_dtoa_r+0xa62>
 800a490:	4601      	mov	r1, r0
 800a492:	ee18 0a10 	vmov	r0, s16
 800a496:	f001 f951 	bl	800b73c <__mcmp>
 800a49a:	4602      	mov	r2, r0
 800a49c:	4629      	mov	r1, r5
 800a49e:	4620      	mov	r0, r4
 800a4a0:	9207      	str	r2, [sp, #28]
 800a4a2:	f000 febf 	bl	800b224 <_Bfree>
 800a4a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a4aa:	ea43 0102 	orr.w	r1, r3, r2
 800a4ae:	9b04      	ldr	r3, [sp, #16]
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	464d      	mov	r5, r9
 800a4b4:	d10f      	bne.n	800a4d6 <_dtoa_r+0xa66>
 800a4b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4ba:	d02a      	beq.n	800a512 <_dtoa_r+0xaa2>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dd02      	ble.n	800a4c8 <_dtoa_r+0xa58>
 800a4c2:	9b02      	ldr	r3, [sp, #8]
 800a4c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a4c8:	f88b a000 	strb.w	sl, [fp]
 800a4cc:	e775      	b.n	800a3ba <_dtoa_r+0x94a>
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	e7ba      	b.n	800a448 <_dtoa_r+0x9d8>
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	e7e2      	b.n	800a49c <_dtoa_r+0xa2c>
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	db04      	blt.n	800a4e6 <_dtoa_r+0xa76>
 800a4dc:	9906      	ldr	r1, [sp, #24]
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	9904      	ldr	r1, [sp, #16]
 800a4e2:	430b      	orrs	r3, r1
 800a4e4:	d122      	bne.n	800a52c <_dtoa_r+0xabc>
 800a4e6:	2a00      	cmp	r2, #0
 800a4e8:	ddee      	ble.n	800a4c8 <_dtoa_r+0xa58>
 800a4ea:	ee18 1a10 	vmov	r1, s16
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f001 f8b3 	bl	800b65c <__lshift>
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	ee08 0a10 	vmov	s16, r0
 800a4fc:	f001 f91e 	bl	800b73c <__mcmp>
 800a500:	2800      	cmp	r0, #0
 800a502:	dc03      	bgt.n	800a50c <_dtoa_r+0xa9c>
 800a504:	d1e0      	bne.n	800a4c8 <_dtoa_r+0xa58>
 800a506:	f01a 0f01 	tst.w	sl, #1
 800a50a:	d0dd      	beq.n	800a4c8 <_dtoa_r+0xa58>
 800a50c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a510:	d1d7      	bne.n	800a4c2 <_dtoa_r+0xa52>
 800a512:	2339      	movs	r3, #57	; 0x39
 800a514:	f88b 3000 	strb.w	r3, [fp]
 800a518:	462b      	mov	r3, r5
 800a51a:	461d      	mov	r5, r3
 800a51c:	3b01      	subs	r3, #1
 800a51e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a522:	2a39      	cmp	r2, #57	; 0x39
 800a524:	d071      	beq.n	800a60a <_dtoa_r+0xb9a>
 800a526:	3201      	adds	r2, #1
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	e746      	b.n	800a3ba <_dtoa_r+0x94a>
 800a52c:	2a00      	cmp	r2, #0
 800a52e:	dd07      	ble.n	800a540 <_dtoa_r+0xad0>
 800a530:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a534:	d0ed      	beq.n	800a512 <_dtoa_r+0xaa2>
 800a536:	f10a 0301 	add.w	r3, sl, #1
 800a53a:	f88b 3000 	strb.w	r3, [fp]
 800a53e:	e73c      	b.n	800a3ba <_dtoa_r+0x94a>
 800a540:	9b05      	ldr	r3, [sp, #20]
 800a542:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a546:	4599      	cmp	r9, r3
 800a548:	d047      	beq.n	800a5da <_dtoa_r+0xb6a>
 800a54a:	ee18 1a10 	vmov	r1, s16
 800a54e:	2300      	movs	r3, #0
 800a550:	220a      	movs	r2, #10
 800a552:	4620      	mov	r0, r4
 800a554:	f000 fe88 	bl	800b268 <__multadd>
 800a558:	45b8      	cmp	r8, r7
 800a55a:	ee08 0a10 	vmov	s16, r0
 800a55e:	f04f 0300 	mov.w	r3, #0
 800a562:	f04f 020a 	mov.w	r2, #10
 800a566:	4641      	mov	r1, r8
 800a568:	4620      	mov	r0, r4
 800a56a:	d106      	bne.n	800a57a <_dtoa_r+0xb0a>
 800a56c:	f000 fe7c 	bl	800b268 <__multadd>
 800a570:	4680      	mov	r8, r0
 800a572:	4607      	mov	r7, r0
 800a574:	f109 0901 	add.w	r9, r9, #1
 800a578:	e772      	b.n	800a460 <_dtoa_r+0x9f0>
 800a57a:	f000 fe75 	bl	800b268 <__multadd>
 800a57e:	4639      	mov	r1, r7
 800a580:	4680      	mov	r8, r0
 800a582:	2300      	movs	r3, #0
 800a584:	220a      	movs	r2, #10
 800a586:	4620      	mov	r0, r4
 800a588:	f000 fe6e 	bl	800b268 <__multadd>
 800a58c:	4607      	mov	r7, r0
 800a58e:	e7f1      	b.n	800a574 <_dtoa_r+0xb04>
 800a590:	9b03      	ldr	r3, [sp, #12]
 800a592:	9302      	str	r3, [sp, #8]
 800a594:	9d01      	ldr	r5, [sp, #4]
 800a596:	ee18 0a10 	vmov	r0, s16
 800a59a:	4631      	mov	r1, r6
 800a59c:	f7ff f9da 	bl	8009954 <quorem>
 800a5a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a5a4:	9b01      	ldr	r3, [sp, #4]
 800a5a6:	f805 ab01 	strb.w	sl, [r5], #1
 800a5aa:	1aea      	subs	r2, r5, r3
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	dd09      	ble.n	800a5c6 <_dtoa_r+0xb56>
 800a5b2:	ee18 1a10 	vmov	r1, s16
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 fe54 	bl	800b268 <__multadd>
 800a5c0:	ee08 0a10 	vmov	s16, r0
 800a5c4:	e7e7      	b.n	800a596 <_dtoa_r+0xb26>
 800a5c6:	9b02      	ldr	r3, [sp, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bfc8      	it	gt
 800a5cc:	461d      	movgt	r5, r3
 800a5ce:	9b01      	ldr	r3, [sp, #4]
 800a5d0:	bfd8      	it	le
 800a5d2:	2501      	movle	r5, #1
 800a5d4:	441d      	add	r5, r3
 800a5d6:	f04f 0800 	mov.w	r8, #0
 800a5da:	ee18 1a10 	vmov	r1, s16
 800a5de:	2201      	movs	r2, #1
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f001 f83b 	bl	800b65c <__lshift>
 800a5e6:	4631      	mov	r1, r6
 800a5e8:	ee08 0a10 	vmov	s16, r0
 800a5ec:	f001 f8a6 	bl	800b73c <__mcmp>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	dc91      	bgt.n	800a518 <_dtoa_r+0xaa8>
 800a5f4:	d102      	bne.n	800a5fc <_dtoa_r+0xb8c>
 800a5f6:	f01a 0f01 	tst.w	sl, #1
 800a5fa:	d18d      	bne.n	800a518 <_dtoa_r+0xaa8>
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	461d      	mov	r5, r3
 800a600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a604:	2a30      	cmp	r2, #48	; 0x30
 800a606:	d0fa      	beq.n	800a5fe <_dtoa_r+0xb8e>
 800a608:	e6d7      	b.n	800a3ba <_dtoa_r+0x94a>
 800a60a:	9a01      	ldr	r2, [sp, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d184      	bne.n	800a51a <_dtoa_r+0xaaa>
 800a610:	9b00      	ldr	r3, [sp, #0]
 800a612:	3301      	adds	r3, #1
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	2331      	movs	r3, #49	; 0x31
 800a618:	7013      	strb	r3, [r2, #0]
 800a61a:	e6ce      	b.n	800a3ba <_dtoa_r+0x94a>
 800a61c:	4b09      	ldr	r3, [pc, #36]	; (800a644 <_dtoa_r+0xbd4>)
 800a61e:	f7ff ba95 	b.w	8009b4c <_dtoa_r+0xdc>
 800a622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a624:	2b00      	cmp	r3, #0
 800a626:	f47f aa6e 	bne.w	8009b06 <_dtoa_r+0x96>
 800a62a:	4b07      	ldr	r3, [pc, #28]	; (800a648 <_dtoa_r+0xbd8>)
 800a62c:	f7ff ba8e 	b.w	8009b4c <_dtoa_r+0xdc>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	dcae      	bgt.n	800a594 <_dtoa_r+0xb24>
 800a636:	9b06      	ldr	r3, [sp, #24]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	f73f aea8 	bgt.w	800a38e <_dtoa_r+0x91e>
 800a63e:	e7a9      	b.n	800a594 <_dtoa_r+0xb24>
 800a640:	0800caa0 	.word	0x0800caa0
 800a644:	0800c8a0 	.word	0x0800c8a0
 800a648:	0800ca21 	.word	0x0800ca21

0800a64c <__sflush_r>:
 800a64c:	898a      	ldrh	r2, [r1, #12]
 800a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	4605      	mov	r5, r0
 800a654:	0710      	lsls	r0, r2, #28
 800a656:	460c      	mov	r4, r1
 800a658:	d458      	bmi.n	800a70c <__sflush_r+0xc0>
 800a65a:	684b      	ldr	r3, [r1, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dc05      	bgt.n	800a66c <__sflush_r+0x20>
 800a660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a662:	2b00      	cmp	r3, #0
 800a664:	dc02      	bgt.n	800a66c <__sflush_r+0x20>
 800a666:	2000      	movs	r0, #0
 800a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a66c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a66e:	2e00      	cmp	r6, #0
 800a670:	d0f9      	beq.n	800a666 <__sflush_r+0x1a>
 800a672:	2300      	movs	r3, #0
 800a674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a678:	682f      	ldr	r7, [r5, #0]
 800a67a:	602b      	str	r3, [r5, #0]
 800a67c:	d032      	beq.n	800a6e4 <__sflush_r+0x98>
 800a67e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	075a      	lsls	r2, r3, #29
 800a684:	d505      	bpl.n	800a692 <__sflush_r+0x46>
 800a686:	6863      	ldr	r3, [r4, #4]
 800a688:	1ac0      	subs	r0, r0, r3
 800a68a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a68c:	b10b      	cbz	r3, 800a692 <__sflush_r+0x46>
 800a68e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a690:	1ac0      	subs	r0, r0, r3
 800a692:	2300      	movs	r3, #0
 800a694:	4602      	mov	r2, r0
 800a696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a698:	6a21      	ldr	r1, [r4, #32]
 800a69a:	4628      	mov	r0, r5
 800a69c:	47b0      	blx	r6
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	d106      	bne.n	800a6b2 <__sflush_r+0x66>
 800a6a4:	6829      	ldr	r1, [r5, #0]
 800a6a6:	291d      	cmp	r1, #29
 800a6a8:	d82c      	bhi.n	800a704 <__sflush_r+0xb8>
 800a6aa:	4a2a      	ldr	r2, [pc, #168]	; (800a754 <__sflush_r+0x108>)
 800a6ac:	40ca      	lsrs	r2, r1
 800a6ae:	07d6      	lsls	r6, r2, #31
 800a6b0:	d528      	bpl.n	800a704 <__sflush_r+0xb8>
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	6062      	str	r2, [r4, #4]
 800a6b6:	04d9      	lsls	r1, r3, #19
 800a6b8:	6922      	ldr	r2, [r4, #16]
 800a6ba:	6022      	str	r2, [r4, #0]
 800a6bc:	d504      	bpl.n	800a6c8 <__sflush_r+0x7c>
 800a6be:	1c42      	adds	r2, r0, #1
 800a6c0:	d101      	bne.n	800a6c6 <__sflush_r+0x7a>
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	b903      	cbnz	r3, 800a6c8 <__sflush_r+0x7c>
 800a6c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ca:	602f      	str	r7, [r5, #0]
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	d0ca      	beq.n	800a666 <__sflush_r+0x1a>
 800a6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d002      	beq.n	800a6de <__sflush_r+0x92>
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f001 fa3b 	bl	800bb54 <_free_r>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a6e2:	e7c1      	b.n	800a668 <__sflush_r+0x1c>
 800a6e4:	6a21      	ldr	r1, [r4, #32]
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	47b0      	blx	r6
 800a6ec:	1c41      	adds	r1, r0, #1
 800a6ee:	d1c7      	bne.n	800a680 <__sflush_r+0x34>
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0c4      	beq.n	800a680 <__sflush_r+0x34>
 800a6f6:	2b1d      	cmp	r3, #29
 800a6f8:	d001      	beq.n	800a6fe <__sflush_r+0xb2>
 800a6fa:	2b16      	cmp	r3, #22
 800a6fc:	d101      	bne.n	800a702 <__sflush_r+0xb6>
 800a6fe:	602f      	str	r7, [r5, #0]
 800a700:	e7b1      	b.n	800a666 <__sflush_r+0x1a>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	e7ad      	b.n	800a668 <__sflush_r+0x1c>
 800a70c:	690f      	ldr	r7, [r1, #16]
 800a70e:	2f00      	cmp	r7, #0
 800a710:	d0a9      	beq.n	800a666 <__sflush_r+0x1a>
 800a712:	0793      	lsls	r3, r2, #30
 800a714:	680e      	ldr	r6, [r1, #0]
 800a716:	bf08      	it	eq
 800a718:	694b      	ldreq	r3, [r1, #20]
 800a71a:	600f      	str	r7, [r1, #0]
 800a71c:	bf18      	it	ne
 800a71e:	2300      	movne	r3, #0
 800a720:	eba6 0807 	sub.w	r8, r6, r7
 800a724:	608b      	str	r3, [r1, #8]
 800a726:	f1b8 0f00 	cmp.w	r8, #0
 800a72a:	dd9c      	ble.n	800a666 <__sflush_r+0x1a>
 800a72c:	6a21      	ldr	r1, [r4, #32]
 800a72e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a730:	4643      	mov	r3, r8
 800a732:	463a      	mov	r2, r7
 800a734:	4628      	mov	r0, r5
 800a736:	47b0      	blx	r6
 800a738:	2800      	cmp	r0, #0
 800a73a:	dc06      	bgt.n	800a74a <__sflush_r+0xfe>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a742:	81a3      	strh	r3, [r4, #12]
 800a744:	f04f 30ff 	mov.w	r0, #4294967295
 800a748:	e78e      	b.n	800a668 <__sflush_r+0x1c>
 800a74a:	4407      	add	r7, r0
 800a74c:	eba8 0800 	sub.w	r8, r8, r0
 800a750:	e7e9      	b.n	800a726 <__sflush_r+0xda>
 800a752:	bf00      	nop
 800a754:	20400001 	.word	0x20400001

0800a758 <_fflush_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	690b      	ldr	r3, [r1, #16]
 800a75c:	4605      	mov	r5, r0
 800a75e:	460c      	mov	r4, r1
 800a760:	b913      	cbnz	r3, 800a768 <_fflush_r+0x10>
 800a762:	2500      	movs	r5, #0
 800a764:	4628      	mov	r0, r5
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	b118      	cbz	r0, 800a772 <_fflush_r+0x1a>
 800a76a:	6983      	ldr	r3, [r0, #24]
 800a76c:	b90b      	cbnz	r3, 800a772 <_fflush_r+0x1a>
 800a76e:	f000 f887 	bl	800a880 <__sinit>
 800a772:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <_fflush_r+0x6c>)
 800a774:	429c      	cmp	r4, r3
 800a776:	d11b      	bne.n	800a7b0 <_fflush_r+0x58>
 800a778:	686c      	ldr	r4, [r5, #4]
 800a77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0ef      	beq.n	800a762 <_fflush_r+0xa>
 800a782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a784:	07d0      	lsls	r0, r2, #31
 800a786:	d404      	bmi.n	800a792 <_fflush_r+0x3a>
 800a788:	0599      	lsls	r1, r3, #22
 800a78a:	d402      	bmi.n	800a792 <_fflush_r+0x3a>
 800a78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a78e:	f000 fc88 	bl	800b0a2 <__retarget_lock_acquire_recursive>
 800a792:	4628      	mov	r0, r5
 800a794:	4621      	mov	r1, r4
 800a796:	f7ff ff59 	bl	800a64c <__sflush_r>
 800a79a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a79c:	07da      	lsls	r2, r3, #31
 800a79e:	4605      	mov	r5, r0
 800a7a0:	d4e0      	bmi.n	800a764 <_fflush_r+0xc>
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	059b      	lsls	r3, r3, #22
 800a7a6:	d4dd      	bmi.n	800a764 <_fflush_r+0xc>
 800a7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7aa:	f000 fc7b 	bl	800b0a4 <__retarget_lock_release_recursive>
 800a7ae:	e7d9      	b.n	800a764 <_fflush_r+0xc>
 800a7b0:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <_fflush_r+0x70>)
 800a7b2:	429c      	cmp	r4, r3
 800a7b4:	d101      	bne.n	800a7ba <_fflush_r+0x62>
 800a7b6:	68ac      	ldr	r4, [r5, #8]
 800a7b8:	e7df      	b.n	800a77a <_fflush_r+0x22>
 800a7ba:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <_fflush_r+0x74>)
 800a7bc:	429c      	cmp	r4, r3
 800a7be:	bf08      	it	eq
 800a7c0:	68ec      	ldreq	r4, [r5, #12]
 800a7c2:	e7da      	b.n	800a77a <_fflush_r+0x22>
 800a7c4:	0800cad4 	.word	0x0800cad4
 800a7c8:	0800caf4 	.word	0x0800caf4
 800a7cc:	0800cab4 	.word	0x0800cab4

0800a7d0 <std>:
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7de:	6083      	str	r3, [r0, #8]
 800a7e0:	8181      	strh	r1, [r0, #12]
 800a7e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a7e4:	81c2      	strh	r2, [r0, #14]
 800a7e6:	6183      	str	r3, [r0, #24]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	305c      	adds	r0, #92	; 0x5c
 800a7ee:	f7fd f9d1 	bl	8007b94 <memset>
 800a7f2:	4b05      	ldr	r3, [pc, #20]	; (800a808 <std+0x38>)
 800a7f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a7f6:	4b05      	ldr	r3, [pc, #20]	; (800a80c <std+0x3c>)
 800a7f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7fa:	4b05      	ldr	r3, [pc, #20]	; (800a810 <std+0x40>)
 800a7fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <std+0x44>)
 800a800:	6224      	str	r4, [r4, #32]
 800a802:	6323      	str	r3, [r4, #48]	; 0x30
 800a804:	bd10      	pop	{r4, pc}
 800a806:	bf00      	nop
 800a808:	0800c2b1 	.word	0x0800c2b1
 800a80c:	0800c2d3 	.word	0x0800c2d3
 800a810:	0800c30b 	.word	0x0800c30b
 800a814:	0800c32f 	.word	0x0800c32f

0800a818 <_cleanup_r>:
 800a818:	4901      	ldr	r1, [pc, #4]	; (800a820 <_cleanup_r+0x8>)
 800a81a:	f000 b8af 	b.w	800a97c <_fwalk_reent>
 800a81e:	bf00      	nop
 800a820:	0800a759 	.word	0x0800a759

0800a824 <__sfmoreglue>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	2268      	movs	r2, #104	; 0x68
 800a828:	1e4d      	subs	r5, r1, #1
 800a82a:	4355      	muls	r5, r2
 800a82c:	460e      	mov	r6, r1
 800a82e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a832:	f001 f9fb 	bl	800bc2c <_malloc_r>
 800a836:	4604      	mov	r4, r0
 800a838:	b140      	cbz	r0, 800a84c <__sfmoreglue+0x28>
 800a83a:	2100      	movs	r1, #0
 800a83c:	e9c0 1600 	strd	r1, r6, [r0]
 800a840:	300c      	adds	r0, #12
 800a842:	60a0      	str	r0, [r4, #8]
 800a844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a848:	f7fd f9a4 	bl	8007b94 <memset>
 800a84c:	4620      	mov	r0, r4
 800a84e:	bd70      	pop	{r4, r5, r6, pc}

0800a850 <__sfp_lock_acquire>:
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <__sfp_lock_acquire+0x8>)
 800a852:	f000 bc26 	b.w	800b0a2 <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	200046a1 	.word	0x200046a1

0800a85c <__sfp_lock_release>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__sfp_lock_release+0x8>)
 800a85e:	f000 bc21 	b.w	800b0a4 <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	200046a1 	.word	0x200046a1

0800a868 <__sinit_lock_acquire>:
 800a868:	4801      	ldr	r0, [pc, #4]	; (800a870 <__sinit_lock_acquire+0x8>)
 800a86a:	f000 bc1a 	b.w	800b0a2 <__retarget_lock_acquire_recursive>
 800a86e:	bf00      	nop
 800a870:	200046a2 	.word	0x200046a2

0800a874 <__sinit_lock_release>:
 800a874:	4801      	ldr	r0, [pc, #4]	; (800a87c <__sinit_lock_release+0x8>)
 800a876:	f000 bc15 	b.w	800b0a4 <__retarget_lock_release_recursive>
 800a87a:	bf00      	nop
 800a87c:	200046a2 	.word	0x200046a2

0800a880 <__sinit>:
 800a880:	b510      	push	{r4, lr}
 800a882:	4604      	mov	r4, r0
 800a884:	f7ff fff0 	bl	800a868 <__sinit_lock_acquire>
 800a888:	69a3      	ldr	r3, [r4, #24]
 800a88a:	b11b      	cbz	r3, 800a894 <__sinit+0x14>
 800a88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a890:	f7ff bff0 	b.w	800a874 <__sinit_lock_release>
 800a894:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a898:	6523      	str	r3, [r4, #80]	; 0x50
 800a89a:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <__sinit+0x68>)
 800a89c:	4a13      	ldr	r2, [pc, #76]	; (800a8ec <__sinit+0x6c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8a2:	42a3      	cmp	r3, r4
 800a8a4:	bf04      	itt	eq
 800a8a6:	2301      	moveq	r3, #1
 800a8a8:	61a3      	streq	r3, [r4, #24]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 f820 	bl	800a8f0 <__sfp>
 800a8b0:	6060      	str	r0, [r4, #4]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f81c 	bl	800a8f0 <__sfp>
 800a8b8:	60a0      	str	r0, [r4, #8]
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 f818 	bl	800a8f0 <__sfp>
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	60e0      	str	r0, [r4, #12]
 800a8c4:	2104      	movs	r1, #4
 800a8c6:	6860      	ldr	r0, [r4, #4]
 800a8c8:	f7ff ff82 	bl	800a7d0 <std>
 800a8cc:	68a0      	ldr	r0, [r4, #8]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	2109      	movs	r1, #9
 800a8d2:	f7ff ff7d 	bl	800a7d0 <std>
 800a8d6:	68e0      	ldr	r0, [r4, #12]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	2112      	movs	r1, #18
 800a8dc:	f7ff ff78 	bl	800a7d0 <std>
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	61a3      	str	r3, [r4, #24]
 800a8e4:	e7d2      	b.n	800a88c <__sinit+0xc>
 800a8e6:	bf00      	nop
 800a8e8:	0800c88c 	.word	0x0800c88c
 800a8ec:	0800a819 	.word	0x0800a819

0800a8f0 <__sfp>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	4607      	mov	r7, r0
 800a8f4:	f7ff ffac 	bl	800a850 <__sfp_lock_acquire>
 800a8f8:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <__sfp+0x84>)
 800a8fa:	681e      	ldr	r6, [r3, #0]
 800a8fc:	69b3      	ldr	r3, [r6, #24]
 800a8fe:	b913      	cbnz	r3, 800a906 <__sfp+0x16>
 800a900:	4630      	mov	r0, r6
 800a902:	f7ff ffbd 	bl	800a880 <__sinit>
 800a906:	3648      	adds	r6, #72	; 0x48
 800a908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	d503      	bpl.n	800a918 <__sfp+0x28>
 800a910:	6833      	ldr	r3, [r6, #0]
 800a912:	b30b      	cbz	r3, 800a958 <__sfp+0x68>
 800a914:	6836      	ldr	r6, [r6, #0]
 800a916:	e7f7      	b.n	800a908 <__sfp+0x18>
 800a918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a91c:	b9d5      	cbnz	r5, 800a954 <__sfp+0x64>
 800a91e:	4b16      	ldr	r3, [pc, #88]	; (800a978 <__sfp+0x88>)
 800a920:	60e3      	str	r3, [r4, #12]
 800a922:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a926:	6665      	str	r5, [r4, #100]	; 0x64
 800a928:	f000 fbba 	bl	800b0a0 <__retarget_lock_init_recursive>
 800a92c:	f7ff ff96 	bl	800a85c <__sfp_lock_release>
 800a930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a938:	6025      	str	r5, [r4, #0]
 800a93a:	61a5      	str	r5, [r4, #24]
 800a93c:	2208      	movs	r2, #8
 800a93e:	4629      	mov	r1, r5
 800a940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a944:	f7fd f926 	bl	8007b94 <memset>
 800a948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a94c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a950:	4620      	mov	r0, r4
 800a952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a954:	3468      	adds	r4, #104	; 0x68
 800a956:	e7d9      	b.n	800a90c <__sfp+0x1c>
 800a958:	2104      	movs	r1, #4
 800a95a:	4638      	mov	r0, r7
 800a95c:	f7ff ff62 	bl	800a824 <__sfmoreglue>
 800a960:	4604      	mov	r4, r0
 800a962:	6030      	str	r0, [r6, #0]
 800a964:	2800      	cmp	r0, #0
 800a966:	d1d5      	bne.n	800a914 <__sfp+0x24>
 800a968:	f7ff ff78 	bl	800a85c <__sfp_lock_release>
 800a96c:	230c      	movs	r3, #12
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	e7ee      	b.n	800a950 <__sfp+0x60>
 800a972:	bf00      	nop
 800a974:	0800c88c 	.word	0x0800c88c
 800a978:	ffff0001 	.word	0xffff0001

0800a97c <_fwalk_reent>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	4606      	mov	r6, r0
 800a982:	4688      	mov	r8, r1
 800a984:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a988:	2700      	movs	r7, #0
 800a98a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a98e:	f1b9 0901 	subs.w	r9, r9, #1
 800a992:	d505      	bpl.n	800a9a0 <_fwalk_reent+0x24>
 800a994:	6824      	ldr	r4, [r4, #0]
 800a996:	2c00      	cmp	r4, #0
 800a998:	d1f7      	bne.n	800a98a <_fwalk_reent+0xe>
 800a99a:	4638      	mov	r0, r7
 800a99c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a0:	89ab      	ldrh	r3, [r5, #12]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d907      	bls.n	800a9b6 <_fwalk_reent+0x3a>
 800a9a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	d003      	beq.n	800a9b6 <_fwalk_reent+0x3a>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	47c0      	blx	r8
 800a9b4:	4307      	orrs	r7, r0
 800a9b6:	3568      	adds	r5, #104	; 0x68
 800a9b8:	e7e9      	b.n	800a98e <_fwalk_reent+0x12>

0800a9ba <rshift>:
 800a9ba:	6903      	ldr	r3, [r0, #16]
 800a9bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9c8:	f100 0414 	add.w	r4, r0, #20
 800a9cc:	dd45      	ble.n	800aa5a <rshift+0xa0>
 800a9ce:	f011 011f 	ands.w	r1, r1, #31
 800a9d2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9d6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9da:	d10c      	bne.n	800a9f6 <rshift+0x3c>
 800a9dc:	f100 0710 	add.w	r7, r0, #16
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	42b1      	cmp	r1, r6
 800a9e4:	d334      	bcc.n	800aa50 <rshift+0x96>
 800a9e6:	1a9b      	subs	r3, r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	1eea      	subs	r2, r5, #3
 800a9ec:	4296      	cmp	r6, r2
 800a9ee:	bf38      	it	cc
 800a9f0:	2300      	movcc	r3, #0
 800a9f2:	4423      	add	r3, r4
 800a9f4:	e015      	b.n	800aa22 <rshift+0x68>
 800a9f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9fa:	f1c1 0820 	rsb	r8, r1, #32
 800a9fe:	40cf      	lsrs	r7, r1
 800aa00:	f105 0e04 	add.w	lr, r5, #4
 800aa04:	46a1      	mov	r9, r4
 800aa06:	4576      	cmp	r6, lr
 800aa08:	46f4      	mov	ip, lr
 800aa0a:	d815      	bhi.n	800aa38 <rshift+0x7e>
 800aa0c:	1a9a      	subs	r2, r3, r2
 800aa0e:	0092      	lsls	r2, r2, #2
 800aa10:	3a04      	subs	r2, #4
 800aa12:	3501      	adds	r5, #1
 800aa14:	42ae      	cmp	r6, r5
 800aa16:	bf38      	it	cc
 800aa18:	2200      	movcc	r2, #0
 800aa1a:	18a3      	adds	r3, r4, r2
 800aa1c:	50a7      	str	r7, [r4, r2]
 800aa1e:	b107      	cbz	r7, 800aa22 <rshift+0x68>
 800aa20:	3304      	adds	r3, #4
 800aa22:	1b1a      	subs	r2, r3, r4
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa2a:	bf08      	it	eq
 800aa2c:	2300      	moveq	r3, #0
 800aa2e:	6102      	str	r2, [r0, #16]
 800aa30:	bf08      	it	eq
 800aa32:	6143      	streq	r3, [r0, #20]
 800aa34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa38:	f8dc c000 	ldr.w	ip, [ip]
 800aa3c:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa40:	ea4c 0707 	orr.w	r7, ip, r7
 800aa44:	f849 7b04 	str.w	r7, [r9], #4
 800aa48:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa4c:	40cf      	lsrs	r7, r1
 800aa4e:	e7da      	b.n	800aa06 <rshift+0x4c>
 800aa50:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa54:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa58:	e7c3      	b.n	800a9e2 <rshift+0x28>
 800aa5a:	4623      	mov	r3, r4
 800aa5c:	e7e1      	b.n	800aa22 <rshift+0x68>

0800aa5e <__hexdig_fun>:
 800aa5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	d802      	bhi.n	800aa6c <__hexdig_fun+0xe>
 800aa66:	3820      	subs	r0, #32
 800aa68:	b2c0      	uxtb	r0, r0
 800aa6a:	4770      	bx	lr
 800aa6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa70:	2b05      	cmp	r3, #5
 800aa72:	d801      	bhi.n	800aa78 <__hexdig_fun+0x1a>
 800aa74:	3847      	subs	r0, #71	; 0x47
 800aa76:	e7f7      	b.n	800aa68 <__hexdig_fun+0xa>
 800aa78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa7c:	2b05      	cmp	r3, #5
 800aa7e:	d801      	bhi.n	800aa84 <__hexdig_fun+0x26>
 800aa80:	3827      	subs	r0, #39	; 0x27
 800aa82:	e7f1      	b.n	800aa68 <__hexdig_fun+0xa>
 800aa84:	2000      	movs	r0, #0
 800aa86:	4770      	bx	lr

0800aa88 <__gethex>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ed2d 8b02 	vpush	{d8}
 800aa90:	b089      	sub	sp, #36	; 0x24
 800aa92:	ee08 0a10 	vmov	s16, r0
 800aa96:	9304      	str	r3, [sp, #16]
 800aa98:	4bb4      	ldr	r3, [pc, #720]	; (800ad6c <__gethex+0x2e4>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	468b      	mov	fp, r1
 800aaa2:	4690      	mov	r8, r2
 800aaa4:	f7f5 fbb4 	bl	8000210 <strlen>
 800aaa8:	9b01      	ldr	r3, [sp, #4]
 800aaaa:	f8db 2000 	ldr.w	r2, [fp]
 800aaae:	4403      	add	r3, r0
 800aab0:	4682      	mov	sl, r0
 800aab2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aab6:	9305      	str	r3, [sp, #20]
 800aab8:	1c93      	adds	r3, r2, #2
 800aaba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aabe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aac2:	32fe      	adds	r2, #254	; 0xfe
 800aac4:	18d1      	adds	r1, r2, r3
 800aac6:	461f      	mov	r7, r3
 800aac8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aacc:	9100      	str	r1, [sp, #0]
 800aace:	2830      	cmp	r0, #48	; 0x30
 800aad0:	d0f8      	beq.n	800aac4 <__gethex+0x3c>
 800aad2:	f7ff ffc4 	bl	800aa5e <__hexdig_fun>
 800aad6:	4604      	mov	r4, r0
 800aad8:	2800      	cmp	r0, #0
 800aada:	d13a      	bne.n	800ab52 <__gethex+0xca>
 800aadc:	9901      	ldr	r1, [sp, #4]
 800aade:	4652      	mov	r2, sl
 800aae0:	4638      	mov	r0, r7
 800aae2:	f001 fc28 	bl	800c336 <strncmp>
 800aae6:	4605      	mov	r5, r0
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d168      	bne.n	800abbe <__gethex+0x136>
 800aaec:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aaf0:	eb07 060a 	add.w	r6, r7, sl
 800aaf4:	f7ff ffb3 	bl	800aa5e <__hexdig_fun>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d062      	beq.n	800abc2 <__gethex+0x13a>
 800aafc:	4633      	mov	r3, r6
 800aafe:	7818      	ldrb	r0, [r3, #0]
 800ab00:	2830      	cmp	r0, #48	; 0x30
 800ab02:	461f      	mov	r7, r3
 800ab04:	f103 0301 	add.w	r3, r3, #1
 800ab08:	d0f9      	beq.n	800aafe <__gethex+0x76>
 800ab0a:	f7ff ffa8 	bl	800aa5e <__hexdig_fun>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	fab0 f480 	clz	r4, r0
 800ab14:	0964      	lsrs	r4, r4, #5
 800ab16:	4635      	mov	r5, r6
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	463a      	mov	r2, r7
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	3201      	adds	r2, #1
 800ab20:	7830      	ldrb	r0, [r6, #0]
 800ab22:	f7ff ff9c 	bl	800aa5e <__hexdig_fun>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d1f8      	bne.n	800ab1c <__gethex+0x94>
 800ab2a:	9901      	ldr	r1, [sp, #4]
 800ab2c:	4652      	mov	r2, sl
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f001 fc01 	bl	800c336 <strncmp>
 800ab34:	b980      	cbnz	r0, 800ab58 <__gethex+0xd0>
 800ab36:	b94d      	cbnz	r5, 800ab4c <__gethex+0xc4>
 800ab38:	eb06 050a 	add.w	r5, r6, sl
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4616      	mov	r6, r2
 800ab40:	3201      	adds	r2, #1
 800ab42:	7830      	ldrb	r0, [r6, #0]
 800ab44:	f7ff ff8b 	bl	800aa5e <__hexdig_fun>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d1f8      	bne.n	800ab3e <__gethex+0xb6>
 800ab4c:	1bad      	subs	r5, r5, r6
 800ab4e:	00ad      	lsls	r5, r5, #2
 800ab50:	e004      	b.n	800ab5c <__gethex+0xd4>
 800ab52:	2400      	movs	r4, #0
 800ab54:	4625      	mov	r5, r4
 800ab56:	e7e0      	b.n	800ab1a <__gethex+0x92>
 800ab58:	2d00      	cmp	r5, #0
 800ab5a:	d1f7      	bne.n	800ab4c <__gethex+0xc4>
 800ab5c:	7833      	ldrb	r3, [r6, #0]
 800ab5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab62:	2b50      	cmp	r3, #80	; 0x50
 800ab64:	d13b      	bne.n	800abde <__gethex+0x156>
 800ab66:	7873      	ldrb	r3, [r6, #1]
 800ab68:	2b2b      	cmp	r3, #43	; 0x2b
 800ab6a:	d02c      	beq.n	800abc6 <__gethex+0x13e>
 800ab6c:	2b2d      	cmp	r3, #45	; 0x2d
 800ab6e:	d02e      	beq.n	800abce <__gethex+0x146>
 800ab70:	1c71      	adds	r1, r6, #1
 800ab72:	f04f 0900 	mov.w	r9, #0
 800ab76:	7808      	ldrb	r0, [r1, #0]
 800ab78:	f7ff ff71 	bl	800aa5e <__hexdig_fun>
 800ab7c:	1e43      	subs	r3, r0, #1
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b18      	cmp	r3, #24
 800ab82:	d82c      	bhi.n	800abde <__gethex+0x156>
 800ab84:	f1a0 0210 	sub.w	r2, r0, #16
 800ab88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab8c:	f7ff ff67 	bl	800aa5e <__hexdig_fun>
 800ab90:	1e43      	subs	r3, r0, #1
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b18      	cmp	r3, #24
 800ab96:	d91d      	bls.n	800abd4 <__gethex+0x14c>
 800ab98:	f1b9 0f00 	cmp.w	r9, #0
 800ab9c:	d000      	beq.n	800aba0 <__gethex+0x118>
 800ab9e:	4252      	negs	r2, r2
 800aba0:	4415      	add	r5, r2
 800aba2:	f8cb 1000 	str.w	r1, [fp]
 800aba6:	b1e4      	cbz	r4, 800abe2 <__gethex+0x15a>
 800aba8:	9b00      	ldr	r3, [sp, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bf14      	ite	ne
 800abae:	2700      	movne	r7, #0
 800abb0:	2706      	moveq	r7, #6
 800abb2:	4638      	mov	r0, r7
 800abb4:	b009      	add	sp, #36	; 0x24
 800abb6:	ecbd 8b02 	vpop	{d8}
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	463e      	mov	r6, r7
 800abc0:	4625      	mov	r5, r4
 800abc2:	2401      	movs	r4, #1
 800abc4:	e7ca      	b.n	800ab5c <__gethex+0xd4>
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	1cb1      	adds	r1, r6, #2
 800abcc:	e7d3      	b.n	800ab76 <__gethex+0xee>
 800abce:	f04f 0901 	mov.w	r9, #1
 800abd2:	e7fa      	b.n	800abca <__gethex+0x142>
 800abd4:	230a      	movs	r3, #10
 800abd6:	fb03 0202 	mla	r2, r3, r2, r0
 800abda:	3a10      	subs	r2, #16
 800abdc:	e7d4      	b.n	800ab88 <__gethex+0x100>
 800abde:	4631      	mov	r1, r6
 800abe0:	e7df      	b.n	800aba2 <__gethex+0x11a>
 800abe2:	1bf3      	subs	r3, r6, r7
 800abe4:	3b01      	subs	r3, #1
 800abe6:	4621      	mov	r1, r4
 800abe8:	2b07      	cmp	r3, #7
 800abea:	dc0b      	bgt.n	800ac04 <__gethex+0x17c>
 800abec:	ee18 0a10 	vmov	r0, s16
 800abf0:	f000 fad8 	bl	800b1a4 <_Balloc>
 800abf4:	4604      	mov	r4, r0
 800abf6:	b940      	cbnz	r0, 800ac0a <__gethex+0x182>
 800abf8:	4b5d      	ldr	r3, [pc, #372]	; (800ad70 <__gethex+0x2e8>)
 800abfa:	4602      	mov	r2, r0
 800abfc:	21de      	movs	r1, #222	; 0xde
 800abfe:	485d      	ldr	r0, [pc, #372]	; (800ad74 <__gethex+0x2ec>)
 800ac00:	f001 fbcc 	bl	800c39c <__assert_func>
 800ac04:	3101      	adds	r1, #1
 800ac06:	105b      	asrs	r3, r3, #1
 800ac08:	e7ee      	b.n	800abe8 <__gethex+0x160>
 800ac0a:	f100 0914 	add.w	r9, r0, #20
 800ac0e:	f04f 0b00 	mov.w	fp, #0
 800ac12:	f1ca 0301 	rsb	r3, sl, #1
 800ac16:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac1a:	f8cd b000 	str.w	fp, [sp]
 800ac1e:	9306      	str	r3, [sp, #24]
 800ac20:	42b7      	cmp	r7, r6
 800ac22:	d340      	bcc.n	800aca6 <__gethex+0x21e>
 800ac24:	9802      	ldr	r0, [sp, #8]
 800ac26:	9b00      	ldr	r3, [sp, #0]
 800ac28:	f840 3b04 	str.w	r3, [r0], #4
 800ac2c:	eba0 0009 	sub.w	r0, r0, r9
 800ac30:	1080      	asrs	r0, r0, #2
 800ac32:	0146      	lsls	r6, r0, #5
 800ac34:	6120      	str	r0, [r4, #16]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 fba6 	bl	800b388 <__hi0bits>
 800ac3c:	1a30      	subs	r0, r6, r0
 800ac3e:	f8d8 6000 	ldr.w	r6, [r8]
 800ac42:	42b0      	cmp	r0, r6
 800ac44:	dd63      	ble.n	800ad0e <__gethex+0x286>
 800ac46:	1b87      	subs	r7, r0, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 ff4a 	bl	800bae4 <__any_on>
 800ac50:	4682      	mov	sl, r0
 800ac52:	b1a8      	cbz	r0, 800ac80 <__gethex+0x1f8>
 800ac54:	1e7b      	subs	r3, r7, #1
 800ac56:	1159      	asrs	r1, r3, #5
 800ac58:	f003 021f 	and.w	r2, r3, #31
 800ac5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ac60:	f04f 0a01 	mov.w	sl, #1
 800ac64:	fa0a f202 	lsl.w	r2, sl, r2
 800ac68:	420a      	tst	r2, r1
 800ac6a:	d009      	beq.n	800ac80 <__gethex+0x1f8>
 800ac6c:	4553      	cmp	r3, sl
 800ac6e:	dd05      	ble.n	800ac7c <__gethex+0x1f4>
 800ac70:	1eb9      	subs	r1, r7, #2
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 ff36 	bl	800bae4 <__any_on>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d145      	bne.n	800ad08 <__gethex+0x280>
 800ac7c:	f04f 0a02 	mov.w	sl, #2
 800ac80:	4639      	mov	r1, r7
 800ac82:	4620      	mov	r0, r4
 800ac84:	f7ff fe99 	bl	800a9ba <rshift>
 800ac88:	443d      	add	r5, r7
 800ac8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac8e:	42ab      	cmp	r3, r5
 800ac90:	da4c      	bge.n	800ad2c <__gethex+0x2a4>
 800ac92:	ee18 0a10 	vmov	r0, s16
 800ac96:	4621      	mov	r1, r4
 800ac98:	f000 fac4 	bl	800b224 <_Bfree>
 800ac9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac9e:	2300      	movs	r3, #0
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	27a3      	movs	r7, #163	; 0xa3
 800aca4:	e785      	b.n	800abb2 <__gethex+0x12a>
 800aca6:	1e73      	subs	r3, r6, #1
 800aca8:	9a05      	ldr	r2, [sp, #20]
 800acaa:	9303      	str	r3, [sp, #12]
 800acac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d019      	beq.n	800ace8 <__gethex+0x260>
 800acb4:	f1bb 0f20 	cmp.w	fp, #32
 800acb8:	d107      	bne.n	800acca <__gethex+0x242>
 800acba:	9b02      	ldr	r3, [sp, #8]
 800acbc:	9a00      	ldr	r2, [sp, #0]
 800acbe:	f843 2b04 	str.w	r2, [r3], #4
 800acc2:	9302      	str	r3, [sp, #8]
 800acc4:	2300      	movs	r3, #0
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	469b      	mov	fp, r3
 800acca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800acce:	f7ff fec6 	bl	800aa5e <__hexdig_fun>
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	f000 000f 	and.w	r0, r0, #15
 800acd8:	fa00 f00b 	lsl.w	r0, r0, fp
 800acdc:	4303      	orrs	r3, r0
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	f10b 0b04 	add.w	fp, fp, #4
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	e00d      	b.n	800ad04 <__gethex+0x27c>
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	9a06      	ldr	r2, [sp, #24]
 800acec:	4413      	add	r3, r2
 800acee:	42bb      	cmp	r3, r7
 800acf0:	d3e0      	bcc.n	800acb4 <__gethex+0x22c>
 800acf2:	4618      	mov	r0, r3
 800acf4:	9901      	ldr	r1, [sp, #4]
 800acf6:	9307      	str	r3, [sp, #28]
 800acf8:	4652      	mov	r2, sl
 800acfa:	f001 fb1c 	bl	800c336 <strncmp>
 800acfe:	9b07      	ldr	r3, [sp, #28]
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1d7      	bne.n	800acb4 <__gethex+0x22c>
 800ad04:	461e      	mov	r6, r3
 800ad06:	e78b      	b.n	800ac20 <__gethex+0x198>
 800ad08:	f04f 0a03 	mov.w	sl, #3
 800ad0c:	e7b8      	b.n	800ac80 <__gethex+0x1f8>
 800ad0e:	da0a      	bge.n	800ad26 <__gethex+0x29e>
 800ad10:	1a37      	subs	r7, r6, r0
 800ad12:	4621      	mov	r1, r4
 800ad14:	ee18 0a10 	vmov	r0, s16
 800ad18:	463a      	mov	r2, r7
 800ad1a:	f000 fc9f 	bl	800b65c <__lshift>
 800ad1e:	1bed      	subs	r5, r5, r7
 800ad20:	4604      	mov	r4, r0
 800ad22:	f100 0914 	add.w	r9, r0, #20
 800ad26:	f04f 0a00 	mov.w	sl, #0
 800ad2a:	e7ae      	b.n	800ac8a <__gethex+0x202>
 800ad2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad30:	42a8      	cmp	r0, r5
 800ad32:	dd72      	ble.n	800ae1a <__gethex+0x392>
 800ad34:	1b45      	subs	r5, r0, r5
 800ad36:	42ae      	cmp	r6, r5
 800ad38:	dc36      	bgt.n	800ada8 <__gethex+0x320>
 800ad3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d02a      	beq.n	800ad98 <__gethex+0x310>
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d02c      	beq.n	800ada0 <__gethex+0x318>
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d11c      	bne.n	800ad84 <__gethex+0x2fc>
 800ad4a:	42ae      	cmp	r6, r5
 800ad4c:	d11a      	bne.n	800ad84 <__gethex+0x2fc>
 800ad4e:	2e01      	cmp	r6, #1
 800ad50:	d112      	bne.n	800ad78 <__gethex+0x2f0>
 800ad52:	9a04      	ldr	r2, [sp, #16]
 800ad54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	f8c9 3000 	str.w	r3, [r9]
 800ad62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad64:	2762      	movs	r7, #98	; 0x62
 800ad66:	601c      	str	r4, [r3, #0]
 800ad68:	e723      	b.n	800abb2 <__gethex+0x12a>
 800ad6a:	bf00      	nop
 800ad6c:	0800cb7c 	.word	0x0800cb7c
 800ad70:	0800caa0 	.word	0x0800caa0
 800ad74:	0800cb14 	.word	0x0800cb14
 800ad78:	1e71      	subs	r1, r6, #1
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 feb2 	bl	800bae4 <__any_on>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d1e6      	bne.n	800ad52 <__gethex+0x2ca>
 800ad84:	ee18 0a10 	vmov	r0, s16
 800ad88:	4621      	mov	r1, r4
 800ad8a:	f000 fa4b 	bl	800b224 <_Bfree>
 800ad8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad90:	2300      	movs	r3, #0
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	2750      	movs	r7, #80	; 0x50
 800ad96:	e70c      	b.n	800abb2 <__gethex+0x12a>
 800ad98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1f2      	bne.n	800ad84 <__gethex+0x2fc>
 800ad9e:	e7d8      	b.n	800ad52 <__gethex+0x2ca>
 800ada0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1d5      	bne.n	800ad52 <__gethex+0x2ca>
 800ada6:	e7ed      	b.n	800ad84 <__gethex+0x2fc>
 800ada8:	1e6f      	subs	r7, r5, #1
 800adaa:	f1ba 0f00 	cmp.w	sl, #0
 800adae:	d131      	bne.n	800ae14 <__gethex+0x38c>
 800adb0:	b127      	cbz	r7, 800adbc <__gethex+0x334>
 800adb2:	4639      	mov	r1, r7
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fe95 	bl	800bae4 <__any_on>
 800adba:	4682      	mov	sl, r0
 800adbc:	117b      	asrs	r3, r7, #5
 800adbe:	2101      	movs	r1, #1
 800adc0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800adc4:	f007 071f 	and.w	r7, r7, #31
 800adc8:	fa01 f707 	lsl.w	r7, r1, r7
 800adcc:	421f      	tst	r7, r3
 800adce:	4629      	mov	r1, r5
 800add0:	4620      	mov	r0, r4
 800add2:	bf18      	it	ne
 800add4:	f04a 0a02 	orrne.w	sl, sl, #2
 800add8:	1b76      	subs	r6, r6, r5
 800adda:	f7ff fdee 	bl	800a9ba <rshift>
 800adde:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ade2:	2702      	movs	r7, #2
 800ade4:	f1ba 0f00 	cmp.w	sl, #0
 800ade8:	d048      	beq.n	800ae7c <__gethex+0x3f4>
 800adea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d015      	beq.n	800ae1e <__gethex+0x396>
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d017      	beq.n	800ae26 <__gethex+0x39e>
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d109      	bne.n	800ae0e <__gethex+0x386>
 800adfa:	f01a 0f02 	tst.w	sl, #2
 800adfe:	d006      	beq.n	800ae0e <__gethex+0x386>
 800ae00:	f8d9 0000 	ldr.w	r0, [r9]
 800ae04:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae08:	f01a 0f01 	tst.w	sl, #1
 800ae0c:	d10e      	bne.n	800ae2c <__gethex+0x3a4>
 800ae0e:	f047 0710 	orr.w	r7, r7, #16
 800ae12:	e033      	b.n	800ae7c <__gethex+0x3f4>
 800ae14:	f04f 0a01 	mov.w	sl, #1
 800ae18:	e7d0      	b.n	800adbc <__gethex+0x334>
 800ae1a:	2701      	movs	r7, #1
 800ae1c:	e7e2      	b.n	800ade4 <__gethex+0x35c>
 800ae1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae20:	f1c3 0301 	rsb	r3, r3, #1
 800ae24:	9315      	str	r3, [sp, #84]	; 0x54
 800ae26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0f0      	beq.n	800ae0e <__gethex+0x386>
 800ae2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae30:	f104 0314 	add.w	r3, r4, #20
 800ae34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae3c:	f04f 0c00 	mov.w	ip, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae46:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae4a:	d01c      	beq.n	800ae86 <__gethex+0x3fe>
 800ae4c:	3201      	adds	r2, #1
 800ae4e:	6002      	str	r2, [r0, #0]
 800ae50:	2f02      	cmp	r7, #2
 800ae52:	f104 0314 	add.w	r3, r4, #20
 800ae56:	d13f      	bne.n	800aed8 <__gethex+0x450>
 800ae58:	f8d8 2000 	ldr.w	r2, [r8]
 800ae5c:	3a01      	subs	r2, #1
 800ae5e:	42b2      	cmp	r2, r6
 800ae60:	d10a      	bne.n	800ae78 <__gethex+0x3f0>
 800ae62:	1171      	asrs	r1, r6, #5
 800ae64:	2201      	movs	r2, #1
 800ae66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae6a:	f006 061f 	and.w	r6, r6, #31
 800ae6e:	fa02 f606 	lsl.w	r6, r2, r6
 800ae72:	421e      	tst	r6, r3
 800ae74:	bf18      	it	ne
 800ae76:	4617      	movne	r7, r2
 800ae78:	f047 0720 	orr.w	r7, r7, #32
 800ae7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae7e:	601c      	str	r4, [r3, #0]
 800ae80:	9b04      	ldr	r3, [sp, #16]
 800ae82:	601d      	str	r5, [r3, #0]
 800ae84:	e695      	b.n	800abb2 <__gethex+0x12a>
 800ae86:	4299      	cmp	r1, r3
 800ae88:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae8c:	d8d8      	bhi.n	800ae40 <__gethex+0x3b8>
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	459b      	cmp	fp, r3
 800ae92:	db19      	blt.n	800aec8 <__gethex+0x440>
 800ae94:	6861      	ldr	r1, [r4, #4]
 800ae96:	ee18 0a10 	vmov	r0, s16
 800ae9a:	3101      	adds	r1, #1
 800ae9c:	f000 f982 	bl	800b1a4 <_Balloc>
 800aea0:	4681      	mov	r9, r0
 800aea2:	b918      	cbnz	r0, 800aeac <__gethex+0x424>
 800aea4:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <__gethex+0x488>)
 800aea6:	4602      	mov	r2, r0
 800aea8:	2184      	movs	r1, #132	; 0x84
 800aeaa:	e6a8      	b.n	800abfe <__gethex+0x176>
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	3202      	adds	r2, #2
 800aeb0:	f104 010c 	add.w	r1, r4, #12
 800aeb4:	0092      	lsls	r2, r2, #2
 800aeb6:	300c      	adds	r0, #12
 800aeb8:	f7fc fe5e 	bl	8007b78 <memcpy>
 800aebc:	4621      	mov	r1, r4
 800aebe:	ee18 0a10 	vmov	r0, s16
 800aec2:	f000 f9af 	bl	800b224 <_Bfree>
 800aec6:	464c      	mov	r4, r9
 800aec8:	6923      	ldr	r3, [r4, #16]
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aed0:	6122      	str	r2, [r4, #16]
 800aed2:	2201      	movs	r2, #1
 800aed4:	615a      	str	r2, [r3, #20]
 800aed6:	e7bb      	b.n	800ae50 <__gethex+0x3c8>
 800aed8:	6922      	ldr	r2, [r4, #16]
 800aeda:	455a      	cmp	r2, fp
 800aedc:	dd0b      	ble.n	800aef6 <__gethex+0x46e>
 800aede:	2101      	movs	r1, #1
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff fd6a 	bl	800a9ba <rshift>
 800aee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aeea:	3501      	adds	r5, #1
 800aeec:	42ab      	cmp	r3, r5
 800aeee:	f6ff aed0 	blt.w	800ac92 <__gethex+0x20a>
 800aef2:	2701      	movs	r7, #1
 800aef4:	e7c0      	b.n	800ae78 <__gethex+0x3f0>
 800aef6:	f016 061f 	ands.w	r6, r6, #31
 800aefa:	d0fa      	beq.n	800aef2 <__gethex+0x46a>
 800aefc:	4453      	add	r3, sl
 800aefe:	f1c6 0620 	rsb	r6, r6, #32
 800af02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800af06:	f000 fa3f 	bl	800b388 <__hi0bits>
 800af0a:	42b0      	cmp	r0, r6
 800af0c:	dbe7      	blt.n	800aede <__gethex+0x456>
 800af0e:	e7f0      	b.n	800aef2 <__gethex+0x46a>
 800af10:	0800caa0 	.word	0x0800caa0

0800af14 <L_shift>:
 800af14:	f1c2 0208 	rsb	r2, r2, #8
 800af18:	0092      	lsls	r2, r2, #2
 800af1a:	b570      	push	{r4, r5, r6, lr}
 800af1c:	f1c2 0620 	rsb	r6, r2, #32
 800af20:	6843      	ldr	r3, [r0, #4]
 800af22:	6804      	ldr	r4, [r0, #0]
 800af24:	fa03 f506 	lsl.w	r5, r3, r6
 800af28:	432c      	orrs	r4, r5
 800af2a:	40d3      	lsrs	r3, r2
 800af2c:	6004      	str	r4, [r0, #0]
 800af2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800af32:	4288      	cmp	r0, r1
 800af34:	d3f4      	bcc.n	800af20 <L_shift+0xc>
 800af36:	bd70      	pop	{r4, r5, r6, pc}

0800af38 <__match>:
 800af38:	b530      	push	{r4, r5, lr}
 800af3a:	6803      	ldr	r3, [r0, #0]
 800af3c:	3301      	adds	r3, #1
 800af3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af42:	b914      	cbnz	r4, 800af4a <__match+0x12>
 800af44:	6003      	str	r3, [r0, #0]
 800af46:	2001      	movs	r0, #1
 800af48:	bd30      	pop	{r4, r5, pc}
 800af4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af52:	2d19      	cmp	r5, #25
 800af54:	bf98      	it	ls
 800af56:	3220      	addls	r2, #32
 800af58:	42a2      	cmp	r2, r4
 800af5a:	d0f0      	beq.n	800af3e <__match+0x6>
 800af5c:	2000      	movs	r0, #0
 800af5e:	e7f3      	b.n	800af48 <__match+0x10>

0800af60 <__hexnan>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	680b      	ldr	r3, [r1, #0]
 800af66:	115e      	asrs	r6, r3, #5
 800af68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af6c:	f013 031f 	ands.w	r3, r3, #31
 800af70:	b087      	sub	sp, #28
 800af72:	bf18      	it	ne
 800af74:	3604      	addne	r6, #4
 800af76:	2500      	movs	r5, #0
 800af78:	1f37      	subs	r7, r6, #4
 800af7a:	4690      	mov	r8, r2
 800af7c:	6802      	ldr	r2, [r0, #0]
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	4682      	mov	sl, r0
 800af82:	f846 5c04 	str.w	r5, [r6, #-4]
 800af86:	46b9      	mov	r9, r7
 800af88:	463c      	mov	r4, r7
 800af8a:	9502      	str	r5, [sp, #8]
 800af8c:	46ab      	mov	fp, r5
 800af8e:	7851      	ldrb	r1, [r2, #1]
 800af90:	1c53      	adds	r3, r2, #1
 800af92:	9303      	str	r3, [sp, #12]
 800af94:	b341      	cbz	r1, 800afe8 <__hexnan+0x88>
 800af96:	4608      	mov	r0, r1
 800af98:	9205      	str	r2, [sp, #20]
 800af9a:	9104      	str	r1, [sp, #16]
 800af9c:	f7ff fd5f 	bl	800aa5e <__hexdig_fun>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d14f      	bne.n	800b044 <__hexnan+0xe4>
 800afa4:	9904      	ldr	r1, [sp, #16]
 800afa6:	9a05      	ldr	r2, [sp, #20]
 800afa8:	2920      	cmp	r1, #32
 800afaa:	d818      	bhi.n	800afde <__hexnan+0x7e>
 800afac:	9b02      	ldr	r3, [sp, #8]
 800afae:	459b      	cmp	fp, r3
 800afb0:	dd13      	ble.n	800afda <__hexnan+0x7a>
 800afb2:	454c      	cmp	r4, r9
 800afb4:	d206      	bcs.n	800afc4 <__hexnan+0x64>
 800afb6:	2d07      	cmp	r5, #7
 800afb8:	dc04      	bgt.n	800afc4 <__hexnan+0x64>
 800afba:	462a      	mov	r2, r5
 800afbc:	4649      	mov	r1, r9
 800afbe:	4620      	mov	r0, r4
 800afc0:	f7ff ffa8 	bl	800af14 <L_shift>
 800afc4:	4544      	cmp	r4, r8
 800afc6:	d950      	bls.n	800b06a <__hexnan+0x10a>
 800afc8:	2300      	movs	r3, #0
 800afca:	f1a4 0904 	sub.w	r9, r4, #4
 800afce:	f844 3c04 	str.w	r3, [r4, #-4]
 800afd2:	f8cd b008 	str.w	fp, [sp, #8]
 800afd6:	464c      	mov	r4, r9
 800afd8:	461d      	mov	r5, r3
 800afda:	9a03      	ldr	r2, [sp, #12]
 800afdc:	e7d7      	b.n	800af8e <__hexnan+0x2e>
 800afde:	2929      	cmp	r1, #41	; 0x29
 800afe0:	d156      	bne.n	800b090 <__hexnan+0x130>
 800afe2:	3202      	adds	r2, #2
 800afe4:	f8ca 2000 	str.w	r2, [sl]
 800afe8:	f1bb 0f00 	cmp.w	fp, #0
 800afec:	d050      	beq.n	800b090 <__hexnan+0x130>
 800afee:	454c      	cmp	r4, r9
 800aff0:	d206      	bcs.n	800b000 <__hexnan+0xa0>
 800aff2:	2d07      	cmp	r5, #7
 800aff4:	dc04      	bgt.n	800b000 <__hexnan+0xa0>
 800aff6:	462a      	mov	r2, r5
 800aff8:	4649      	mov	r1, r9
 800affa:	4620      	mov	r0, r4
 800affc:	f7ff ff8a 	bl	800af14 <L_shift>
 800b000:	4544      	cmp	r4, r8
 800b002:	d934      	bls.n	800b06e <__hexnan+0x10e>
 800b004:	f1a8 0204 	sub.w	r2, r8, #4
 800b008:	4623      	mov	r3, r4
 800b00a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b00e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b012:	429f      	cmp	r7, r3
 800b014:	d2f9      	bcs.n	800b00a <__hexnan+0xaa>
 800b016:	1b3b      	subs	r3, r7, r4
 800b018:	f023 0303 	bic.w	r3, r3, #3
 800b01c:	3304      	adds	r3, #4
 800b01e:	3401      	adds	r4, #1
 800b020:	3e03      	subs	r6, #3
 800b022:	42b4      	cmp	r4, r6
 800b024:	bf88      	it	hi
 800b026:	2304      	movhi	r3, #4
 800b028:	4443      	add	r3, r8
 800b02a:	2200      	movs	r2, #0
 800b02c:	f843 2b04 	str.w	r2, [r3], #4
 800b030:	429f      	cmp	r7, r3
 800b032:	d2fb      	bcs.n	800b02c <__hexnan+0xcc>
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	b91b      	cbnz	r3, 800b040 <__hexnan+0xe0>
 800b038:	4547      	cmp	r7, r8
 800b03a:	d127      	bne.n	800b08c <__hexnan+0x12c>
 800b03c:	2301      	movs	r3, #1
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	2005      	movs	r0, #5
 800b042:	e026      	b.n	800b092 <__hexnan+0x132>
 800b044:	3501      	adds	r5, #1
 800b046:	2d08      	cmp	r5, #8
 800b048:	f10b 0b01 	add.w	fp, fp, #1
 800b04c:	dd06      	ble.n	800b05c <__hexnan+0xfc>
 800b04e:	4544      	cmp	r4, r8
 800b050:	d9c3      	bls.n	800afda <__hexnan+0x7a>
 800b052:	2300      	movs	r3, #0
 800b054:	f844 3c04 	str.w	r3, [r4, #-4]
 800b058:	2501      	movs	r5, #1
 800b05a:	3c04      	subs	r4, #4
 800b05c:	6822      	ldr	r2, [r4, #0]
 800b05e:	f000 000f 	and.w	r0, r0, #15
 800b062:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b066:	6022      	str	r2, [r4, #0]
 800b068:	e7b7      	b.n	800afda <__hexnan+0x7a>
 800b06a:	2508      	movs	r5, #8
 800b06c:	e7b5      	b.n	800afda <__hexnan+0x7a>
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d0df      	beq.n	800b034 <__hexnan+0xd4>
 800b074:	f04f 32ff 	mov.w	r2, #4294967295
 800b078:	f1c3 0320 	rsb	r3, r3, #32
 800b07c:	fa22 f303 	lsr.w	r3, r2, r3
 800b080:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b084:	401a      	ands	r2, r3
 800b086:	f846 2c04 	str.w	r2, [r6, #-4]
 800b08a:	e7d3      	b.n	800b034 <__hexnan+0xd4>
 800b08c:	3f04      	subs	r7, #4
 800b08e:	e7d1      	b.n	800b034 <__hexnan+0xd4>
 800b090:	2004      	movs	r0, #4
 800b092:	b007      	add	sp, #28
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b098 <_localeconv_r>:
 800b098:	4800      	ldr	r0, [pc, #0]	; (800b09c <_localeconv_r+0x4>)
 800b09a:	4770      	bx	lr
 800b09c:	20000170 	.word	0x20000170

0800b0a0 <__retarget_lock_init_recursive>:
 800b0a0:	4770      	bx	lr

0800b0a2 <__retarget_lock_acquire_recursive>:
 800b0a2:	4770      	bx	lr

0800b0a4 <__retarget_lock_release_recursive>:
 800b0a4:	4770      	bx	lr

0800b0a6 <__swhatbuf_r>:
 800b0a6:	b570      	push	{r4, r5, r6, lr}
 800b0a8:	460e      	mov	r6, r1
 800b0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	b096      	sub	sp, #88	; 0x58
 800b0b2:	4614      	mov	r4, r2
 800b0b4:	461d      	mov	r5, r3
 800b0b6:	da08      	bge.n	800b0ca <__swhatbuf_r+0x24>
 800b0b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	602a      	str	r2, [r5, #0]
 800b0c0:	061a      	lsls	r2, r3, #24
 800b0c2:	d410      	bmi.n	800b0e6 <__swhatbuf_r+0x40>
 800b0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c8:	e00e      	b.n	800b0e8 <__swhatbuf_r+0x42>
 800b0ca:	466a      	mov	r2, sp
 800b0cc:	f001 f9a6 	bl	800c41c <_fstat_r>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	dbf1      	blt.n	800b0b8 <__swhatbuf_r+0x12>
 800b0d4:	9a01      	ldr	r2, [sp, #4]
 800b0d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0de:	425a      	negs	r2, r3
 800b0e0:	415a      	adcs	r2, r3
 800b0e2:	602a      	str	r2, [r5, #0]
 800b0e4:	e7ee      	b.n	800b0c4 <__swhatbuf_r+0x1e>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	b016      	add	sp, #88	; 0x58
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}

0800b0f0 <__smakebuf_r>:
 800b0f0:	898b      	ldrh	r3, [r1, #12]
 800b0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f4:	079d      	lsls	r5, r3, #30
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	d507      	bpl.n	800b10c <__smakebuf_r+0x1c>
 800b0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	2301      	movs	r3, #1
 800b106:	6163      	str	r3, [r4, #20]
 800b108:	b002      	add	sp, #8
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	ab01      	add	r3, sp, #4
 800b10e:	466a      	mov	r2, sp
 800b110:	f7ff ffc9 	bl	800b0a6 <__swhatbuf_r>
 800b114:	9900      	ldr	r1, [sp, #0]
 800b116:	4605      	mov	r5, r0
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 fd87 	bl	800bc2c <_malloc_r>
 800b11e:	b948      	cbnz	r0, 800b134 <__smakebuf_r+0x44>
 800b120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b124:	059a      	lsls	r2, r3, #22
 800b126:	d4ef      	bmi.n	800b108 <__smakebuf_r+0x18>
 800b128:	f023 0303 	bic.w	r3, r3, #3
 800b12c:	f043 0302 	orr.w	r3, r3, #2
 800b130:	81a3      	strh	r3, [r4, #12]
 800b132:	e7e3      	b.n	800b0fc <__smakebuf_r+0xc>
 800b134:	4b0d      	ldr	r3, [pc, #52]	; (800b16c <__smakebuf_r+0x7c>)
 800b136:	62b3      	str	r3, [r6, #40]	; 0x28
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	6020      	str	r0, [r4, #0]
 800b13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	9b00      	ldr	r3, [sp, #0]
 800b144:	6163      	str	r3, [r4, #20]
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	6120      	str	r0, [r4, #16]
 800b14a:	b15b      	cbz	r3, 800b164 <__smakebuf_r+0x74>
 800b14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b150:	4630      	mov	r0, r6
 800b152:	f001 f975 	bl	800c440 <_isatty_r>
 800b156:	b128      	cbz	r0, 800b164 <__smakebuf_r+0x74>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	f043 0301 	orr.w	r3, r3, #1
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	89a0      	ldrh	r0, [r4, #12]
 800b166:	4305      	orrs	r5, r0
 800b168:	81a5      	strh	r5, [r4, #12]
 800b16a:	e7cd      	b.n	800b108 <__smakebuf_r+0x18>
 800b16c:	0800a819 	.word	0x0800a819

0800b170 <malloc>:
 800b170:	4b02      	ldr	r3, [pc, #8]	; (800b17c <malloc+0xc>)
 800b172:	4601      	mov	r1, r0
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	f000 bd59 	b.w	800bc2c <_malloc_r>
 800b17a:	bf00      	nop
 800b17c:	20000018 	.word	0x20000018

0800b180 <__ascii_mbtowc>:
 800b180:	b082      	sub	sp, #8
 800b182:	b901      	cbnz	r1, 800b186 <__ascii_mbtowc+0x6>
 800b184:	a901      	add	r1, sp, #4
 800b186:	b142      	cbz	r2, 800b19a <__ascii_mbtowc+0x1a>
 800b188:	b14b      	cbz	r3, 800b19e <__ascii_mbtowc+0x1e>
 800b18a:	7813      	ldrb	r3, [r2, #0]
 800b18c:	600b      	str	r3, [r1, #0]
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	1e10      	subs	r0, r2, #0
 800b192:	bf18      	it	ne
 800b194:	2001      	movne	r0, #1
 800b196:	b002      	add	sp, #8
 800b198:	4770      	bx	lr
 800b19a:	4610      	mov	r0, r2
 800b19c:	e7fb      	b.n	800b196 <__ascii_mbtowc+0x16>
 800b19e:	f06f 0001 	mvn.w	r0, #1
 800b1a2:	e7f8      	b.n	800b196 <__ascii_mbtowc+0x16>

0800b1a4 <_Balloc>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	460d      	mov	r5, r1
 800b1ac:	b976      	cbnz	r6, 800b1cc <_Balloc+0x28>
 800b1ae:	2010      	movs	r0, #16
 800b1b0:	f7ff ffde 	bl	800b170 <malloc>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	6260      	str	r0, [r4, #36]	; 0x24
 800b1b8:	b920      	cbnz	r0, 800b1c4 <_Balloc+0x20>
 800b1ba:	4b18      	ldr	r3, [pc, #96]	; (800b21c <_Balloc+0x78>)
 800b1bc:	4818      	ldr	r0, [pc, #96]	; (800b220 <_Balloc+0x7c>)
 800b1be:	2166      	movs	r1, #102	; 0x66
 800b1c0:	f001 f8ec 	bl	800c39c <__assert_func>
 800b1c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1c8:	6006      	str	r6, [r0, #0]
 800b1ca:	60c6      	str	r6, [r0, #12]
 800b1cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1ce:	68f3      	ldr	r3, [r6, #12]
 800b1d0:	b183      	cbz	r3, 800b1f4 <_Balloc+0x50>
 800b1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1da:	b9b8      	cbnz	r0, 800b20c <_Balloc+0x68>
 800b1dc:	2101      	movs	r1, #1
 800b1de:	fa01 f605 	lsl.w	r6, r1, r5
 800b1e2:	1d72      	adds	r2, r6, #5
 800b1e4:	0092      	lsls	r2, r2, #2
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 fc9d 	bl	800bb26 <_calloc_r>
 800b1ec:	b160      	cbz	r0, 800b208 <_Balloc+0x64>
 800b1ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1f2:	e00e      	b.n	800b212 <_Balloc+0x6e>
 800b1f4:	2221      	movs	r2, #33	; 0x21
 800b1f6:	2104      	movs	r1, #4
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 fc94 	bl	800bb26 <_calloc_r>
 800b1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b200:	60f0      	str	r0, [r6, #12]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e4      	bne.n	800b1d2 <_Balloc+0x2e>
 800b208:	2000      	movs	r0, #0
 800b20a:	bd70      	pop	{r4, r5, r6, pc}
 800b20c:	6802      	ldr	r2, [r0, #0]
 800b20e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b212:	2300      	movs	r3, #0
 800b214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b218:	e7f7      	b.n	800b20a <_Balloc+0x66>
 800b21a:	bf00      	nop
 800b21c:	0800ca2e 	.word	0x0800ca2e
 800b220:	0800cb90 	.word	0x0800cb90

0800b224 <_Bfree>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b228:	4605      	mov	r5, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	b976      	cbnz	r6, 800b24c <_Bfree+0x28>
 800b22e:	2010      	movs	r0, #16
 800b230:	f7ff ff9e 	bl	800b170 <malloc>
 800b234:	4602      	mov	r2, r0
 800b236:	6268      	str	r0, [r5, #36]	; 0x24
 800b238:	b920      	cbnz	r0, 800b244 <_Bfree+0x20>
 800b23a:	4b09      	ldr	r3, [pc, #36]	; (800b260 <_Bfree+0x3c>)
 800b23c:	4809      	ldr	r0, [pc, #36]	; (800b264 <_Bfree+0x40>)
 800b23e:	218a      	movs	r1, #138	; 0x8a
 800b240:	f001 f8ac 	bl	800c39c <__assert_func>
 800b244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b248:	6006      	str	r6, [r0, #0]
 800b24a:	60c6      	str	r6, [r0, #12]
 800b24c:	b13c      	cbz	r4, 800b25e <_Bfree+0x3a>
 800b24e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b250:	6862      	ldr	r2, [r4, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b258:	6021      	str	r1, [r4, #0]
 800b25a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b25e:	bd70      	pop	{r4, r5, r6, pc}
 800b260:	0800ca2e 	.word	0x0800ca2e
 800b264:	0800cb90 	.word	0x0800cb90

0800b268 <__multadd>:
 800b268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b26c:	690d      	ldr	r5, [r1, #16]
 800b26e:	4607      	mov	r7, r0
 800b270:	460c      	mov	r4, r1
 800b272:	461e      	mov	r6, r3
 800b274:	f101 0c14 	add.w	ip, r1, #20
 800b278:	2000      	movs	r0, #0
 800b27a:	f8dc 3000 	ldr.w	r3, [ip]
 800b27e:	b299      	uxth	r1, r3
 800b280:	fb02 6101 	mla	r1, r2, r1, r6
 800b284:	0c1e      	lsrs	r6, r3, #16
 800b286:	0c0b      	lsrs	r3, r1, #16
 800b288:	fb02 3306 	mla	r3, r2, r6, r3
 800b28c:	b289      	uxth	r1, r1
 800b28e:	3001      	adds	r0, #1
 800b290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b294:	4285      	cmp	r5, r0
 800b296:	f84c 1b04 	str.w	r1, [ip], #4
 800b29a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b29e:	dcec      	bgt.n	800b27a <__multadd+0x12>
 800b2a0:	b30e      	cbz	r6, 800b2e6 <__multadd+0x7e>
 800b2a2:	68a3      	ldr	r3, [r4, #8]
 800b2a4:	42ab      	cmp	r3, r5
 800b2a6:	dc19      	bgt.n	800b2dc <__multadd+0x74>
 800b2a8:	6861      	ldr	r1, [r4, #4]
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	3101      	adds	r1, #1
 800b2ae:	f7ff ff79 	bl	800b1a4 <_Balloc>
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	b928      	cbnz	r0, 800b2c2 <__multadd+0x5a>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4b0c      	ldr	r3, [pc, #48]	; (800b2ec <__multadd+0x84>)
 800b2ba:	480d      	ldr	r0, [pc, #52]	; (800b2f0 <__multadd+0x88>)
 800b2bc:	21b5      	movs	r1, #181	; 0xb5
 800b2be:	f001 f86d 	bl	800c39c <__assert_func>
 800b2c2:	6922      	ldr	r2, [r4, #16]
 800b2c4:	3202      	adds	r2, #2
 800b2c6:	f104 010c 	add.w	r1, r4, #12
 800b2ca:	0092      	lsls	r2, r2, #2
 800b2cc:	300c      	adds	r0, #12
 800b2ce:	f7fc fc53 	bl	8007b78 <memcpy>
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f7ff ffa5 	bl	800b224 <_Bfree>
 800b2da:	4644      	mov	r4, r8
 800b2dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2e0:	3501      	adds	r5, #1
 800b2e2:	615e      	str	r6, [r3, #20]
 800b2e4:	6125      	str	r5, [r4, #16]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ec:	0800caa0 	.word	0x0800caa0
 800b2f0:	0800cb90 	.word	0x0800cb90

0800b2f4 <__s2b>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	4615      	mov	r5, r2
 800b2fc:	461f      	mov	r7, r3
 800b2fe:	2209      	movs	r2, #9
 800b300:	3308      	adds	r3, #8
 800b302:	4606      	mov	r6, r0
 800b304:	fb93 f3f2 	sdiv	r3, r3, r2
 800b308:	2100      	movs	r1, #0
 800b30a:	2201      	movs	r2, #1
 800b30c:	429a      	cmp	r2, r3
 800b30e:	db09      	blt.n	800b324 <__s2b+0x30>
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff ff47 	bl	800b1a4 <_Balloc>
 800b316:	b940      	cbnz	r0, 800b32a <__s2b+0x36>
 800b318:	4602      	mov	r2, r0
 800b31a:	4b19      	ldr	r3, [pc, #100]	; (800b380 <__s2b+0x8c>)
 800b31c:	4819      	ldr	r0, [pc, #100]	; (800b384 <__s2b+0x90>)
 800b31e:	21ce      	movs	r1, #206	; 0xce
 800b320:	f001 f83c 	bl	800c39c <__assert_func>
 800b324:	0052      	lsls	r2, r2, #1
 800b326:	3101      	adds	r1, #1
 800b328:	e7f0      	b.n	800b30c <__s2b+0x18>
 800b32a:	9b08      	ldr	r3, [sp, #32]
 800b32c:	6143      	str	r3, [r0, #20]
 800b32e:	2d09      	cmp	r5, #9
 800b330:	f04f 0301 	mov.w	r3, #1
 800b334:	6103      	str	r3, [r0, #16]
 800b336:	dd16      	ble.n	800b366 <__s2b+0x72>
 800b338:	f104 0909 	add.w	r9, r4, #9
 800b33c:	46c8      	mov	r8, r9
 800b33e:	442c      	add	r4, r5
 800b340:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b344:	4601      	mov	r1, r0
 800b346:	3b30      	subs	r3, #48	; 0x30
 800b348:	220a      	movs	r2, #10
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff8c 	bl	800b268 <__multadd>
 800b350:	45a0      	cmp	r8, r4
 800b352:	d1f5      	bne.n	800b340 <__s2b+0x4c>
 800b354:	f1a5 0408 	sub.w	r4, r5, #8
 800b358:	444c      	add	r4, r9
 800b35a:	1b2d      	subs	r5, r5, r4
 800b35c:	1963      	adds	r3, r4, r5
 800b35e:	42bb      	cmp	r3, r7
 800b360:	db04      	blt.n	800b36c <__s2b+0x78>
 800b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b366:	340a      	adds	r4, #10
 800b368:	2509      	movs	r5, #9
 800b36a:	e7f6      	b.n	800b35a <__s2b+0x66>
 800b36c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b370:	4601      	mov	r1, r0
 800b372:	3b30      	subs	r3, #48	; 0x30
 800b374:	220a      	movs	r2, #10
 800b376:	4630      	mov	r0, r6
 800b378:	f7ff ff76 	bl	800b268 <__multadd>
 800b37c:	e7ee      	b.n	800b35c <__s2b+0x68>
 800b37e:	bf00      	nop
 800b380:	0800caa0 	.word	0x0800caa0
 800b384:	0800cb90 	.word	0x0800cb90

0800b388 <__hi0bits>:
 800b388:	0c03      	lsrs	r3, r0, #16
 800b38a:	041b      	lsls	r3, r3, #16
 800b38c:	b9d3      	cbnz	r3, 800b3c4 <__hi0bits+0x3c>
 800b38e:	0400      	lsls	r0, r0, #16
 800b390:	2310      	movs	r3, #16
 800b392:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b396:	bf04      	itt	eq
 800b398:	0200      	lsleq	r0, r0, #8
 800b39a:	3308      	addeq	r3, #8
 800b39c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3a0:	bf04      	itt	eq
 800b3a2:	0100      	lsleq	r0, r0, #4
 800b3a4:	3304      	addeq	r3, #4
 800b3a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3aa:	bf04      	itt	eq
 800b3ac:	0080      	lsleq	r0, r0, #2
 800b3ae:	3302      	addeq	r3, #2
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	db05      	blt.n	800b3c0 <__hi0bits+0x38>
 800b3b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3b8:	f103 0301 	add.w	r3, r3, #1
 800b3bc:	bf08      	it	eq
 800b3be:	2320      	moveq	r3, #32
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	4770      	bx	lr
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	e7e4      	b.n	800b392 <__hi0bits+0xa>

0800b3c8 <__lo0bits>:
 800b3c8:	6803      	ldr	r3, [r0, #0]
 800b3ca:	f013 0207 	ands.w	r2, r3, #7
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	d00b      	beq.n	800b3ea <__lo0bits+0x22>
 800b3d2:	07da      	lsls	r2, r3, #31
 800b3d4:	d423      	bmi.n	800b41e <__lo0bits+0x56>
 800b3d6:	0798      	lsls	r0, r3, #30
 800b3d8:	bf49      	itett	mi
 800b3da:	085b      	lsrmi	r3, r3, #1
 800b3dc:	089b      	lsrpl	r3, r3, #2
 800b3de:	2001      	movmi	r0, #1
 800b3e0:	600b      	strmi	r3, [r1, #0]
 800b3e2:	bf5c      	itt	pl
 800b3e4:	600b      	strpl	r3, [r1, #0]
 800b3e6:	2002      	movpl	r0, #2
 800b3e8:	4770      	bx	lr
 800b3ea:	b298      	uxth	r0, r3
 800b3ec:	b9a8      	cbnz	r0, 800b41a <__lo0bits+0x52>
 800b3ee:	0c1b      	lsrs	r3, r3, #16
 800b3f0:	2010      	movs	r0, #16
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	b90a      	cbnz	r2, 800b3fa <__lo0bits+0x32>
 800b3f6:	3008      	adds	r0, #8
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	071a      	lsls	r2, r3, #28
 800b3fc:	bf04      	itt	eq
 800b3fe:	091b      	lsreq	r3, r3, #4
 800b400:	3004      	addeq	r0, #4
 800b402:	079a      	lsls	r2, r3, #30
 800b404:	bf04      	itt	eq
 800b406:	089b      	lsreq	r3, r3, #2
 800b408:	3002      	addeq	r0, #2
 800b40a:	07da      	lsls	r2, r3, #31
 800b40c:	d403      	bmi.n	800b416 <__lo0bits+0x4e>
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	f100 0001 	add.w	r0, r0, #1
 800b414:	d005      	beq.n	800b422 <__lo0bits+0x5a>
 800b416:	600b      	str	r3, [r1, #0]
 800b418:	4770      	bx	lr
 800b41a:	4610      	mov	r0, r2
 800b41c:	e7e9      	b.n	800b3f2 <__lo0bits+0x2a>
 800b41e:	2000      	movs	r0, #0
 800b420:	4770      	bx	lr
 800b422:	2020      	movs	r0, #32
 800b424:	4770      	bx	lr
	...

0800b428 <__i2b>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	460c      	mov	r4, r1
 800b42c:	2101      	movs	r1, #1
 800b42e:	f7ff feb9 	bl	800b1a4 <_Balloc>
 800b432:	4602      	mov	r2, r0
 800b434:	b928      	cbnz	r0, 800b442 <__i2b+0x1a>
 800b436:	4b05      	ldr	r3, [pc, #20]	; (800b44c <__i2b+0x24>)
 800b438:	4805      	ldr	r0, [pc, #20]	; (800b450 <__i2b+0x28>)
 800b43a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b43e:	f000 ffad 	bl	800c39c <__assert_func>
 800b442:	2301      	movs	r3, #1
 800b444:	6144      	str	r4, [r0, #20]
 800b446:	6103      	str	r3, [r0, #16]
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	bf00      	nop
 800b44c:	0800caa0 	.word	0x0800caa0
 800b450:	0800cb90 	.word	0x0800cb90

0800b454 <__multiply>:
 800b454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	4691      	mov	r9, r2
 800b45a:	690a      	ldr	r2, [r1, #16]
 800b45c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b460:	429a      	cmp	r2, r3
 800b462:	bfb8      	it	lt
 800b464:	460b      	movlt	r3, r1
 800b466:	460c      	mov	r4, r1
 800b468:	bfbc      	itt	lt
 800b46a:	464c      	movlt	r4, r9
 800b46c:	4699      	movlt	r9, r3
 800b46e:	6927      	ldr	r7, [r4, #16]
 800b470:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	6861      	ldr	r1, [r4, #4]
 800b478:	eb07 060a 	add.w	r6, r7, sl
 800b47c:	42b3      	cmp	r3, r6
 800b47e:	b085      	sub	sp, #20
 800b480:	bfb8      	it	lt
 800b482:	3101      	addlt	r1, #1
 800b484:	f7ff fe8e 	bl	800b1a4 <_Balloc>
 800b488:	b930      	cbnz	r0, 800b498 <__multiply+0x44>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b44      	ldr	r3, [pc, #272]	; (800b5a0 <__multiply+0x14c>)
 800b48e:	4845      	ldr	r0, [pc, #276]	; (800b5a4 <__multiply+0x150>)
 800b490:	f240 115d 	movw	r1, #349	; 0x15d
 800b494:	f000 ff82 	bl	800c39c <__assert_func>
 800b498:	f100 0514 	add.w	r5, r0, #20
 800b49c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	4543      	cmp	r3, r8
 800b4a6:	d321      	bcc.n	800b4ec <__multiply+0x98>
 800b4a8:	f104 0314 	add.w	r3, r4, #20
 800b4ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4b0:	f109 0314 	add.w	r3, r9, #20
 800b4b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4b8:	9202      	str	r2, [sp, #8]
 800b4ba:	1b3a      	subs	r2, r7, r4
 800b4bc:	3a15      	subs	r2, #21
 800b4be:	f022 0203 	bic.w	r2, r2, #3
 800b4c2:	3204      	adds	r2, #4
 800b4c4:	f104 0115 	add.w	r1, r4, #21
 800b4c8:	428f      	cmp	r7, r1
 800b4ca:	bf38      	it	cc
 800b4cc:	2204      	movcc	r2, #4
 800b4ce:	9201      	str	r2, [sp, #4]
 800b4d0:	9a02      	ldr	r2, [sp, #8]
 800b4d2:	9303      	str	r3, [sp, #12]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d80c      	bhi.n	800b4f2 <__multiply+0x9e>
 800b4d8:	2e00      	cmp	r6, #0
 800b4da:	dd03      	ble.n	800b4e4 <__multiply+0x90>
 800b4dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d05a      	beq.n	800b59a <__multiply+0x146>
 800b4e4:	6106      	str	r6, [r0, #16]
 800b4e6:	b005      	add	sp, #20
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	f843 2b04 	str.w	r2, [r3], #4
 800b4f0:	e7d8      	b.n	800b4a4 <__multiply+0x50>
 800b4f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4f6:	f1ba 0f00 	cmp.w	sl, #0
 800b4fa:	d024      	beq.n	800b546 <__multiply+0xf2>
 800b4fc:	f104 0e14 	add.w	lr, r4, #20
 800b500:	46a9      	mov	r9, r5
 800b502:	f04f 0c00 	mov.w	ip, #0
 800b506:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b50a:	f8d9 1000 	ldr.w	r1, [r9]
 800b50e:	fa1f fb82 	uxth.w	fp, r2
 800b512:	b289      	uxth	r1, r1
 800b514:	fb0a 110b 	mla	r1, sl, fp, r1
 800b518:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b51c:	f8d9 2000 	ldr.w	r2, [r9]
 800b520:	4461      	add	r1, ip
 800b522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b526:	fb0a c20b 	mla	r2, sl, fp, ip
 800b52a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b52e:	b289      	uxth	r1, r1
 800b530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b534:	4577      	cmp	r7, lr
 800b536:	f849 1b04 	str.w	r1, [r9], #4
 800b53a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b53e:	d8e2      	bhi.n	800b506 <__multiply+0xb2>
 800b540:	9a01      	ldr	r2, [sp, #4]
 800b542:	f845 c002 	str.w	ip, [r5, r2]
 800b546:	9a03      	ldr	r2, [sp, #12]
 800b548:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b54c:	3304      	adds	r3, #4
 800b54e:	f1b9 0f00 	cmp.w	r9, #0
 800b552:	d020      	beq.n	800b596 <__multiply+0x142>
 800b554:	6829      	ldr	r1, [r5, #0]
 800b556:	f104 0c14 	add.w	ip, r4, #20
 800b55a:	46ae      	mov	lr, r5
 800b55c:	f04f 0a00 	mov.w	sl, #0
 800b560:	f8bc b000 	ldrh.w	fp, [ip]
 800b564:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b568:	fb09 220b 	mla	r2, r9, fp, r2
 800b56c:	4492      	add	sl, r2
 800b56e:	b289      	uxth	r1, r1
 800b570:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b574:	f84e 1b04 	str.w	r1, [lr], #4
 800b578:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b57c:	f8be 1000 	ldrh.w	r1, [lr]
 800b580:	0c12      	lsrs	r2, r2, #16
 800b582:	fb09 1102 	mla	r1, r9, r2, r1
 800b586:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b58a:	4567      	cmp	r7, ip
 800b58c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b590:	d8e6      	bhi.n	800b560 <__multiply+0x10c>
 800b592:	9a01      	ldr	r2, [sp, #4]
 800b594:	50a9      	str	r1, [r5, r2]
 800b596:	3504      	adds	r5, #4
 800b598:	e79a      	b.n	800b4d0 <__multiply+0x7c>
 800b59a:	3e01      	subs	r6, #1
 800b59c:	e79c      	b.n	800b4d8 <__multiply+0x84>
 800b59e:	bf00      	nop
 800b5a0:	0800caa0 	.word	0x0800caa0
 800b5a4:	0800cb90 	.word	0x0800cb90

0800b5a8 <__pow5mult>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	4615      	mov	r5, r2
 800b5ae:	f012 0203 	ands.w	r2, r2, #3
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	d007      	beq.n	800b5c8 <__pow5mult+0x20>
 800b5b8:	4c25      	ldr	r4, [pc, #148]	; (800b650 <__pow5mult+0xa8>)
 800b5ba:	3a01      	subs	r2, #1
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5c2:	f7ff fe51 	bl	800b268 <__multadd>
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	10ad      	asrs	r5, r5, #2
 800b5ca:	d03d      	beq.n	800b648 <__pow5mult+0xa0>
 800b5cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5ce:	b97c      	cbnz	r4, 800b5f0 <__pow5mult+0x48>
 800b5d0:	2010      	movs	r0, #16
 800b5d2:	f7ff fdcd 	bl	800b170 <malloc>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	6270      	str	r0, [r6, #36]	; 0x24
 800b5da:	b928      	cbnz	r0, 800b5e8 <__pow5mult+0x40>
 800b5dc:	4b1d      	ldr	r3, [pc, #116]	; (800b654 <__pow5mult+0xac>)
 800b5de:	481e      	ldr	r0, [pc, #120]	; (800b658 <__pow5mult+0xb0>)
 800b5e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5e4:	f000 feda 	bl	800c39c <__assert_func>
 800b5e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5ec:	6004      	str	r4, [r0, #0]
 800b5ee:	60c4      	str	r4, [r0, #12]
 800b5f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5f8:	b94c      	cbnz	r4, 800b60e <__pow5mult+0x66>
 800b5fa:	f240 2171 	movw	r1, #625	; 0x271
 800b5fe:	4630      	mov	r0, r6
 800b600:	f7ff ff12 	bl	800b428 <__i2b>
 800b604:	2300      	movs	r3, #0
 800b606:	f8c8 0008 	str.w	r0, [r8, #8]
 800b60a:	4604      	mov	r4, r0
 800b60c:	6003      	str	r3, [r0, #0]
 800b60e:	f04f 0900 	mov.w	r9, #0
 800b612:	07eb      	lsls	r3, r5, #31
 800b614:	d50a      	bpl.n	800b62c <__pow5mult+0x84>
 800b616:	4639      	mov	r1, r7
 800b618:	4622      	mov	r2, r4
 800b61a:	4630      	mov	r0, r6
 800b61c:	f7ff ff1a 	bl	800b454 <__multiply>
 800b620:	4639      	mov	r1, r7
 800b622:	4680      	mov	r8, r0
 800b624:	4630      	mov	r0, r6
 800b626:	f7ff fdfd 	bl	800b224 <_Bfree>
 800b62a:	4647      	mov	r7, r8
 800b62c:	106d      	asrs	r5, r5, #1
 800b62e:	d00b      	beq.n	800b648 <__pow5mult+0xa0>
 800b630:	6820      	ldr	r0, [r4, #0]
 800b632:	b938      	cbnz	r0, 800b644 <__pow5mult+0x9c>
 800b634:	4622      	mov	r2, r4
 800b636:	4621      	mov	r1, r4
 800b638:	4630      	mov	r0, r6
 800b63a:	f7ff ff0b 	bl	800b454 <__multiply>
 800b63e:	6020      	str	r0, [r4, #0]
 800b640:	f8c0 9000 	str.w	r9, [r0]
 800b644:	4604      	mov	r4, r0
 800b646:	e7e4      	b.n	800b612 <__pow5mult+0x6a>
 800b648:	4638      	mov	r0, r7
 800b64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64e:	bf00      	nop
 800b650:	0800cce0 	.word	0x0800cce0
 800b654:	0800ca2e 	.word	0x0800ca2e
 800b658:	0800cb90 	.word	0x0800cb90

0800b65c <__lshift>:
 800b65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b660:	460c      	mov	r4, r1
 800b662:	6849      	ldr	r1, [r1, #4]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b66a:	68a3      	ldr	r3, [r4, #8]
 800b66c:	4607      	mov	r7, r0
 800b66e:	4691      	mov	r9, r2
 800b670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b674:	f108 0601 	add.w	r6, r8, #1
 800b678:	42b3      	cmp	r3, r6
 800b67a:	db0b      	blt.n	800b694 <__lshift+0x38>
 800b67c:	4638      	mov	r0, r7
 800b67e:	f7ff fd91 	bl	800b1a4 <_Balloc>
 800b682:	4605      	mov	r5, r0
 800b684:	b948      	cbnz	r0, 800b69a <__lshift+0x3e>
 800b686:	4602      	mov	r2, r0
 800b688:	4b2a      	ldr	r3, [pc, #168]	; (800b734 <__lshift+0xd8>)
 800b68a:	482b      	ldr	r0, [pc, #172]	; (800b738 <__lshift+0xdc>)
 800b68c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b690:	f000 fe84 	bl	800c39c <__assert_func>
 800b694:	3101      	adds	r1, #1
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	e7ee      	b.n	800b678 <__lshift+0x1c>
 800b69a:	2300      	movs	r3, #0
 800b69c:	f100 0114 	add.w	r1, r0, #20
 800b6a0:	f100 0210 	add.w	r2, r0, #16
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	4553      	cmp	r3, sl
 800b6a8:	db37      	blt.n	800b71a <__lshift+0xbe>
 800b6aa:	6920      	ldr	r0, [r4, #16]
 800b6ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6b0:	f104 0314 	add.w	r3, r4, #20
 800b6b4:	f019 091f 	ands.w	r9, r9, #31
 800b6b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6c0:	d02f      	beq.n	800b722 <__lshift+0xc6>
 800b6c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6c6:	468a      	mov	sl, r1
 800b6c8:	f04f 0c00 	mov.w	ip, #0
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	fa02 f209 	lsl.w	r2, r2, r9
 800b6d2:	ea42 020c 	orr.w	r2, r2, ip
 800b6d6:	f84a 2b04 	str.w	r2, [sl], #4
 800b6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6de:	4298      	cmp	r0, r3
 800b6e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6e4:	d8f2      	bhi.n	800b6cc <__lshift+0x70>
 800b6e6:	1b03      	subs	r3, r0, r4
 800b6e8:	3b15      	subs	r3, #21
 800b6ea:	f023 0303 	bic.w	r3, r3, #3
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	f104 0215 	add.w	r2, r4, #21
 800b6f4:	4290      	cmp	r0, r2
 800b6f6:	bf38      	it	cc
 800b6f8:	2304      	movcc	r3, #4
 800b6fa:	f841 c003 	str.w	ip, [r1, r3]
 800b6fe:	f1bc 0f00 	cmp.w	ip, #0
 800b702:	d001      	beq.n	800b708 <__lshift+0xac>
 800b704:	f108 0602 	add.w	r6, r8, #2
 800b708:	3e01      	subs	r6, #1
 800b70a:	4638      	mov	r0, r7
 800b70c:	612e      	str	r6, [r5, #16]
 800b70e:	4621      	mov	r1, r4
 800b710:	f7ff fd88 	bl	800b224 <_Bfree>
 800b714:	4628      	mov	r0, r5
 800b716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b71e:	3301      	adds	r3, #1
 800b720:	e7c1      	b.n	800b6a6 <__lshift+0x4a>
 800b722:	3904      	subs	r1, #4
 800b724:	f853 2b04 	ldr.w	r2, [r3], #4
 800b728:	f841 2f04 	str.w	r2, [r1, #4]!
 800b72c:	4298      	cmp	r0, r3
 800b72e:	d8f9      	bhi.n	800b724 <__lshift+0xc8>
 800b730:	e7ea      	b.n	800b708 <__lshift+0xac>
 800b732:	bf00      	nop
 800b734:	0800caa0 	.word	0x0800caa0
 800b738:	0800cb90 	.word	0x0800cb90

0800b73c <__mcmp>:
 800b73c:	b530      	push	{r4, r5, lr}
 800b73e:	6902      	ldr	r2, [r0, #16]
 800b740:	690c      	ldr	r4, [r1, #16]
 800b742:	1b12      	subs	r2, r2, r4
 800b744:	d10e      	bne.n	800b764 <__mcmp+0x28>
 800b746:	f100 0314 	add.w	r3, r0, #20
 800b74a:	3114      	adds	r1, #20
 800b74c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b75c:	42a5      	cmp	r5, r4
 800b75e:	d003      	beq.n	800b768 <__mcmp+0x2c>
 800b760:	d305      	bcc.n	800b76e <__mcmp+0x32>
 800b762:	2201      	movs	r2, #1
 800b764:	4610      	mov	r0, r2
 800b766:	bd30      	pop	{r4, r5, pc}
 800b768:	4283      	cmp	r3, r0
 800b76a:	d3f3      	bcc.n	800b754 <__mcmp+0x18>
 800b76c:	e7fa      	b.n	800b764 <__mcmp+0x28>
 800b76e:	f04f 32ff 	mov.w	r2, #4294967295
 800b772:	e7f7      	b.n	800b764 <__mcmp+0x28>

0800b774 <__mdiff>:
 800b774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	460c      	mov	r4, r1
 800b77a:	4606      	mov	r6, r0
 800b77c:	4611      	mov	r1, r2
 800b77e:	4620      	mov	r0, r4
 800b780:	4690      	mov	r8, r2
 800b782:	f7ff ffdb 	bl	800b73c <__mcmp>
 800b786:	1e05      	subs	r5, r0, #0
 800b788:	d110      	bne.n	800b7ac <__mdiff+0x38>
 800b78a:	4629      	mov	r1, r5
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7ff fd09 	bl	800b1a4 <_Balloc>
 800b792:	b930      	cbnz	r0, 800b7a2 <__mdiff+0x2e>
 800b794:	4b3a      	ldr	r3, [pc, #232]	; (800b880 <__mdiff+0x10c>)
 800b796:	4602      	mov	r2, r0
 800b798:	f240 2132 	movw	r1, #562	; 0x232
 800b79c:	4839      	ldr	r0, [pc, #228]	; (800b884 <__mdiff+0x110>)
 800b79e:	f000 fdfd 	bl	800c39c <__assert_func>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	bfa4      	itt	ge
 800b7ae:	4643      	movge	r3, r8
 800b7b0:	46a0      	movge	r8, r4
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7b8:	bfa6      	itte	ge
 800b7ba:	461c      	movge	r4, r3
 800b7bc:	2500      	movge	r5, #0
 800b7be:	2501      	movlt	r5, #1
 800b7c0:	f7ff fcf0 	bl	800b1a4 <_Balloc>
 800b7c4:	b920      	cbnz	r0, 800b7d0 <__mdiff+0x5c>
 800b7c6:	4b2e      	ldr	r3, [pc, #184]	; (800b880 <__mdiff+0x10c>)
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7ce:	e7e5      	b.n	800b79c <__mdiff+0x28>
 800b7d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7d4:	6926      	ldr	r6, [r4, #16]
 800b7d6:	60c5      	str	r5, [r0, #12]
 800b7d8:	f104 0914 	add.w	r9, r4, #20
 800b7dc:	f108 0514 	add.w	r5, r8, #20
 800b7e0:	f100 0e14 	add.w	lr, r0, #20
 800b7e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7ec:	f108 0210 	add.w	r2, r8, #16
 800b7f0:	46f2      	mov	sl, lr
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7fc:	fa1f f883 	uxth.w	r8, r3
 800b800:	fa11 f18b 	uxtah	r1, r1, fp
 800b804:	0c1b      	lsrs	r3, r3, #16
 800b806:	eba1 0808 	sub.w	r8, r1, r8
 800b80a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b80e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b812:	fa1f f888 	uxth.w	r8, r8
 800b816:	1419      	asrs	r1, r3, #16
 800b818:	454e      	cmp	r6, r9
 800b81a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b81e:	f84a 3b04 	str.w	r3, [sl], #4
 800b822:	d8e7      	bhi.n	800b7f4 <__mdiff+0x80>
 800b824:	1b33      	subs	r3, r6, r4
 800b826:	3b15      	subs	r3, #21
 800b828:	f023 0303 	bic.w	r3, r3, #3
 800b82c:	3304      	adds	r3, #4
 800b82e:	3415      	adds	r4, #21
 800b830:	42a6      	cmp	r6, r4
 800b832:	bf38      	it	cc
 800b834:	2304      	movcc	r3, #4
 800b836:	441d      	add	r5, r3
 800b838:	4473      	add	r3, lr
 800b83a:	469e      	mov	lr, r3
 800b83c:	462e      	mov	r6, r5
 800b83e:	4566      	cmp	r6, ip
 800b840:	d30e      	bcc.n	800b860 <__mdiff+0xec>
 800b842:	f10c 0203 	add.w	r2, ip, #3
 800b846:	1b52      	subs	r2, r2, r5
 800b848:	f022 0203 	bic.w	r2, r2, #3
 800b84c:	3d03      	subs	r5, #3
 800b84e:	45ac      	cmp	ip, r5
 800b850:	bf38      	it	cc
 800b852:	2200      	movcc	r2, #0
 800b854:	441a      	add	r2, r3
 800b856:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b85a:	b17b      	cbz	r3, 800b87c <__mdiff+0x108>
 800b85c:	6107      	str	r7, [r0, #16]
 800b85e:	e7a3      	b.n	800b7a8 <__mdiff+0x34>
 800b860:	f856 8b04 	ldr.w	r8, [r6], #4
 800b864:	fa11 f288 	uxtah	r2, r1, r8
 800b868:	1414      	asrs	r4, r2, #16
 800b86a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b86e:	b292      	uxth	r2, r2
 800b870:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b874:	f84e 2b04 	str.w	r2, [lr], #4
 800b878:	1421      	asrs	r1, r4, #16
 800b87a:	e7e0      	b.n	800b83e <__mdiff+0xca>
 800b87c:	3f01      	subs	r7, #1
 800b87e:	e7ea      	b.n	800b856 <__mdiff+0xe2>
 800b880:	0800caa0 	.word	0x0800caa0
 800b884:	0800cb90 	.word	0x0800cb90

0800b888 <__ulp>:
 800b888:	b082      	sub	sp, #8
 800b88a:	ed8d 0b00 	vstr	d0, [sp]
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	4912      	ldr	r1, [pc, #72]	; (800b8dc <__ulp+0x54>)
 800b892:	4019      	ands	r1, r3
 800b894:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b898:	2900      	cmp	r1, #0
 800b89a:	dd05      	ble.n	800b8a8 <__ulp+0x20>
 800b89c:	2200      	movs	r2, #0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	ec43 2b10 	vmov	d0, r2, r3
 800b8a4:	b002      	add	sp, #8
 800b8a6:	4770      	bx	lr
 800b8a8:	4249      	negs	r1, r1
 800b8aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b8ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b8b2:	f04f 0200 	mov.w	r2, #0
 800b8b6:	f04f 0300 	mov.w	r3, #0
 800b8ba:	da04      	bge.n	800b8c6 <__ulp+0x3e>
 800b8bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b8c0:	fa41 f300 	asr.w	r3, r1, r0
 800b8c4:	e7ec      	b.n	800b8a0 <__ulp+0x18>
 800b8c6:	f1a0 0114 	sub.w	r1, r0, #20
 800b8ca:	291e      	cmp	r1, #30
 800b8cc:	bfda      	itte	le
 800b8ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b8d2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b8d6:	2101      	movgt	r1, #1
 800b8d8:	460a      	mov	r2, r1
 800b8da:	e7e1      	b.n	800b8a0 <__ulp+0x18>
 800b8dc:	7ff00000 	.word	0x7ff00000

0800b8e0 <__b2d>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	6905      	ldr	r5, [r0, #16]
 800b8e4:	f100 0714 	add.w	r7, r0, #20
 800b8e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b8ec:	1f2e      	subs	r6, r5, #4
 800b8ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f7ff fd48 	bl	800b388 <__hi0bits>
 800b8f8:	f1c0 0320 	rsb	r3, r0, #32
 800b8fc:	280a      	cmp	r0, #10
 800b8fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b97c <__b2d+0x9c>
 800b902:	600b      	str	r3, [r1, #0]
 800b904:	dc14      	bgt.n	800b930 <__b2d+0x50>
 800b906:	f1c0 0e0b 	rsb	lr, r0, #11
 800b90a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b90e:	42b7      	cmp	r7, r6
 800b910:	ea41 030c 	orr.w	r3, r1, ip
 800b914:	bf34      	ite	cc
 800b916:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b91a:	2100      	movcs	r1, #0
 800b91c:	3015      	adds	r0, #21
 800b91e:	fa04 f000 	lsl.w	r0, r4, r0
 800b922:	fa21 f10e 	lsr.w	r1, r1, lr
 800b926:	ea40 0201 	orr.w	r2, r0, r1
 800b92a:	ec43 2b10 	vmov	d0, r2, r3
 800b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b930:	42b7      	cmp	r7, r6
 800b932:	bf3a      	itte	cc
 800b934:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b938:	f1a5 0608 	subcc.w	r6, r5, #8
 800b93c:	2100      	movcs	r1, #0
 800b93e:	380b      	subs	r0, #11
 800b940:	d017      	beq.n	800b972 <__b2d+0x92>
 800b942:	f1c0 0c20 	rsb	ip, r0, #32
 800b946:	fa04 f500 	lsl.w	r5, r4, r0
 800b94a:	42be      	cmp	r6, r7
 800b94c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b950:	ea45 0504 	orr.w	r5, r5, r4
 800b954:	bf8c      	ite	hi
 800b956:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b95a:	2400      	movls	r4, #0
 800b95c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b960:	fa01 f000 	lsl.w	r0, r1, r0
 800b964:	fa24 f40c 	lsr.w	r4, r4, ip
 800b968:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b96c:	ea40 0204 	orr.w	r2, r0, r4
 800b970:	e7db      	b.n	800b92a <__b2d+0x4a>
 800b972:	ea44 030c 	orr.w	r3, r4, ip
 800b976:	460a      	mov	r2, r1
 800b978:	e7d7      	b.n	800b92a <__b2d+0x4a>
 800b97a:	bf00      	nop
 800b97c:	3ff00000 	.word	0x3ff00000

0800b980 <__d2b>:
 800b980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b984:	4689      	mov	r9, r1
 800b986:	2101      	movs	r1, #1
 800b988:	ec57 6b10 	vmov	r6, r7, d0
 800b98c:	4690      	mov	r8, r2
 800b98e:	f7ff fc09 	bl	800b1a4 <_Balloc>
 800b992:	4604      	mov	r4, r0
 800b994:	b930      	cbnz	r0, 800b9a4 <__d2b+0x24>
 800b996:	4602      	mov	r2, r0
 800b998:	4b25      	ldr	r3, [pc, #148]	; (800ba30 <__d2b+0xb0>)
 800b99a:	4826      	ldr	r0, [pc, #152]	; (800ba34 <__d2b+0xb4>)
 800b99c:	f240 310a 	movw	r1, #778	; 0x30a
 800b9a0:	f000 fcfc 	bl	800c39c <__assert_func>
 800b9a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9ac:	bb35      	cbnz	r5, 800b9fc <__d2b+0x7c>
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	d028      	beq.n	800ba06 <__d2b+0x86>
 800b9b4:	4668      	mov	r0, sp
 800b9b6:	9600      	str	r6, [sp, #0]
 800b9b8:	f7ff fd06 	bl	800b3c8 <__lo0bits>
 800b9bc:	9900      	ldr	r1, [sp, #0]
 800b9be:	b300      	cbz	r0, 800ba02 <__d2b+0x82>
 800b9c0:	9a01      	ldr	r2, [sp, #4]
 800b9c2:	f1c0 0320 	rsb	r3, r0, #32
 800b9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ca:	430b      	orrs	r3, r1
 800b9cc:	40c2      	lsrs	r2, r0
 800b9ce:	6163      	str	r3, [r4, #20]
 800b9d0:	9201      	str	r2, [sp, #4]
 800b9d2:	9b01      	ldr	r3, [sp, #4]
 800b9d4:	61a3      	str	r3, [r4, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bf14      	ite	ne
 800b9da:	2202      	movne	r2, #2
 800b9dc:	2201      	moveq	r2, #1
 800b9de:	6122      	str	r2, [r4, #16]
 800b9e0:	b1d5      	cbz	r5, 800ba18 <__d2b+0x98>
 800b9e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9e6:	4405      	add	r5, r0
 800b9e8:	f8c9 5000 	str.w	r5, [r9]
 800b9ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9f0:	f8c8 0000 	str.w	r0, [r8]
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	b003      	add	sp, #12
 800b9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba00:	e7d5      	b.n	800b9ae <__d2b+0x2e>
 800ba02:	6161      	str	r1, [r4, #20]
 800ba04:	e7e5      	b.n	800b9d2 <__d2b+0x52>
 800ba06:	a801      	add	r0, sp, #4
 800ba08:	f7ff fcde 	bl	800b3c8 <__lo0bits>
 800ba0c:	9b01      	ldr	r3, [sp, #4]
 800ba0e:	6163      	str	r3, [r4, #20]
 800ba10:	2201      	movs	r2, #1
 800ba12:	6122      	str	r2, [r4, #16]
 800ba14:	3020      	adds	r0, #32
 800ba16:	e7e3      	b.n	800b9e0 <__d2b+0x60>
 800ba18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba20:	f8c9 0000 	str.w	r0, [r9]
 800ba24:	6918      	ldr	r0, [r3, #16]
 800ba26:	f7ff fcaf 	bl	800b388 <__hi0bits>
 800ba2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba2e:	e7df      	b.n	800b9f0 <__d2b+0x70>
 800ba30:	0800caa0 	.word	0x0800caa0
 800ba34:	0800cb90 	.word	0x0800cb90

0800ba38 <__ratio>:
 800ba38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	4688      	mov	r8, r1
 800ba3e:	4669      	mov	r1, sp
 800ba40:	4681      	mov	r9, r0
 800ba42:	f7ff ff4d 	bl	800b8e0 <__b2d>
 800ba46:	a901      	add	r1, sp, #4
 800ba48:	4640      	mov	r0, r8
 800ba4a:	ec55 4b10 	vmov	r4, r5, d0
 800ba4e:	f7ff ff47 	bl	800b8e0 <__b2d>
 800ba52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba5a:	eba3 0c02 	sub.w	ip, r3, r2
 800ba5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba62:	1a9b      	subs	r3, r3, r2
 800ba64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba68:	ec51 0b10 	vmov	r0, r1, d0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	bfd6      	itet	le
 800ba70:	460a      	movle	r2, r1
 800ba72:	462a      	movgt	r2, r5
 800ba74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba78:	468b      	mov	fp, r1
 800ba7a:	462f      	mov	r7, r5
 800ba7c:	bfd4      	ite	le
 800ba7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba86:	4620      	mov	r0, r4
 800ba88:	ee10 2a10 	vmov	r2, s0
 800ba8c:	465b      	mov	r3, fp
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f4 fefc 	bl	800088c <__aeabi_ddiv>
 800ba94:	ec41 0b10 	vmov	d0, r0, r1
 800ba98:	b003      	add	sp, #12
 800ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba9e <__copybits>:
 800ba9e:	3901      	subs	r1, #1
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	1149      	asrs	r1, r1, #5
 800baa4:	6914      	ldr	r4, [r2, #16]
 800baa6:	3101      	adds	r1, #1
 800baa8:	f102 0314 	add.w	r3, r2, #20
 800baac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bab0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bab4:	1f05      	subs	r5, r0, #4
 800bab6:	42a3      	cmp	r3, r4
 800bab8:	d30c      	bcc.n	800bad4 <__copybits+0x36>
 800baba:	1aa3      	subs	r3, r4, r2
 800babc:	3b11      	subs	r3, #17
 800babe:	f023 0303 	bic.w	r3, r3, #3
 800bac2:	3211      	adds	r2, #17
 800bac4:	42a2      	cmp	r2, r4
 800bac6:	bf88      	it	hi
 800bac8:	2300      	movhi	r3, #0
 800baca:	4418      	add	r0, r3
 800bacc:	2300      	movs	r3, #0
 800bace:	4288      	cmp	r0, r1
 800bad0:	d305      	bcc.n	800bade <__copybits+0x40>
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bad8:	f845 6f04 	str.w	r6, [r5, #4]!
 800badc:	e7eb      	b.n	800bab6 <__copybits+0x18>
 800bade:	f840 3b04 	str.w	r3, [r0], #4
 800bae2:	e7f4      	b.n	800bace <__copybits+0x30>

0800bae4 <__any_on>:
 800bae4:	f100 0214 	add.w	r2, r0, #20
 800bae8:	6900      	ldr	r0, [r0, #16]
 800baea:	114b      	asrs	r3, r1, #5
 800baec:	4298      	cmp	r0, r3
 800baee:	b510      	push	{r4, lr}
 800baf0:	db11      	blt.n	800bb16 <__any_on+0x32>
 800baf2:	dd0a      	ble.n	800bb0a <__any_on+0x26>
 800baf4:	f011 011f 	ands.w	r1, r1, #31
 800baf8:	d007      	beq.n	800bb0a <__any_on+0x26>
 800bafa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bafe:	fa24 f001 	lsr.w	r0, r4, r1
 800bb02:	fa00 f101 	lsl.w	r1, r0, r1
 800bb06:	428c      	cmp	r4, r1
 800bb08:	d10b      	bne.n	800bb22 <__any_on+0x3e>
 800bb0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d803      	bhi.n	800bb1a <__any_on+0x36>
 800bb12:	2000      	movs	r0, #0
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	4603      	mov	r3, r0
 800bb18:	e7f7      	b.n	800bb0a <__any_on+0x26>
 800bb1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb1e:	2900      	cmp	r1, #0
 800bb20:	d0f5      	beq.n	800bb0e <__any_on+0x2a>
 800bb22:	2001      	movs	r0, #1
 800bb24:	e7f6      	b.n	800bb14 <__any_on+0x30>

0800bb26 <_calloc_r>:
 800bb26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb28:	fba1 2402 	umull	r2, r4, r1, r2
 800bb2c:	b94c      	cbnz	r4, 800bb42 <_calloc_r+0x1c>
 800bb2e:	4611      	mov	r1, r2
 800bb30:	9201      	str	r2, [sp, #4]
 800bb32:	f000 f87b 	bl	800bc2c <_malloc_r>
 800bb36:	9a01      	ldr	r2, [sp, #4]
 800bb38:	4605      	mov	r5, r0
 800bb3a:	b930      	cbnz	r0, 800bb4a <_calloc_r+0x24>
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	b003      	add	sp, #12
 800bb40:	bd30      	pop	{r4, r5, pc}
 800bb42:	220c      	movs	r2, #12
 800bb44:	6002      	str	r2, [r0, #0]
 800bb46:	2500      	movs	r5, #0
 800bb48:	e7f8      	b.n	800bb3c <_calloc_r+0x16>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	f7fc f822 	bl	8007b94 <memset>
 800bb50:	e7f4      	b.n	800bb3c <_calloc_r+0x16>
	...

0800bb54 <_free_r>:
 800bb54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb56:	2900      	cmp	r1, #0
 800bb58:	d044      	beq.n	800bbe4 <_free_r+0x90>
 800bb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb5e:	9001      	str	r0, [sp, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f1a1 0404 	sub.w	r4, r1, #4
 800bb66:	bfb8      	it	lt
 800bb68:	18e4      	addlt	r4, r4, r3
 800bb6a:	f000 fca5 	bl	800c4b8 <__malloc_lock>
 800bb6e:	4a1e      	ldr	r2, [pc, #120]	; (800bbe8 <_free_r+0x94>)
 800bb70:	9801      	ldr	r0, [sp, #4]
 800bb72:	6813      	ldr	r3, [r2, #0]
 800bb74:	b933      	cbnz	r3, 800bb84 <_free_r+0x30>
 800bb76:	6063      	str	r3, [r4, #4]
 800bb78:	6014      	str	r4, [r2, #0]
 800bb7a:	b003      	add	sp, #12
 800bb7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb80:	f000 bca0 	b.w	800c4c4 <__malloc_unlock>
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	d908      	bls.n	800bb9a <_free_r+0x46>
 800bb88:	6825      	ldr	r5, [r4, #0]
 800bb8a:	1961      	adds	r1, r4, r5
 800bb8c:	428b      	cmp	r3, r1
 800bb8e:	bf01      	itttt	eq
 800bb90:	6819      	ldreq	r1, [r3, #0]
 800bb92:	685b      	ldreq	r3, [r3, #4]
 800bb94:	1949      	addeq	r1, r1, r5
 800bb96:	6021      	streq	r1, [r4, #0]
 800bb98:	e7ed      	b.n	800bb76 <_free_r+0x22>
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	b10b      	cbz	r3, 800bba4 <_free_r+0x50>
 800bba0:	42a3      	cmp	r3, r4
 800bba2:	d9fa      	bls.n	800bb9a <_free_r+0x46>
 800bba4:	6811      	ldr	r1, [r2, #0]
 800bba6:	1855      	adds	r5, r2, r1
 800bba8:	42a5      	cmp	r5, r4
 800bbaa:	d10b      	bne.n	800bbc4 <_free_r+0x70>
 800bbac:	6824      	ldr	r4, [r4, #0]
 800bbae:	4421      	add	r1, r4
 800bbb0:	1854      	adds	r4, r2, r1
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	6011      	str	r1, [r2, #0]
 800bbb6:	d1e0      	bne.n	800bb7a <_free_r+0x26>
 800bbb8:	681c      	ldr	r4, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	6053      	str	r3, [r2, #4]
 800bbbe:	4421      	add	r1, r4
 800bbc0:	6011      	str	r1, [r2, #0]
 800bbc2:	e7da      	b.n	800bb7a <_free_r+0x26>
 800bbc4:	d902      	bls.n	800bbcc <_free_r+0x78>
 800bbc6:	230c      	movs	r3, #12
 800bbc8:	6003      	str	r3, [r0, #0]
 800bbca:	e7d6      	b.n	800bb7a <_free_r+0x26>
 800bbcc:	6825      	ldr	r5, [r4, #0]
 800bbce:	1961      	adds	r1, r4, r5
 800bbd0:	428b      	cmp	r3, r1
 800bbd2:	bf04      	itt	eq
 800bbd4:	6819      	ldreq	r1, [r3, #0]
 800bbd6:	685b      	ldreq	r3, [r3, #4]
 800bbd8:	6063      	str	r3, [r4, #4]
 800bbda:	bf04      	itt	eq
 800bbdc:	1949      	addeq	r1, r1, r5
 800bbde:	6021      	streq	r1, [r4, #0]
 800bbe0:	6054      	str	r4, [r2, #4]
 800bbe2:	e7ca      	b.n	800bb7a <_free_r+0x26>
 800bbe4:	b003      	add	sp, #12
 800bbe6:	bd30      	pop	{r4, r5, pc}
 800bbe8:	200046a4 	.word	0x200046a4

0800bbec <sbrk_aligned>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	4e0e      	ldr	r6, [pc, #56]	; (800bc28 <sbrk_aligned+0x3c>)
 800bbf0:	460c      	mov	r4, r1
 800bbf2:	6831      	ldr	r1, [r6, #0]
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	b911      	cbnz	r1, 800bbfe <sbrk_aligned+0x12>
 800bbf8:	f000 fb4a 	bl	800c290 <_sbrk_r>
 800bbfc:	6030      	str	r0, [r6, #0]
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f000 fb45 	bl	800c290 <_sbrk_r>
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	d00a      	beq.n	800bc20 <sbrk_aligned+0x34>
 800bc0a:	1cc4      	adds	r4, r0, #3
 800bc0c:	f024 0403 	bic.w	r4, r4, #3
 800bc10:	42a0      	cmp	r0, r4
 800bc12:	d007      	beq.n	800bc24 <sbrk_aligned+0x38>
 800bc14:	1a21      	subs	r1, r4, r0
 800bc16:	4628      	mov	r0, r5
 800bc18:	f000 fb3a 	bl	800c290 <_sbrk_r>
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	d101      	bne.n	800bc24 <sbrk_aligned+0x38>
 800bc20:	f04f 34ff 	mov.w	r4, #4294967295
 800bc24:	4620      	mov	r0, r4
 800bc26:	bd70      	pop	{r4, r5, r6, pc}
 800bc28:	200046a8 	.word	0x200046a8

0800bc2c <_malloc_r>:
 800bc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	1ccd      	adds	r5, r1, #3
 800bc32:	f025 0503 	bic.w	r5, r5, #3
 800bc36:	3508      	adds	r5, #8
 800bc38:	2d0c      	cmp	r5, #12
 800bc3a:	bf38      	it	cc
 800bc3c:	250c      	movcc	r5, #12
 800bc3e:	2d00      	cmp	r5, #0
 800bc40:	4607      	mov	r7, r0
 800bc42:	db01      	blt.n	800bc48 <_malloc_r+0x1c>
 800bc44:	42a9      	cmp	r1, r5
 800bc46:	d905      	bls.n	800bc54 <_malloc_r+0x28>
 800bc48:	230c      	movs	r3, #12
 800bc4a:	603b      	str	r3, [r7, #0]
 800bc4c:	2600      	movs	r6, #0
 800bc4e:	4630      	mov	r0, r6
 800bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc54:	4e2e      	ldr	r6, [pc, #184]	; (800bd10 <_malloc_r+0xe4>)
 800bc56:	f000 fc2f 	bl	800c4b8 <__malloc_lock>
 800bc5a:	6833      	ldr	r3, [r6, #0]
 800bc5c:	461c      	mov	r4, r3
 800bc5e:	bb34      	cbnz	r4, 800bcae <_malloc_r+0x82>
 800bc60:	4629      	mov	r1, r5
 800bc62:	4638      	mov	r0, r7
 800bc64:	f7ff ffc2 	bl	800bbec <sbrk_aligned>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	d14d      	bne.n	800bd0a <_malloc_r+0xde>
 800bc6e:	6834      	ldr	r4, [r6, #0]
 800bc70:	4626      	mov	r6, r4
 800bc72:	2e00      	cmp	r6, #0
 800bc74:	d140      	bne.n	800bcf8 <_malloc_r+0xcc>
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	eb04 0803 	add.w	r8, r4, r3
 800bc80:	f000 fb06 	bl	800c290 <_sbrk_r>
 800bc84:	4580      	cmp	r8, r0
 800bc86:	d13a      	bne.n	800bcfe <_malloc_r+0xd2>
 800bc88:	6821      	ldr	r1, [r4, #0]
 800bc8a:	3503      	adds	r5, #3
 800bc8c:	1a6d      	subs	r5, r5, r1
 800bc8e:	f025 0503 	bic.w	r5, r5, #3
 800bc92:	3508      	adds	r5, #8
 800bc94:	2d0c      	cmp	r5, #12
 800bc96:	bf38      	it	cc
 800bc98:	250c      	movcc	r5, #12
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f7ff ffa5 	bl	800bbec <sbrk_aligned>
 800bca2:	3001      	adds	r0, #1
 800bca4:	d02b      	beq.n	800bcfe <_malloc_r+0xd2>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	442b      	add	r3, r5
 800bcaa:	6023      	str	r3, [r4, #0]
 800bcac:	e00e      	b.n	800bccc <_malloc_r+0xa0>
 800bcae:	6822      	ldr	r2, [r4, #0]
 800bcb0:	1b52      	subs	r2, r2, r5
 800bcb2:	d41e      	bmi.n	800bcf2 <_malloc_r+0xc6>
 800bcb4:	2a0b      	cmp	r2, #11
 800bcb6:	d916      	bls.n	800bce6 <_malloc_r+0xba>
 800bcb8:	1961      	adds	r1, r4, r5
 800bcba:	42a3      	cmp	r3, r4
 800bcbc:	6025      	str	r5, [r4, #0]
 800bcbe:	bf18      	it	ne
 800bcc0:	6059      	strne	r1, [r3, #4]
 800bcc2:	6863      	ldr	r3, [r4, #4]
 800bcc4:	bf08      	it	eq
 800bcc6:	6031      	streq	r1, [r6, #0]
 800bcc8:	5162      	str	r2, [r4, r5]
 800bcca:	604b      	str	r3, [r1, #4]
 800bccc:	4638      	mov	r0, r7
 800bcce:	f104 060b 	add.w	r6, r4, #11
 800bcd2:	f000 fbf7 	bl	800c4c4 <__malloc_unlock>
 800bcd6:	f026 0607 	bic.w	r6, r6, #7
 800bcda:	1d23      	adds	r3, r4, #4
 800bcdc:	1af2      	subs	r2, r6, r3
 800bcde:	d0b6      	beq.n	800bc4e <_malloc_r+0x22>
 800bce0:	1b9b      	subs	r3, r3, r6
 800bce2:	50a3      	str	r3, [r4, r2]
 800bce4:	e7b3      	b.n	800bc4e <_malloc_r+0x22>
 800bce6:	6862      	ldr	r2, [r4, #4]
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	bf0c      	ite	eq
 800bcec:	6032      	streq	r2, [r6, #0]
 800bcee:	605a      	strne	r2, [r3, #4]
 800bcf0:	e7ec      	b.n	800bccc <_malloc_r+0xa0>
 800bcf2:	4623      	mov	r3, r4
 800bcf4:	6864      	ldr	r4, [r4, #4]
 800bcf6:	e7b2      	b.n	800bc5e <_malloc_r+0x32>
 800bcf8:	4634      	mov	r4, r6
 800bcfa:	6876      	ldr	r6, [r6, #4]
 800bcfc:	e7b9      	b.n	800bc72 <_malloc_r+0x46>
 800bcfe:	230c      	movs	r3, #12
 800bd00:	603b      	str	r3, [r7, #0]
 800bd02:	4638      	mov	r0, r7
 800bd04:	f000 fbde 	bl	800c4c4 <__malloc_unlock>
 800bd08:	e7a1      	b.n	800bc4e <_malloc_r+0x22>
 800bd0a:	6025      	str	r5, [r4, #0]
 800bd0c:	e7de      	b.n	800bccc <_malloc_r+0xa0>
 800bd0e:	bf00      	nop
 800bd10:	200046a4 	.word	0x200046a4

0800bd14 <__ssputs_r>:
 800bd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	688e      	ldr	r6, [r1, #8]
 800bd1a:	429e      	cmp	r6, r3
 800bd1c:	4682      	mov	sl, r0
 800bd1e:	460c      	mov	r4, r1
 800bd20:	4690      	mov	r8, r2
 800bd22:	461f      	mov	r7, r3
 800bd24:	d838      	bhi.n	800bd98 <__ssputs_r+0x84>
 800bd26:	898a      	ldrh	r2, [r1, #12]
 800bd28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd2c:	d032      	beq.n	800bd94 <__ssputs_r+0x80>
 800bd2e:	6825      	ldr	r5, [r4, #0]
 800bd30:	6909      	ldr	r1, [r1, #16]
 800bd32:	eba5 0901 	sub.w	r9, r5, r1
 800bd36:	6965      	ldr	r5, [r4, #20]
 800bd38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd40:	3301      	adds	r3, #1
 800bd42:	444b      	add	r3, r9
 800bd44:	106d      	asrs	r5, r5, #1
 800bd46:	429d      	cmp	r5, r3
 800bd48:	bf38      	it	cc
 800bd4a:	461d      	movcc	r5, r3
 800bd4c:	0553      	lsls	r3, r2, #21
 800bd4e:	d531      	bpl.n	800bdb4 <__ssputs_r+0xa0>
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7ff ff6b 	bl	800bc2c <_malloc_r>
 800bd56:	4606      	mov	r6, r0
 800bd58:	b950      	cbnz	r0, 800bd70 <__ssputs_r+0x5c>
 800bd5a:	230c      	movs	r3, #12
 800bd5c:	f8ca 3000 	str.w	r3, [sl]
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd70:	6921      	ldr	r1, [r4, #16]
 800bd72:	464a      	mov	r2, r9
 800bd74:	f7fb ff00 	bl	8007b78 <memcpy>
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	6126      	str	r6, [r4, #16]
 800bd86:	6165      	str	r5, [r4, #20]
 800bd88:	444e      	add	r6, r9
 800bd8a:	eba5 0509 	sub.w	r5, r5, r9
 800bd8e:	6026      	str	r6, [r4, #0]
 800bd90:	60a5      	str	r5, [r4, #8]
 800bd92:	463e      	mov	r6, r7
 800bd94:	42be      	cmp	r6, r7
 800bd96:	d900      	bls.n	800bd9a <__ssputs_r+0x86>
 800bd98:	463e      	mov	r6, r7
 800bd9a:	6820      	ldr	r0, [r4, #0]
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	4641      	mov	r1, r8
 800bda0:	f000 fb70 	bl	800c484 <memmove>
 800bda4:	68a3      	ldr	r3, [r4, #8]
 800bda6:	1b9b      	subs	r3, r3, r6
 800bda8:	60a3      	str	r3, [r4, #8]
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	4433      	add	r3, r6
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e7db      	b.n	800bd6c <__ssputs_r+0x58>
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	f000 fb8b 	bl	800c4d0 <_realloc_r>
 800bdba:	4606      	mov	r6, r0
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d1e1      	bne.n	800bd84 <__ssputs_r+0x70>
 800bdc0:	6921      	ldr	r1, [r4, #16]
 800bdc2:	4650      	mov	r0, sl
 800bdc4:	f7ff fec6 	bl	800bb54 <_free_r>
 800bdc8:	e7c7      	b.n	800bd5a <__ssputs_r+0x46>
	...

0800bdcc <_svfiprintf_r>:
 800bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd0:	4698      	mov	r8, r3
 800bdd2:	898b      	ldrh	r3, [r1, #12]
 800bdd4:	061b      	lsls	r3, r3, #24
 800bdd6:	b09d      	sub	sp, #116	; 0x74
 800bdd8:	4607      	mov	r7, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	4614      	mov	r4, r2
 800bdde:	d50e      	bpl.n	800bdfe <_svfiprintf_r+0x32>
 800bde0:	690b      	ldr	r3, [r1, #16]
 800bde2:	b963      	cbnz	r3, 800bdfe <_svfiprintf_r+0x32>
 800bde4:	2140      	movs	r1, #64	; 0x40
 800bde6:	f7ff ff21 	bl	800bc2c <_malloc_r>
 800bdea:	6028      	str	r0, [r5, #0]
 800bdec:	6128      	str	r0, [r5, #16]
 800bdee:	b920      	cbnz	r0, 800bdfa <_svfiprintf_r+0x2e>
 800bdf0:	230c      	movs	r3, #12
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf8:	e0d1      	b.n	800bf9e <_svfiprintf_r+0x1d2>
 800bdfa:	2340      	movs	r3, #64	; 0x40
 800bdfc:	616b      	str	r3, [r5, #20]
 800bdfe:	2300      	movs	r3, #0
 800be00:	9309      	str	r3, [sp, #36]	; 0x24
 800be02:	2320      	movs	r3, #32
 800be04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be08:	f8cd 800c 	str.w	r8, [sp, #12]
 800be0c:	2330      	movs	r3, #48	; 0x30
 800be0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfb8 <_svfiprintf_r+0x1ec>
 800be12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be16:	f04f 0901 	mov.w	r9, #1
 800be1a:	4623      	mov	r3, r4
 800be1c:	469a      	mov	sl, r3
 800be1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be22:	b10a      	cbz	r2, 800be28 <_svfiprintf_r+0x5c>
 800be24:	2a25      	cmp	r2, #37	; 0x25
 800be26:	d1f9      	bne.n	800be1c <_svfiprintf_r+0x50>
 800be28:	ebba 0b04 	subs.w	fp, sl, r4
 800be2c:	d00b      	beq.n	800be46 <_svfiprintf_r+0x7a>
 800be2e:	465b      	mov	r3, fp
 800be30:	4622      	mov	r2, r4
 800be32:	4629      	mov	r1, r5
 800be34:	4638      	mov	r0, r7
 800be36:	f7ff ff6d 	bl	800bd14 <__ssputs_r>
 800be3a:	3001      	adds	r0, #1
 800be3c:	f000 80aa 	beq.w	800bf94 <_svfiprintf_r+0x1c8>
 800be40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be42:	445a      	add	r2, fp
 800be44:	9209      	str	r2, [sp, #36]	; 0x24
 800be46:	f89a 3000 	ldrb.w	r3, [sl]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 80a2 	beq.w	800bf94 <_svfiprintf_r+0x1c8>
 800be50:	2300      	movs	r3, #0
 800be52:	f04f 32ff 	mov.w	r2, #4294967295
 800be56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be5a:	f10a 0a01 	add.w	sl, sl, #1
 800be5e:	9304      	str	r3, [sp, #16]
 800be60:	9307      	str	r3, [sp, #28]
 800be62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be66:	931a      	str	r3, [sp, #104]	; 0x68
 800be68:	4654      	mov	r4, sl
 800be6a:	2205      	movs	r2, #5
 800be6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be70:	4851      	ldr	r0, [pc, #324]	; (800bfb8 <_svfiprintf_r+0x1ec>)
 800be72:	f7f4 f9d5 	bl	8000220 <memchr>
 800be76:	9a04      	ldr	r2, [sp, #16]
 800be78:	b9d8      	cbnz	r0, 800beb2 <_svfiprintf_r+0xe6>
 800be7a:	06d0      	lsls	r0, r2, #27
 800be7c:	bf44      	itt	mi
 800be7e:	2320      	movmi	r3, #32
 800be80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be84:	0711      	lsls	r1, r2, #28
 800be86:	bf44      	itt	mi
 800be88:	232b      	movmi	r3, #43	; 0x2b
 800be8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be8e:	f89a 3000 	ldrb.w	r3, [sl]
 800be92:	2b2a      	cmp	r3, #42	; 0x2a
 800be94:	d015      	beq.n	800bec2 <_svfiprintf_r+0xf6>
 800be96:	9a07      	ldr	r2, [sp, #28]
 800be98:	4654      	mov	r4, sl
 800be9a:	2000      	movs	r0, #0
 800be9c:	f04f 0c0a 	mov.w	ip, #10
 800bea0:	4621      	mov	r1, r4
 800bea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bea6:	3b30      	subs	r3, #48	; 0x30
 800bea8:	2b09      	cmp	r3, #9
 800beaa:	d94e      	bls.n	800bf4a <_svfiprintf_r+0x17e>
 800beac:	b1b0      	cbz	r0, 800bedc <_svfiprintf_r+0x110>
 800beae:	9207      	str	r2, [sp, #28]
 800beb0:	e014      	b.n	800bedc <_svfiprintf_r+0x110>
 800beb2:	eba0 0308 	sub.w	r3, r0, r8
 800beb6:	fa09 f303 	lsl.w	r3, r9, r3
 800beba:	4313      	orrs	r3, r2
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	46a2      	mov	sl, r4
 800bec0:	e7d2      	b.n	800be68 <_svfiprintf_r+0x9c>
 800bec2:	9b03      	ldr	r3, [sp, #12]
 800bec4:	1d19      	adds	r1, r3, #4
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	9103      	str	r1, [sp, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	bfbb      	ittet	lt
 800bece:	425b      	neglt	r3, r3
 800bed0:	f042 0202 	orrlt.w	r2, r2, #2
 800bed4:	9307      	strge	r3, [sp, #28]
 800bed6:	9307      	strlt	r3, [sp, #28]
 800bed8:	bfb8      	it	lt
 800beda:	9204      	strlt	r2, [sp, #16]
 800bedc:	7823      	ldrb	r3, [r4, #0]
 800bede:	2b2e      	cmp	r3, #46	; 0x2e
 800bee0:	d10c      	bne.n	800befc <_svfiprintf_r+0x130>
 800bee2:	7863      	ldrb	r3, [r4, #1]
 800bee4:	2b2a      	cmp	r3, #42	; 0x2a
 800bee6:	d135      	bne.n	800bf54 <_svfiprintf_r+0x188>
 800bee8:	9b03      	ldr	r3, [sp, #12]
 800beea:	1d1a      	adds	r2, r3, #4
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	9203      	str	r2, [sp, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	bfb8      	it	lt
 800bef4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bef8:	3402      	adds	r4, #2
 800befa:	9305      	str	r3, [sp, #20]
 800befc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfc8 <_svfiprintf_r+0x1fc>
 800bf00:	7821      	ldrb	r1, [r4, #0]
 800bf02:	2203      	movs	r2, #3
 800bf04:	4650      	mov	r0, sl
 800bf06:	f7f4 f98b 	bl	8000220 <memchr>
 800bf0a:	b140      	cbz	r0, 800bf1e <_svfiprintf_r+0x152>
 800bf0c:	2340      	movs	r3, #64	; 0x40
 800bf0e:	eba0 000a 	sub.w	r0, r0, sl
 800bf12:	fa03 f000 	lsl.w	r0, r3, r0
 800bf16:	9b04      	ldr	r3, [sp, #16]
 800bf18:	4303      	orrs	r3, r0
 800bf1a:	3401      	adds	r4, #1
 800bf1c:	9304      	str	r3, [sp, #16]
 800bf1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf22:	4826      	ldr	r0, [pc, #152]	; (800bfbc <_svfiprintf_r+0x1f0>)
 800bf24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf28:	2206      	movs	r2, #6
 800bf2a:	f7f4 f979 	bl	8000220 <memchr>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d038      	beq.n	800bfa4 <_svfiprintf_r+0x1d8>
 800bf32:	4b23      	ldr	r3, [pc, #140]	; (800bfc0 <_svfiprintf_r+0x1f4>)
 800bf34:	bb1b      	cbnz	r3, 800bf7e <_svfiprintf_r+0x1b2>
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	3307      	adds	r3, #7
 800bf3a:	f023 0307 	bic.w	r3, r3, #7
 800bf3e:	3308      	adds	r3, #8
 800bf40:	9303      	str	r3, [sp, #12]
 800bf42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf44:	4433      	add	r3, r6
 800bf46:	9309      	str	r3, [sp, #36]	; 0x24
 800bf48:	e767      	b.n	800be1a <_svfiprintf_r+0x4e>
 800bf4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf4e:	460c      	mov	r4, r1
 800bf50:	2001      	movs	r0, #1
 800bf52:	e7a5      	b.n	800bea0 <_svfiprintf_r+0xd4>
 800bf54:	2300      	movs	r3, #0
 800bf56:	3401      	adds	r4, #1
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	f04f 0c0a 	mov.w	ip, #10
 800bf60:	4620      	mov	r0, r4
 800bf62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf66:	3a30      	subs	r2, #48	; 0x30
 800bf68:	2a09      	cmp	r2, #9
 800bf6a:	d903      	bls.n	800bf74 <_svfiprintf_r+0x1a8>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d0c5      	beq.n	800befc <_svfiprintf_r+0x130>
 800bf70:	9105      	str	r1, [sp, #20]
 800bf72:	e7c3      	b.n	800befc <_svfiprintf_r+0x130>
 800bf74:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf78:	4604      	mov	r4, r0
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e7f0      	b.n	800bf60 <_svfiprintf_r+0x194>
 800bf7e:	ab03      	add	r3, sp, #12
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	462a      	mov	r2, r5
 800bf84:	4b0f      	ldr	r3, [pc, #60]	; (800bfc4 <_svfiprintf_r+0x1f8>)
 800bf86:	a904      	add	r1, sp, #16
 800bf88:	4638      	mov	r0, r7
 800bf8a:	f7fb feab 	bl	8007ce4 <_printf_float>
 800bf8e:	1c42      	adds	r2, r0, #1
 800bf90:	4606      	mov	r6, r0
 800bf92:	d1d6      	bne.n	800bf42 <_svfiprintf_r+0x176>
 800bf94:	89ab      	ldrh	r3, [r5, #12]
 800bf96:	065b      	lsls	r3, r3, #25
 800bf98:	f53f af2c 	bmi.w	800bdf4 <_svfiprintf_r+0x28>
 800bf9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf9e:	b01d      	add	sp, #116	; 0x74
 800bfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa4:	ab03      	add	r3, sp, #12
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	462a      	mov	r2, r5
 800bfaa:	4b06      	ldr	r3, [pc, #24]	; (800bfc4 <_svfiprintf_r+0x1f8>)
 800bfac:	a904      	add	r1, sp, #16
 800bfae:	4638      	mov	r0, r7
 800bfb0:	f7fc f93c 	bl	800822c <_printf_i>
 800bfb4:	e7eb      	b.n	800bf8e <_svfiprintf_r+0x1c2>
 800bfb6:	bf00      	nop
 800bfb8:	0800ccec 	.word	0x0800ccec
 800bfbc:	0800ccf6 	.word	0x0800ccf6
 800bfc0:	08007ce5 	.word	0x08007ce5
 800bfc4:	0800bd15 	.word	0x0800bd15
 800bfc8:	0800ccf2 	.word	0x0800ccf2

0800bfcc <__sfputc_r>:
 800bfcc:	6893      	ldr	r3, [r2, #8]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	b410      	push	{r4}
 800bfd4:	6093      	str	r3, [r2, #8]
 800bfd6:	da08      	bge.n	800bfea <__sfputc_r+0x1e>
 800bfd8:	6994      	ldr	r4, [r2, #24]
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	db01      	blt.n	800bfe2 <__sfputc_r+0x16>
 800bfde:	290a      	cmp	r1, #10
 800bfe0:	d103      	bne.n	800bfea <__sfputc_r+0x1e>
 800bfe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe6:	f7fd bbf5 	b.w	80097d4 <__swbuf_r>
 800bfea:	6813      	ldr	r3, [r2, #0]
 800bfec:	1c58      	adds	r0, r3, #1
 800bfee:	6010      	str	r0, [r2, #0]
 800bff0:	7019      	strb	r1, [r3, #0]
 800bff2:	4608      	mov	r0, r1
 800bff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <__sfputs_r>:
 800bffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffc:	4606      	mov	r6, r0
 800bffe:	460f      	mov	r7, r1
 800c000:	4614      	mov	r4, r2
 800c002:	18d5      	adds	r5, r2, r3
 800c004:	42ac      	cmp	r4, r5
 800c006:	d101      	bne.n	800c00c <__sfputs_r+0x12>
 800c008:	2000      	movs	r0, #0
 800c00a:	e007      	b.n	800c01c <__sfputs_r+0x22>
 800c00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c010:	463a      	mov	r2, r7
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ffda 	bl	800bfcc <__sfputc_r>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d1f3      	bne.n	800c004 <__sfputs_r+0xa>
 800c01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c020 <_vfiprintf_r>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	460d      	mov	r5, r1
 800c026:	b09d      	sub	sp, #116	; 0x74
 800c028:	4614      	mov	r4, r2
 800c02a:	4698      	mov	r8, r3
 800c02c:	4606      	mov	r6, r0
 800c02e:	b118      	cbz	r0, 800c038 <_vfiprintf_r+0x18>
 800c030:	6983      	ldr	r3, [r0, #24]
 800c032:	b90b      	cbnz	r3, 800c038 <_vfiprintf_r+0x18>
 800c034:	f7fe fc24 	bl	800a880 <__sinit>
 800c038:	4b89      	ldr	r3, [pc, #548]	; (800c260 <_vfiprintf_r+0x240>)
 800c03a:	429d      	cmp	r5, r3
 800c03c:	d11b      	bne.n	800c076 <_vfiprintf_r+0x56>
 800c03e:	6875      	ldr	r5, [r6, #4]
 800c040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c042:	07d9      	lsls	r1, r3, #31
 800c044:	d405      	bmi.n	800c052 <_vfiprintf_r+0x32>
 800c046:	89ab      	ldrh	r3, [r5, #12]
 800c048:	059a      	lsls	r2, r3, #22
 800c04a:	d402      	bmi.n	800c052 <_vfiprintf_r+0x32>
 800c04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c04e:	f7ff f828 	bl	800b0a2 <__retarget_lock_acquire_recursive>
 800c052:	89ab      	ldrh	r3, [r5, #12]
 800c054:	071b      	lsls	r3, r3, #28
 800c056:	d501      	bpl.n	800c05c <_vfiprintf_r+0x3c>
 800c058:	692b      	ldr	r3, [r5, #16]
 800c05a:	b9eb      	cbnz	r3, 800c098 <_vfiprintf_r+0x78>
 800c05c:	4629      	mov	r1, r5
 800c05e:	4630      	mov	r0, r6
 800c060:	f7fd fc0a 	bl	8009878 <__swsetup_r>
 800c064:	b1c0      	cbz	r0, 800c098 <_vfiprintf_r+0x78>
 800c066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c068:	07dc      	lsls	r4, r3, #31
 800c06a:	d50e      	bpl.n	800c08a <_vfiprintf_r+0x6a>
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	b01d      	add	sp, #116	; 0x74
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c076:	4b7b      	ldr	r3, [pc, #492]	; (800c264 <_vfiprintf_r+0x244>)
 800c078:	429d      	cmp	r5, r3
 800c07a:	d101      	bne.n	800c080 <_vfiprintf_r+0x60>
 800c07c:	68b5      	ldr	r5, [r6, #8]
 800c07e:	e7df      	b.n	800c040 <_vfiprintf_r+0x20>
 800c080:	4b79      	ldr	r3, [pc, #484]	; (800c268 <_vfiprintf_r+0x248>)
 800c082:	429d      	cmp	r5, r3
 800c084:	bf08      	it	eq
 800c086:	68f5      	ldreq	r5, [r6, #12]
 800c088:	e7da      	b.n	800c040 <_vfiprintf_r+0x20>
 800c08a:	89ab      	ldrh	r3, [r5, #12]
 800c08c:	0598      	lsls	r0, r3, #22
 800c08e:	d4ed      	bmi.n	800c06c <_vfiprintf_r+0x4c>
 800c090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c092:	f7ff f807 	bl	800b0a4 <__retarget_lock_release_recursive>
 800c096:	e7e9      	b.n	800c06c <_vfiprintf_r+0x4c>
 800c098:	2300      	movs	r3, #0
 800c09a:	9309      	str	r3, [sp, #36]	; 0x24
 800c09c:	2320      	movs	r3, #32
 800c09e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0a6:	2330      	movs	r3, #48	; 0x30
 800c0a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c26c <_vfiprintf_r+0x24c>
 800c0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0b0:	f04f 0901 	mov.w	r9, #1
 800c0b4:	4623      	mov	r3, r4
 800c0b6:	469a      	mov	sl, r3
 800c0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0bc:	b10a      	cbz	r2, 800c0c2 <_vfiprintf_r+0xa2>
 800c0be:	2a25      	cmp	r2, #37	; 0x25
 800c0c0:	d1f9      	bne.n	800c0b6 <_vfiprintf_r+0x96>
 800c0c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0c6:	d00b      	beq.n	800c0e0 <_vfiprintf_r+0xc0>
 800c0c8:	465b      	mov	r3, fp
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f7ff ff93 	bl	800bffa <__sfputs_r>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	f000 80aa 	beq.w	800c22e <_vfiprintf_r+0x20e>
 800c0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0dc:	445a      	add	r2, fp
 800c0de:	9209      	str	r2, [sp, #36]	; 0x24
 800c0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 80a2 	beq.w	800c22e <_vfiprintf_r+0x20e>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0f4:	f10a 0a01 	add.w	sl, sl, #1
 800c0f8:	9304      	str	r3, [sp, #16]
 800c0fa:	9307      	str	r3, [sp, #28]
 800c0fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c100:	931a      	str	r3, [sp, #104]	; 0x68
 800c102:	4654      	mov	r4, sl
 800c104:	2205      	movs	r2, #5
 800c106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10a:	4858      	ldr	r0, [pc, #352]	; (800c26c <_vfiprintf_r+0x24c>)
 800c10c:	f7f4 f888 	bl	8000220 <memchr>
 800c110:	9a04      	ldr	r2, [sp, #16]
 800c112:	b9d8      	cbnz	r0, 800c14c <_vfiprintf_r+0x12c>
 800c114:	06d1      	lsls	r1, r2, #27
 800c116:	bf44      	itt	mi
 800c118:	2320      	movmi	r3, #32
 800c11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c11e:	0713      	lsls	r3, r2, #28
 800c120:	bf44      	itt	mi
 800c122:	232b      	movmi	r3, #43	; 0x2b
 800c124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c128:	f89a 3000 	ldrb.w	r3, [sl]
 800c12c:	2b2a      	cmp	r3, #42	; 0x2a
 800c12e:	d015      	beq.n	800c15c <_vfiprintf_r+0x13c>
 800c130:	9a07      	ldr	r2, [sp, #28]
 800c132:	4654      	mov	r4, sl
 800c134:	2000      	movs	r0, #0
 800c136:	f04f 0c0a 	mov.w	ip, #10
 800c13a:	4621      	mov	r1, r4
 800c13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c140:	3b30      	subs	r3, #48	; 0x30
 800c142:	2b09      	cmp	r3, #9
 800c144:	d94e      	bls.n	800c1e4 <_vfiprintf_r+0x1c4>
 800c146:	b1b0      	cbz	r0, 800c176 <_vfiprintf_r+0x156>
 800c148:	9207      	str	r2, [sp, #28]
 800c14a:	e014      	b.n	800c176 <_vfiprintf_r+0x156>
 800c14c:	eba0 0308 	sub.w	r3, r0, r8
 800c150:	fa09 f303 	lsl.w	r3, r9, r3
 800c154:	4313      	orrs	r3, r2
 800c156:	9304      	str	r3, [sp, #16]
 800c158:	46a2      	mov	sl, r4
 800c15a:	e7d2      	b.n	800c102 <_vfiprintf_r+0xe2>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	1d19      	adds	r1, r3, #4
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	9103      	str	r1, [sp, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	bfbb      	ittet	lt
 800c168:	425b      	neglt	r3, r3
 800c16a:	f042 0202 	orrlt.w	r2, r2, #2
 800c16e:	9307      	strge	r3, [sp, #28]
 800c170:	9307      	strlt	r3, [sp, #28]
 800c172:	bfb8      	it	lt
 800c174:	9204      	strlt	r2, [sp, #16]
 800c176:	7823      	ldrb	r3, [r4, #0]
 800c178:	2b2e      	cmp	r3, #46	; 0x2e
 800c17a:	d10c      	bne.n	800c196 <_vfiprintf_r+0x176>
 800c17c:	7863      	ldrb	r3, [r4, #1]
 800c17e:	2b2a      	cmp	r3, #42	; 0x2a
 800c180:	d135      	bne.n	800c1ee <_vfiprintf_r+0x1ce>
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	1d1a      	adds	r2, r3, #4
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	9203      	str	r2, [sp, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfb8      	it	lt
 800c18e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c192:	3402      	adds	r4, #2
 800c194:	9305      	str	r3, [sp, #20]
 800c196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c27c <_vfiprintf_r+0x25c>
 800c19a:	7821      	ldrb	r1, [r4, #0]
 800c19c:	2203      	movs	r2, #3
 800c19e:	4650      	mov	r0, sl
 800c1a0:	f7f4 f83e 	bl	8000220 <memchr>
 800c1a4:	b140      	cbz	r0, 800c1b8 <_vfiprintf_r+0x198>
 800c1a6:	2340      	movs	r3, #64	; 0x40
 800c1a8:	eba0 000a 	sub.w	r0, r0, sl
 800c1ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c1b0:	9b04      	ldr	r3, [sp, #16]
 800c1b2:	4303      	orrs	r3, r0
 800c1b4:	3401      	adds	r4, #1
 800c1b6:	9304      	str	r3, [sp, #16]
 800c1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1bc:	482c      	ldr	r0, [pc, #176]	; (800c270 <_vfiprintf_r+0x250>)
 800c1be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1c2:	2206      	movs	r2, #6
 800c1c4:	f7f4 f82c 	bl	8000220 <memchr>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d03f      	beq.n	800c24c <_vfiprintf_r+0x22c>
 800c1cc:	4b29      	ldr	r3, [pc, #164]	; (800c274 <_vfiprintf_r+0x254>)
 800c1ce:	bb1b      	cbnz	r3, 800c218 <_vfiprintf_r+0x1f8>
 800c1d0:	9b03      	ldr	r3, [sp, #12]
 800c1d2:	3307      	adds	r3, #7
 800c1d4:	f023 0307 	bic.w	r3, r3, #7
 800c1d8:	3308      	adds	r3, #8
 800c1da:	9303      	str	r3, [sp, #12]
 800c1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1de:	443b      	add	r3, r7
 800c1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e2:	e767      	b.n	800c0b4 <_vfiprintf_r+0x94>
 800c1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	2001      	movs	r0, #1
 800c1ec:	e7a5      	b.n	800c13a <_vfiprintf_r+0x11a>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	3401      	adds	r4, #1
 800c1f2:	9305      	str	r3, [sp, #20]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	f04f 0c0a 	mov.w	ip, #10
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c200:	3a30      	subs	r2, #48	; 0x30
 800c202:	2a09      	cmp	r2, #9
 800c204:	d903      	bls.n	800c20e <_vfiprintf_r+0x1ee>
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0c5      	beq.n	800c196 <_vfiprintf_r+0x176>
 800c20a:	9105      	str	r1, [sp, #20]
 800c20c:	e7c3      	b.n	800c196 <_vfiprintf_r+0x176>
 800c20e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c212:	4604      	mov	r4, r0
 800c214:	2301      	movs	r3, #1
 800c216:	e7f0      	b.n	800c1fa <_vfiprintf_r+0x1da>
 800c218:	ab03      	add	r3, sp, #12
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	462a      	mov	r2, r5
 800c21e:	4b16      	ldr	r3, [pc, #88]	; (800c278 <_vfiprintf_r+0x258>)
 800c220:	a904      	add	r1, sp, #16
 800c222:	4630      	mov	r0, r6
 800c224:	f7fb fd5e 	bl	8007ce4 <_printf_float>
 800c228:	4607      	mov	r7, r0
 800c22a:	1c78      	adds	r0, r7, #1
 800c22c:	d1d6      	bne.n	800c1dc <_vfiprintf_r+0x1bc>
 800c22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c230:	07d9      	lsls	r1, r3, #31
 800c232:	d405      	bmi.n	800c240 <_vfiprintf_r+0x220>
 800c234:	89ab      	ldrh	r3, [r5, #12]
 800c236:	059a      	lsls	r2, r3, #22
 800c238:	d402      	bmi.n	800c240 <_vfiprintf_r+0x220>
 800c23a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c23c:	f7fe ff32 	bl	800b0a4 <__retarget_lock_release_recursive>
 800c240:	89ab      	ldrh	r3, [r5, #12]
 800c242:	065b      	lsls	r3, r3, #25
 800c244:	f53f af12 	bmi.w	800c06c <_vfiprintf_r+0x4c>
 800c248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c24a:	e711      	b.n	800c070 <_vfiprintf_r+0x50>
 800c24c:	ab03      	add	r3, sp, #12
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	462a      	mov	r2, r5
 800c252:	4b09      	ldr	r3, [pc, #36]	; (800c278 <_vfiprintf_r+0x258>)
 800c254:	a904      	add	r1, sp, #16
 800c256:	4630      	mov	r0, r6
 800c258:	f7fb ffe8 	bl	800822c <_printf_i>
 800c25c:	e7e4      	b.n	800c228 <_vfiprintf_r+0x208>
 800c25e:	bf00      	nop
 800c260:	0800cad4 	.word	0x0800cad4
 800c264:	0800caf4 	.word	0x0800caf4
 800c268:	0800cab4 	.word	0x0800cab4
 800c26c:	0800ccec 	.word	0x0800ccec
 800c270:	0800ccf6 	.word	0x0800ccf6
 800c274:	08007ce5 	.word	0x08007ce5
 800c278:	0800bffb 	.word	0x0800bffb
 800c27c:	0800ccf2 	.word	0x0800ccf2

0800c280 <nan>:
 800c280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c288 <nan+0x8>
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	00000000 	.word	0x00000000
 800c28c:	7ff80000 	.word	0x7ff80000

0800c290 <_sbrk_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4d06      	ldr	r5, [pc, #24]	; (800c2ac <_sbrk_r+0x1c>)
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	602b      	str	r3, [r5, #0]
 800c29c:	f7f5 fb14 	bl	80018c8 <_sbrk>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_sbrk_r+0x1a>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_sbrk_r+0x1a>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	200046ac 	.word	0x200046ac

0800c2b0 <__sread>:
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b8:	f000 f93a 	bl	800c530 <_read_r>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	bfab      	itete	ge
 800c2c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2c2:	89a3      	ldrhlt	r3, [r4, #12]
 800c2c4:	181b      	addge	r3, r3, r0
 800c2c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2ca:	bfac      	ite	ge
 800c2cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2ce:	81a3      	strhlt	r3, [r4, #12]
 800c2d0:	bd10      	pop	{r4, pc}

0800c2d2 <__swrite>:
 800c2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d6:	461f      	mov	r7, r3
 800c2d8:	898b      	ldrh	r3, [r1, #12]
 800c2da:	05db      	lsls	r3, r3, #23
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	4616      	mov	r6, r2
 800c2e2:	d505      	bpl.n	800c2f0 <__swrite+0x1e>
 800c2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f000 f8b8 	bl	800c460 <_lseek_r>
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2fa:	81a3      	strh	r3, [r4, #12]
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	463b      	mov	r3, r7
 800c300:	4628      	mov	r0, r5
 800c302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c306:	f000 b837 	b.w	800c378 <_write_r>

0800c30a <__sseek>:
 800c30a:	b510      	push	{r4, lr}
 800c30c:	460c      	mov	r4, r1
 800c30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c312:	f000 f8a5 	bl	800c460 <_lseek_r>
 800c316:	1c43      	adds	r3, r0, #1
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	bf15      	itete	ne
 800c31c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c31e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c326:	81a3      	strheq	r3, [r4, #12]
 800c328:	bf18      	it	ne
 800c32a:	81a3      	strhne	r3, [r4, #12]
 800c32c:	bd10      	pop	{r4, pc}

0800c32e <__sclose>:
 800c32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c332:	f000 b851 	b.w	800c3d8 <_close_r>

0800c336 <strncmp>:
 800c336:	b510      	push	{r4, lr}
 800c338:	b17a      	cbz	r2, 800c35a <strncmp+0x24>
 800c33a:	4603      	mov	r3, r0
 800c33c:	3901      	subs	r1, #1
 800c33e:	1884      	adds	r4, r0, r2
 800c340:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c344:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c348:	4290      	cmp	r0, r2
 800c34a:	d101      	bne.n	800c350 <strncmp+0x1a>
 800c34c:	42a3      	cmp	r3, r4
 800c34e:	d101      	bne.n	800c354 <strncmp+0x1e>
 800c350:	1a80      	subs	r0, r0, r2
 800c352:	bd10      	pop	{r4, pc}
 800c354:	2800      	cmp	r0, #0
 800c356:	d1f3      	bne.n	800c340 <strncmp+0xa>
 800c358:	e7fa      	b.n	800c350 <strncmp+0x1a>
 800c35a:	4610      	mov	r0, r2
 800c35c:	e7f9      	b.n	800c352 <strncmp+0x1c>

0800c35e <__ascii_wctomb>:
 800c35e:	b149      	cbz	r1, 800c374 <__ascii_wctomb+0x16>
 800c360:	2aff      	cmp	r2, #255	; 0xff
 800c362:	bf85      	ittet	hi
 800c364:	238a      	movhi	r3, #138	; 0x8a
 800c366:	6003      	strhi	r3, [r0, #0]
 800c368:	700a      	strbls	r2, [r1, #0]
 800c36a:	f04f 30ff 	movhi.w	r0, #4294967295
 800c36e:	bf98      	it	ls
 800c370:	2001      	movls	r0, #1
 800c372:	4770      	bx	lr
 800c374:	4608      	mov	r0, r1
 800c376:	4770      	bx	lr

0800c378 <_write_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d07      	ldr	r5, [pc, #28]	; (800c398 <_write_r+0x20>)
 800c37c:	4604      	mov	r4, r0
 800c37e:	4608      	mov	r0, r1
 800c380:	4611      	mov	r1, r2
 800c382:	2200      	movs	r2, #0
 800c384:	602a      	str	r2, [r5, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	f7f5 fa4d 	bl	8001826 <_write>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_write_r+0x1e>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_write_r+0x1e>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	200046ac 	.word	0x200046ac

0800c39c <__assert_func>:
 800c39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c39e:	4614      	mov	r4, r2
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <__assert_func+0x2c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	68d8      	ldr	r0, [r3, #12]
 800c3aa:	b14c      	cbz	r4, 800c3c0 <__assert_func+0x24>
 800c3ac:	4b07      	ldr	r3, [pc, #28]	; (800c3cc <__assert_func+0x30>)
 800c3ae:	9100      	str	r1, [sp, #0]
 800c3b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3b4:	4906      	ldr	r1, [pc, #24]	; (800c3d0 <__assert_func+0x34>)
 800c3b6:	462b      	mov	r3, r5
 800c3b8:	f000 f81e 	bl	800c3f8 <fiprintf>
 800c3bc:	f000 f8ca 	bl	800c554 <abort>
 800c3c0:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <__assert_func+0x38>)
 800c3c2:	461c      	mov	r4, r3
 800c3c4:	e7f3      	b.n	800c3ae <__assert_func+0x12>
 800c3c6:	bf00      	nop
 800c3c8:	20000018 	.word	0x20000018
 800c3cc:	0800ccfd 	.word	0x0800ccfd
 800c3d0:	0800cd0a 	.word	0x0800cd0a
 800c3d4:	0800cd38 	.word	0x0800cd38

0800c3d8 <_close_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4d06      	ldr	r5, [pc, #24]	; (800c3f4 <_close_r+0x1c>)
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4604      	mov	r4, r0
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	602b      	str	r3, [r5, #0]
 800c3e4:	f7f5 fa3b 	bl	800185e <_close>
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d102      	bne.n	800c3f2 <_close_r+0x1a>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	b103      	cbz	r3, 800c3f2 <_close_r+0x1a>
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	200046ac 	.word	0x200046ac

0800c3f8 <fiprintf>:
 800c3f8:	b40e      	push	{r1, r2, r3}
 800c3fa:	b503      	push	{r0, r1, lr}
 800c3fc:	4601      	mov	r1, r0
 800c3fe:	ab03      	add	r3, sp, #12
 800c400:	4805      	ldr	r0, [pc, #20]	; (800c418 <fiprintf+0x20>)
 800c402:	f853 2b04 	ldr.w	r2, [r3], #4
 800c406:	6800      	ldr	r0, [r0, #0]
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	f7ff fe09 	bl	800c020 <_vfiprintf_r>
 800c40e:	b002      	add	sp, #8
 800c410:	f85d eb04 	ldr.w	lr, [sp], #4
 800c414:	b003      	add	sp, #12
 800c416:	4770      	bx	lr
 800c418:	20000018 	.word	0x20000018

0800c41c <_fstat_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d07      	ldr	r5, [pc, #28]	; (800c43c <_fstat_r+0x20>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	4611      	mov	r1, r2
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	f7f5 fa24 	bl	8001876 <_fstat>
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	d102      	bne.n	800c438 <_fstat_r+0x1c>
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	b103      	cbz	r3, 800c438 <_fstat_r+0x1c>
 800c436:	6023      	str	r3, [r4, #0]
 800c438:	bd38      	pop	{r3, r4, r5, pc}
 800c43a:	bf00      	nop
 800c43c:	200046ac 	.word	0x200046ac

0800c440 <_isatty_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d06      	ldr	r5, [pc, #24]	; (800c45c <_isatty_r+0x1c>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	f7f5 fa23 	bl	8001896 <_isatty>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_isatty_r+0x1a>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_isatty_r+0x1a>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	200046ac 	.word	0x200046ac

0800c460 <_lseek_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d07      	ldr	r5, [pc, #28]	; (800c480 <_lseek_r+0x20>)
 800c464:	4604      	mov	r4, r0
 800c466:	4608      	mov	r0, r1
 800c468:	4611      	mov	r1, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	602a      	str	r2, [r5, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f7f5 fa1c 	bl	80018ac <_lseek>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_lseek_r+0x1e>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_lseek_r+0x1e>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	200046ac 	.word	0x200046ac

0800c484 <memmove>:
 800c484:	4288      	cmp	r0, r1
 800c486:	b510      	push	{r4, lr}
 800c488:	eb01 0402 	add.w	r4, r1, r2
 800c48c:	d902      	bls.n	800c494 <memmove+0x10>
 800c48e:	4284      	cmp	r4, r0
 800c490:	4623      	mov	r3, r4
 800c492:	d807      	bhi.n	800c4a4 <memmove+0x20>
 800c494:	1e43      	subs	r3, r0, #1
 800c496:	42a1      	cmp	r1, r4
 800c498:	d008      	beq.n	800c4ac <memmove+0x28>
 800c49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4a2:	e7f8      	b.n	800c496 <memmove+0x12>
 800c4a4:	4402      	add	r2, r0
 800c4a6:	4601      	mov	r1, r0
 800c4a8:	428a      	cmp	r2, r1
 800c4aa:	d100      	bne.n	800c4ae <memmove+0x2a>
 800c4ac:	bd10      	pop	{r4, pc}
 800c4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4b6:	e7f7      	b.n	800c4a8 <memmove+0x24>

0800c4b8 <__malloc_lock>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__malloc_lock+0x8>)
 800c4ba:	f7fe bdf2 	b.w	800b0a2 <__retarget_lock_acquire_recursive>
 800c4be:	bf00      	nop
 800c4c0:	200046a0 	.word	0x200046a0

0800c4c4 <__malloc_unlock>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__malloc_unlock+0x8>)
 800c4c6:	f7fe bded 	b.w	800b0a4 <__retarget_lock_release_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	200046a0 	.word	0x200046a0

0800c4d0 <_realloc_r>:
 800c4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	4614      	mov	r4, r2
 800c4d8:	460e      	mov	r6, r1
 800c4da:	b921      	cbnz	r1, 800c4e6 <_realloc_r+0x16>
 800c4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	f7ff bba3 	b.w	800bc2c <_malloc_r>
 800c4e6:	b92a      	cbnz	r2, 800c4f4 <_realloc_r+0x24>
 800c4e8:	f7ff fb34 	bl	800bb54 <_free_r>
 800c4ec:	4625      	mov	r5, r4
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f4:	f000 f835 	bl	800c562 <_malloc_usable_size_r>
 800c4f8:	4284      	cmp	r4, r0
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	d802      	bhi.n	800c504 <_realloc_r+0x34>
 800c4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c502:	d812      	bhi.n	800c52a <_realloc_r+0x5a>
 800c504:	4621      	mov	r1, r4
 800c506:	4640      	mov	r0, r8
 800c508:	f7ff fb90 	bl	800bc2c <_malloc_r>
 800c50c:	4605      	mov	r5, r0
 800c50e:	2800      	cmp	r0, #0
 800c510:	d0ed      	beq.n	800c4ee <_realloc_r+0x1e>
 800c512:	42bc      	cmp	r4, r7
 800c514:	4622      	mov	r2, r4
 800c516:	4631      	mov	r1, r6
 800c518:	bf28      	it	cs
 800c51a:	463a      	movcs	r2, r7
 800c51c:	f7fb fb2c 	bl	8007b78 <memcpy>
 800c520:	4631      	mov	r1, r6
 800c522:	4640      	mov	r0, r8
 800c524:	f7ff fb16 	bl	800bb54 <_free_r>
 800c528:	e7e1      	b.n	800c4ee <_realloc_r+0x1e>
 800c52a:	4635      	mov	r5, r6
 800c52c:	e7df      	b.n	800c4ee <_realloc_r+0x1e>
	...

0800c530 <_read_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d07      	ldr	r5, [pc, #28]	; (800c550 <_read_r+0x20>)
 800c534:	4604      	mov	r4, r0
 800c536:	4608      	mov	r0, r1
 800c538:	4611      	mov	r1, r2
 800c53a:	2200      	movs	r2, #0
 800c53c:	602a      	str	r2, [r5, #0]
 800c53e:	461a      	mov	r2, r3
 800c540:	f7f5 f954 	bl	80017ec <_read>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	d102      	bne.n	800c54e <_read_r+0x1e>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	b103      	cbz	r3, 800c54e <_read_r+0x1e>
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	200046ac 	.word	0x200046ac

0800c554 <abort>:
 800c554:	b508      	push	{r3, lr}
 800c556:	2006      	movs	r0, #6
 800c558:	f000 f834 	bl	800c5c4 <raise>
 800c55c:	2001      	movs	r0, #1
 800c55e:	f7f5 f93b 	bl	80017d8 <_exit>

0800c562 <_malloc_usable_size_r>:
 800c562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c566:	1f18      	subs	r0, r3, #4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bfbc      	itt	lt
 800c56c:	580b      	ldrlt	r3, [r1, r0]
 800c56e:	18c0      	addlt	r0, r0, r3
 800c570:	4770      	bx	lr

0800c572 <_raise_r>:
 800c572:	291f      	cmp	r1, #31
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4604      	mov	r4, r0
 800c578:	460d      	mov	r5, r1
 800c57a:	d904      	bls.n	800c586 <_raise_r+0x14>
 800c57c:	2316      	movs	r3, #22
 800c57e:	6003      	str	r3, [r0, #0]
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	bd38      	pop	{r3, r4, r5, pc}
 800c586:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c588:	b112      	cbz	r2, 800c590 <_raise_r+0x1e>
 800c58a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c58e:	b94b      	cbnz	r3, 800c5a4 <_raise_r+0x32>
 800c590:	4620      	mov	r0, r4
 800c592:	f000 f831 	bl	800c5f8 <_getpid_r>
 800c596:	462a      	mov	r2, r5
 800c598:	4601      	mov	r1, r0
 800c59a:	4620      	mov	r0, r4
 800c59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5a0:	f000 b818 	b.w	800c5d4 <_kill_r>
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d00a      	beq.n	800c5be <_raise_r+0x4c>
 800c5a8:	1c59      	adds	r1, r3, #1
 800c5aa:	d103      	bne.n	800c5b4 <_raise_r+0x42>
 800c5ac:	2316      	movs	r3, #22
 800c5ae:	6003      	str	r3, [r0, #0]
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	e7e7      	b.n	800c584 <_raise_r+0x12>
 800c5b4:	2400      	movs	r4, #0
 800c5b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	4798      	blx	r3
 800c5be:	2000      	movs	r0, #0
 800c5c0:	e7e0      	b.n	800c584 <_raise_r+0x12>
	...

0800c5c4 <raise>:
 800c5c4:	4b02      	ldr	r3, [pc, #8]	; (800c5d0 <raise+0xc>)
 800c5c6:	4601      	mov	r1, r0
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	f7ff bfd2 	b.w	800c572 <_raise_r>
 800c5ce:	bf00      	nop
 800c5d0:	20000018 	.word	0x20000018

0800c5d4 <_kill_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	4d07      	ldr	r5, [pc, #28]	; (800c5f4 <_kill_r+0x20>)
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4604      	mov	r4, r0
 800c5dc:	4608      	mov	r0, r1
 800c5de:	4611      	mov	r1, r2
 800c5e0:	602b      	str	r3, [r5, #0]
 800c5e2:	f7f5 f8e9 	bl	80017b8 <_kill>
 800c5e6:	1c43      	adds	r3, r0, #1
 800c5e8:	d102      	bne.n	800c5f0 <_kill_r+0x1c>
 800c5ea:	682b      	ldr	r3, [r5, #0]
 800c5ec:	b103      	cbz	r3, 800c5f0 <_kill_r+0x1c>
 800c5ee:	6023      	str	r3, [r4, #0]
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
 800c5f2:	bf00      	nop
 800c5f4:	200046ac 	.word	0x200046ac

0800c5f8 <_getpid_r>:
 800c5f8:	f7f5 b8d6 	b.w	80017a8 <_getpid>

0800c5fc <_init>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	bf00      	nop
 800c600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c602:	bc08      	pop	{r3}
 800c604:	469e      	mov	lr, r3
 800c606:	4770      	bx	lr

0800c608 <_fini>:
 800c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60a:	bf00      	nop
 800c60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60e:	bc08      	pop	{r3}
 800c610:	469e      	mov	lr, r3
 800c612:	4770      	bx	lr
